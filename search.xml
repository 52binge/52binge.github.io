<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Common Useful Links for Tensorflow]]></title>
      <url>http://iequa.com/2018/11/15/ops/ops-common-links-for-tf/</url>
      <content type="html"><![CDATA[<p>Here are some useful links about Tensorflow</p>
<a id="more"></a>
<h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h2><ul>
<li><a href="https://blog.csdn.net/leviopku/article/details/78508951" target="_blank" rel="external">TensorFlow中global_step的简单分析</a></li>
<li><a href="https://feisky.xyz/machine-learning/tensorflow/hello.html" target="_blank" rel="external">Tensorflow 入门， 很好的教程</a></li>
<li><a href="https://applenob.github.io/tf_10.html#tf.sequence_mask" target="_blank" rel="external">Tensorflow 学习笔记 数据处理 sequence_mask</a></li>
<li><a href="https://blog.csdn.net/qq_28808697/article/details/80648657" target="_blank" rel="external">tensorflow 学习笔记– tf.reduce_max、tf.sequence_mask</a></li>
<li><a href="https://blog.csdn.net/UESTC_C2_403/article/details/72779417" target="_blank" rel="external">tf.nn.embedding_lookup函数的用法</a></li>
<li><a href="https://ask.hellobi.com/blog/wenwen/11367" target="_blank" rel="external">使用Seq2Seq+attention实现简单的Chatbot</a></li>
<li><a href="https://blog.csdn.net/banana1006034246/article/details/75092388" target="_blank" rel="external">tf.strided_slice函数</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27685060" target="_blank" rel="external">Tensorlow 中文API: 常量(constants) - 5. tf.fill</a></li>
<li><a href="https://blog.csdn.net/mao_xiao_feng/article/details/53366163" target="_blank" rel="external">【TensorFlow】tf.concat的用法</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10187814" target="_blank" rel="external">[第 28 天] 深度學習（2）TensorBoard</a></li>
<li><a href="https://blog.csdn.net/hu_guan_jie/article/details/78495297" target="_blank" rel="external">tf.identity的意义以及用例</a></li>
<li><a href="https://www.jianshu.com/p/c0c5f1bdbb88" target="_blank" rel="external">Tensorflow动态seq2seq使用总结（r1.3）- Loss Function</a></li>
<li><a href="https://blog.csdn.net/u012436149/article/details/53184847" target="_blank" rel="external">tensorflow学习笔记(二十一):tensorflow可视化</a></li>
<li><a href="https://blog.csdn.net/hustqb/article/details/80260002" target="_blank" rel="external">tensorflow—tf.gradients()简单实用教程</a></li>
<li><a href="https://blog.csdn.net/u013713117/article/details/56281715" target="_blank" rel="external">tf.clip_by_global_norm理解</a></li>
<li><a href="https://applenob.github.io/tf_6.html" target="_blank" rel="external">Tensorflow 学习笔记（六） ———— Optimizer</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow：第8章 LSTM & Bi-RNN & Deep RNN]]></title>
      <url>http://iequa.com/2018/11/10/tensorflow/tf-google-8-rnn-2/</url>
      <content type="html"><![CDATA[<p>LSTM 可以学习到距离很远的信息，解决了RNN无法长期依赖的问题。 </p>
<p>Bidirectional RNN 解决的是 当前时刻的输出不仅和之前的状态有关系，也和之后的状态相关。</p>
<p>Deep RNNs 是 为了增强模型的表达能力，可以在网络中设置多个循环层，将每层 RNN 的输出传给下一层处理。</p>
<a id="more"></a>
<h2 id="1-LSTM"><a href="#1-LSTM" class="headerlink" title="1. LSTM"></a>1. LSTM</h2><p><img src="/images/tensorflow/tf-google-8-2.jpg" width="600"></p>
<h3 id="单层LSTM结构实现"><a href="#单层LSTM结构实现" class="headerlink" title="单层LSTM结构实现"></a>单层LSTM结构实现</h3><p>Tensorflow中实现了以下模块 :tf.nn.rnn_cell，包括了10个类：</p>
<ol>
<li>class BasicLSTMCell: Basic LSTM recurrent network cell.</li>
<li>class BasicRNNCell: The most basic RNN cell.</li>
<li>class DeviceWrapper: Operator that ensures an RNNCell runs on a particular device.</li>
<li>class DropoutWrapper: Operator adding dropout to inputs and outputs of the given cell.</li>
<li>class GRUCell: Gated Recurrent Unit cell (cf. <a href="http://arxiv.org/abs/1406.1078" target="_blank" rel="external">http://arxiv.org/abs/1406.1078</a>).</li>
<li>class LSTMCell: Long short-term memory unit (LSTM) recurrent network cell.</li>
<li>class LSTMStateTuple: Tuple used by LSTM Cells for state_size, zero_state, and output state.</li>
<li>class MultiRNNCell: RNN cell composed sequentially of multiple simple cells.</li>
<li>class RNNCell: Abstract object representing an RNN cell.</li>
<li>class ResidualWrapper: RNNCell wrapper that ensures cell inputs are added to the outputs.</li>
</ol>
<p>在基本的 LSTM cell 中我们用第一个类来进行实现，他是 tf.contrib.rnn.BasicLSTMCell 同名类，定义在 <a href="https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/python/ops/rnn_cell_impl.py" target="_blank" rel="external">tensorflow/python/ops/rnn_cell_impl.py</a> 中</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">_init__(</span><br><span class="line">    num_units,</span><br><span class="line">    forget_bias=<span class="number">1.0</span>,</span><br><span class="line">    state_is_tuple=<span class="keyword">True</span>,</span><br><span class="line">    activation=<span class="keyword">None</span>,</span><br><span class="line">    reuse=<span class="keyword">None</span>,</span><br><span class="line">    name=<span class="keyword">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中参数表示：</p>
<ul>
<li>num_units 表示神经元的个数</li>
<li>forget_bias 就是LSTM们的忘记系数，如果等于1，就是不会忘记任何信息。如果等于0，就都忘记</li>
<li>state_is_tuple 默认就是True，表示返回的状态是一个 2-tuple (c_state, m_state)</li>
<li>activation 表示内部状态的激活函数，默认是 tanh</li>
<li>name 表示这一层的名字，同样名字的层会共享权重，如果为了避免这样的情况需要设置reuse=True</li>
</ul>
<p><img src="/images/tensorflow/tf-google-8-5.jpg" width="600"></p>
<p>采用<strong>BasicLSTMCell来声明LSTM结构如下所示</strong>，我们用伪代码和注释来进行说明。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个lstm结构，在tensorflow中通过一句话就能实现一个完整的lstm结构</span></span><br><span class="line"><span class="comment"># lstm_hidden_size 表示 LSTM cell 中神经元的数量。 cell其实就是一个RNN的网络。</span></span><br><span class="line">lstm = tf.nn.rnn_cell.BasicLSTMCell(lstm_hidden_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将lstm中的状态初始化为全0数组，BasicLSTMCell提供了zero_state来生成全0数组</span></span><br><span class="line"><span class="comment"># 在优化RNN时每次也会使用一个batch的训练样本，batch_size给出了一个batch的大小</span></span><br><span class="line">state = lstm.zero_state(batch_size, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line">loss = <span class="number">0.0</span></span><br><span class="line"><span class="comment"># 为了在训练中避免梯度弥散的情况，规定一个最大的序列长度num_steps</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num_steps):</span><br><span class="line">    <span class="comment"># 在第一个时刻声明lstm结构中使用的变量，在之后的时刻都需要重复使用之前定义好的变量</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;<span class="number">0</span>:</span><br><span class="line">        tf.get_variable_scope().reuse_variables()</span><br><span class="line">    <span class="comment"># 每一步处理时间序列中的一个时刻，将当前输入current_input和前一时刻状态state传入LSTM结构</span></span><br><span class="line">    <span class="comment"># 就可以得到当前lstm结构的输出lstm_output和更新后的状态state</span></span><br><span class="line">    lstm_output, state = lstm(current_input, state)</span><br><span class="line">    <span class="comment"># 将当前时刻lstm输出传入一个全连接层得到最后的输出</span></span><br><span class="line">    final_output = fully_connected(lstm_output)</span><br><span class="line">    <span class="comment"># 计算当前时刻输出的损失</span></span><br><span class="line">    loss += calc_loss(final_output, expected_output)</span><br></pre></td></tr></table></figure>
<h2 id="2-Bidirectional-RNN"><a href="#2-Bidirectional-RNN" class="headerlink" title="2. Bidirectional RNN"></a>2. Bidirectional RNN</h2><ul>
<li>Bidirectional RNN 双向递归神经网络. 该神经网络首先从正面理解一遍这句话，再从反方向理解一遍.</li>
</ul>
<p><img src="/images/tensorflow/tf-google-8-3.jpg" width="600"></p>
<h2 id="3-Deep-RNNs"><a href="#3-Deep-RNNs" class="headerlink" title="3. Deep RNNs"></a>3. Deep RNNs</h2><ul>
<li>Deep RNNs 深层，顾名思义就是层次增。 横向表示时间展开，纵向则是层次展开。</li>
</ul>
<!--<img src="/images/tensorflow/tf-google-8-4.jpg" width="600" />
-->
<p><img src="/images/deeplearning/C5W1-47_1.png" width="750"></p>
<p>MultiRNNCell的初始化方法如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__init__(</span><br><span class="line">    cells,</span><br><span class="line">    state_is_tuple=<span class="keyword">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>cells 表示 RNNCells 的 list，按照顺序从输入到输出来表示不同层的循环层</li>
<li>state_is_tuple 表示 接受和返回的状态都是 n-tuples, 其中 n = len(cells)，建议采用True</li>
</ul>
<p>同样MultiRNNCell提供了状态初始化的函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">zero_state(</span><br><span class="line">    batch_size,</span><br><span class="line">    dtype</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>我们接下来用伪代码和注释来说明Deep RNN如何实现</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个基本的LSTM结构作为循环体的基础结构，当然也支持使用其他的循环体结构</span></span><br><span class="line">lstm_cell = tf.nn.rnn_cell.BasicLSTMCell</span><br><span class="line"><span class="comment"># 通过MultiRNNCells类来实现Deep RNN，其中number_of_layers表示有多少层，lstm_size表示每层的单元数量</span></span><br><span class="line">stacked_lstm = tf.nn.rnn_cell.MultiRNNCell([lstm_cell(lstm_size) <span class="keyword">for</span> _ <span class="keyword">in</span> range(number_of_layers)])</span><br><span class="line"><span class="comment"># 初始化并获取初始状态</span></span><br><span class="line">state = stacked_lstm.zeros_state(batch_size, tf.float32)</span><br><span class="line"></span><br><span class="line">foor i <span class="keyword">in</span> range(len(num_steps)):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        tf.get_variable_scope().reuse_variables()</span><br><span class="line">    <span class="comment"># 根据当前输入current_input(x_t) 和前一阶段状态state(h_(t-1), s_(t-1)) 来前向计算得到当前状态state(h_t, s_t) 和输出stacked_lstm_output (h_t)</span></span><br><span class="line">    stacked_lstm_output, state = stacked_lstm(current_input, state)</span><br><span class="line">    <span class="comment"># 输出喂给全联接层</span></span><br><span class="line">    final_output = fully_connected(stacked_lstm_output)</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss += calc_loss(final_output, expected_output)</span><br><span class="line">    <span class="comment"># 进行优化</span></span><br><span class="line">    .......</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.ctolib.com/docs-Tensorflow-c-Tensorflow5.html" target="_blank" rel="external">深入浅出Tensorflow（五）：循环神经网络简介</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37070414" target="_blank" rel="external">Tensorflow实战(1): 实现深层循环神经网络</a></li>
<li><a href="https://zh.gluon.ai/" target="_blank" rel="external">zh.gluon.ai 动手学深度学习</a></li>
<li><a href="https://www.zhihu.com/question/272049149" target="_blank" rel="external">正确理解 cell 与 hidden size 的区别</a></li>
</ul>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow： 第8章 循环神经网络 1]]></title>
      <url>http://iequa.com/2018/11/08/tensorflow/tf-google-8-rnn-1/</url>
      <content type="html"><![CDATA[<p>实战Google深度学习框架 笔记-第8章 循环神经网络-1-前向传播。 <a href="https://github.com/blair101/deep-learning-action/tree/master/tf.tutorials/Chapter8" target="_blank" rel="external">Github: RNN-1-Forward_Propagation.ipynb</a></p>
<a id="more"></a>
<p>运算的流程图可参考下面这张图</p>
<p><img src="/images/tensorflow/tf-google-8-1.jpg" width="800"></p>
<h2 id="RNN-Forward-Propagation"><a href="#RNN-Forward-Propagation" class="headerlink" title="RNN Forward Propagation"></a>RNN Forward Propagation</h2><p>RNN 前向传播知识回顾</p>
<p><img src="/images/deeplearning/C5W1-10_1.png" width="750"></p>
<blockquote>
<p>$a^{<0>}=\vec{0}$</0></p>
<p>$a^{<1>}=g_1(W_{aa}a^{<0>}+W_{ax}x^{<1>}+b_a)$</1></0></1></p>
<p>$y^{<1>}=g_2(W_{ya}a^{<1>}+b_y)$</1></1></p>
<p>$a^{&lt;{t}&gt;}=g_1(W_{aa}a^{&lt;{t-1}&gt;}+W_{ax}x^{&lt;{t}&gt;}+b_a)$</p>
<p>$y^{&lt;{t}&gt;}=g_2(W_{ya}a^{&lt;{t}&gt;}+b_y)$</p>
<p>激活函数：<strong>$g_1$</strong> 一般为 <strong><code>tanh</code>函数</strong> (或者是 <strong><code>Relu</code>函数</strong>)，<strong>$g_2$</strong> 一般是 <strong><code>Sigmod</code>函数</strong>.</p>
<p>注意: 参数的下标是有顺序含义的，如 $W_{ax}$ 下标的第一个参数表示要计算的量的类型，即要计算 $a$ 矢量，第二个参数表示要进行乘法运算的数据类型，即需要与 $x$ 矢量做运算。如 $W_{ax} x^{t}\rightarrow{a}$</p>
</blockquote>
<h2 id="1-定义RNN的参数"><a href="#1-定义RNN的参数" class="headerlink" title="1. 定义RNN的参数"></a>1. 定义RNN的参数</h2><p>这个例子是用np写的，没用到tensorflow</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化， state = a^&#123;&lt;0&gt;&#125; 与 定义 X 时间序列参数</span></span><br><span class="line">X = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">state = [<span class="number">0.0</span>, <span class="number">0.0</span>] <span class="comment"># a^&#123;&lt;0&gt;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分开定义不同输入部分的权重以方便操作</span></span><br><span class="line">w_cell_state = np.asarray([[<span class="number">0.1</span>, <span class="number">0.2</span>], [<span class="number">0.3</span>, <span class="number">0.4</span>]]) <span class="comment"># W_&#123;aa&#125;</span></span><br><span class="line">w_cell_input = np.asarray([[<span class="number">0.5</span>, <span class="number">0.6</span>]]) <span class="comment"># W_&#123;ax&#125;</span></span><br><span class="line"></span><br><span class="line">b_cell = np.asarray([<span class="number">0.1</span>, <span class="number">-0.1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义用于输出的全连接层参数， 与 state = a^&#123;&lt;i&gt;&#125; 的 shape 相反置</span></span><br><span class="line">w_output = np.asarray([[<span class="number">0.1</span>], [<span class="number">2.0</span>]])</span><br><span class="line">b_output = <span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<h2 id="2-执行前向传播的过程"><a href="#2-执行前向传播的过程" class="headerlink" title="2. 执行前向传播的过程"></a>2. 执行前向传播的过程</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照时间顺序执行循环审计网络的前向传播过程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</span><br><span class="line">    <span class="comment"># 计算循环体中的全连接层神经网络</span></span><br><span class="line">    before_activation = np.dot(state, w_cell_state) + X[i] * w_cell_input + b_cell</span><br><span class="line">    </span><br><span class="line">    state = np.tanh(before_activation)</span><br><span class="line">    final_output = np.dot(state, w_output) + b_output</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"iteration round:"</span>, i+<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"before activation: "</span>, before_activation)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"state: "</span>, state)</span><br><span class="line">    print(<span class="string">"output: "</span>, final_output)</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iteration round: 1</span><br><span class="line">before activation:  [[0.95107374 1.0254142 ]]</span><br><span class="line">state:  [[0.74026877 0.7720626 ]]</span><br><span class="line">output:  [[1.71815207]]</span><br><span class="line">iteration round: 2</span><br><span class="line">before activation:  [[1.40564566 1.55687879]]</span><br><span class="line">state:  [[0.88656589 0.91491336]]</span><br><span class="line">output:  [[2.0184833]]</span><br></pre></td></tr></table></figure>
<p>和其他神经网络类似，在定义完损失函数之后，套用第4章中介绍的优化框架TensorFlow就可以<strong>自动完成模型训练</strong>的过程。这里唯一需要特别指出的是，理论上循环神经网络可以支持任意长度的序列，然而在实际中，如果序列过长会导致优化时出现梯度消散的问题（<strong>the vanishing gradient problem</strong>） (8) ，所以实际中一般会<strong>规定一个最大长度</strong>，当序列长度超过规定长度之后会对序列进行截断。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/31539492" target="_blank" rel="external">知乎：《TensorFlow：实战Google深度学习框架》笔记、代码及勘误-第8章 循环神经网络-1-前向传播</a></li>
<li><a href="http://b.7dtime.com/B076DGNXP1/13/0.html" target="_blank" rel="external">7天时间： 循环神经网络简介 (1)</a></li>
</ul>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow - tf.contrib.learn 创建 Estimator]]></title>
      <url>http://iequa.com/2018/11/04/tensorflow/tf-5.4-contrib-learn-Estimator/</url>
      <content type="html"><![CDATA[<p>tf.contrib.learn 框架可以通过其高级别的 Estimator API 轻松构建和训练机器学习模型.</p>
<p>Estimator 提供您可以实例化的类以快速配置常见的模型类型，如 regressors 和 classifiers：</p>
<a id="more"></a> 
<ul>
<li><a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/LinearClassifier" target="_blank" rel="external">tf.contrib.learn.LinearClassifier</a></li>
<li><a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/LinearRegressor" target="_blank" rel="external">tf.contrib.learn.LinearRegressor</a></li>
<li><a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/DNNClassifier" target="_blank" rel="external">tf.contrib.learn.DNNClassifier</a></li>
<li><a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/DNNRegressor" target="_blank" rel="external">tf.contrib.learn.DNNRegressor</a></li>
<li><a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn" target="_blank" rel="external">tf.contrib.learn……</a></li>
</ul>
<p><strong>完整代码</strong>：</p>
<ul>
<li><a href="https://github.com/blair101/deep-learning-action/tree/master/tf.contrib.learn/tf-5.4-Estimator" target="_blank" rel="external">Github 鲍鱼年龄预测器 r1.11 Abalone Age Predictor</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029584" target="_blank" rel="external">在tf.contrib.learn中创建估算器</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow - tf.contrib.learn 基础的记录和监控教程]]></title>
      <url>http://iequa.com/2018/11/04/tensorflow/tf-5.3-contrib-learn-MonitorAPI/</url>
      <content type="html"><![CDATA[<p>训练模型时，实时跟踪和评估进度通常很有价值。</p>
<p>学习使用TensorFlow的日志记录功能和MonitorAPI来监督正在用神经网络分类器分类irises的训练情况。</p>
<a id="more"></a> 
<p><strong>完整代码：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data sets</span></span><br><span class="line">IRIS_TRAINING = <span class="string">"iris_training.csv"</span></span><br><span class="line">IRIS_TEST = <span class="string">"iris_test.csv"</span></span><br><span class="line"></span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># First download iris_training.csv and iris_test.csv</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load datasets.</span></span><br><span class="line">    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">        filename=IRIS_TRAINING,</span><br><span class="line">        target_dtype=np.int,</span><br><span class="line">        features_dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">        filename=IRIS_TEST,</span><br><span class="line">        target_dtype=np.int,</span><br><span class="line">        features_dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify that all features have real-value data</span></span><br><span class="line">    feature_columns = [tf.contrib.layers.real_valued_column(<span class="string">""</span>, dimension=<span class="number">4</span>)]</span><br><span class="line">    <span class="comment"># [_RealValuedColumn(column_name='', dimension=4, default_value=None, dtype=tf.float32, normalizer=None)]</span></span><br><span class="line"></span><br><span class="line">    validation_monitor = tf.contrib.learn.monitors.ValidationMonitor(</span><br><span class="line">        test_set.data,</span><br><span class="line">        test_set.target,</span><br><span class="line">        every_n_steps=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build 3 layer DNN with 10, 20, 10 units respectively.</span></span><br><span class="line">    classifier = tf.contrib.learn.DNNClassifier(</span><br><span class="line">        feature_columns=feature_columns,</span><br><span class="line">        hidden_units=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>],</span><br><span class="line">        n_classes=<span class="number">3</span>,</span><br><span class="line">        model_dir=<span class="string">"/tmp/iris_model"</span>,</span><br><span class="line">        config=tf.contrib.learn.RunConfig(save_checkpoints_secs=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fit model.</span></span><br><span class="line">    classifier.fit(x=training_set.data,</span><br><span class="line">                   y=training_set.target,</span><br><span class="line">                   steps=<span class="number">2000</span>,</span><br><span class="line">                   monitors=[validation_monitor])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><a href="https://github.com/blair101/TensorFlowExamples/tree/master/tf.contrib.learn/tf-5.3-validationMonitor-Iris" target="_blank" rel="external">代码参见 Blair‘s Github - tf.contrib.learn 基础的记录和监控教程</a></li>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029489" target="_blank" rel="external">教程参见 cwiki.apachecn.org tf.contrib.learn 基础的记录和监控教程</a></li>
</ul>
</blockquote>
<h2 id="1-使用TensorFlow启用日志记录"><a href="#1-使用TensorFlow启用日志记录" class="headerlink" title="1. 使用TensorFlow启用日志记录"></a>1. 使用TensorFlow启用日志记录</h2><p>默认情况下，TensorFlow被配置在WARN日志级别，但是当跟踪模型训练时，您需要将级别调整为INFO。</p>
<p>代码的开头（在import导入之后）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br></pre></td></tr></table></figure>
<p>运行代码时，会看到如下所示的其他日志输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO:tensorflow:loss = 1.18812, step = 1</span><br><span class="line">INFO:tensorflow:loss = 0.210323, step = 101</span><br><span class="line">INFO:tensorflow:loss = 0.109025, step = 201</span><br></pre></td></tr></table></figure>
<p>使用INFO级别日志记录，tf.contrib.learn会在每100步之后自动将training-loss metrics输出到stderr。</p>
<h2 id="2-配置验证监视器进行流评估"><a href="#2-配置验证监视器进行流评估" class="headerlink" title="2. 配置验证监视器进行流评估"></a>2. 配置验证监视器进行流评估</h2><p>记录训练损失有助于了解您的模型是否收敛，但如果您想进一步了解训练中发生的情况怎么办？tf.contrib.learn提供了几个高级别Monitor，您可以附加到您的fit操作，以进一步跟踪metrics/调试模型训练期间的更低级别TensorFlow操作</p>
<h3 id="2-1-每隔N步评估"><a href="#2-1-每隔N步评估" class="headerlink" title="2.1 每隔N步评估"></a>2.1 每隔N步评估</h3><p>对于iris神经网络分类器，在记录训练损失时，您可能还需要同时对测试数据进行评估，以了解该模型的泛化程度。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">validation_monitor = tf.contrib.learn.monitors.ValidationMonitor(</span><br><span class="line">    test_set.data,</span><br><span class="line">    test_set.target,</span><br><span class="line">    every_n_steps=<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>将此代码放在实例化classifier那行之前。</p>
<p>ValidationMonitor依靠保存的checkpoints执行评估操作，因此您需要添加包含save_checkpoints_secs的<a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/RunConfig" target="_blank" rel="external">tf.contrib.learn.RunConfig</a>去修改classifier的实例化，该参数指定在训练期间经过多少秒保存checkpoint。</p>
<p>由于iris数据集相当小，因此训练速度很快，设置save_checkpoints_secs为1（每1秒保存checkpoint）：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">classifier = tf.contrib.learn.DNNClassifier(</span><br><span class="line">    feature_columns=feature_columns,</span><br><span class="line">    hidden_units=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>],</span><br><span class="line">    n_classes=<span class="number">3</span>,</span><br><span class="line">    model_dir=<span class="string">"/tmp/iris_model"</span>,</span><br><span class="line">    config=tf.contrib.learn.RunConfig(save_checkpoints_secs=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>validation_monitor，更新包快调用monitors参数的fit，该参数在模型训练期间生成包含所有monitors的list：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">classifier.fit(x=training_set.data,</span><br><span class="line">               y=training_set.target,</span><br><span class="line">               steps=<span class="number">2000</span>,</span><br><span class="line">               monitors=[validation_monitor])</span><br></pre></td></tr></table></figure>
<p>重新运行代码时，您应该在日志输出中看到验证metrics，例如： (但是我这里试验的时候，并没有出现)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">INFO:tensorflow:Validation (step <span class="number">50</span>): loss = <span class="number">1.71139</span>, global_step = <span class="number">0</span>, accuracy = <span class="number">0.266667</span></span><br><span class="line">...</span><br><span class="line">INFO:tensorflow:Validation (step <span class="number">300</span>): loss = <span class="number">0.0714158</span>, global_step = <span class="number">268</span>, accuracy = <span class="number">0.966667</span></span><br><span class="line">...</span><br><span class="line">INFO:tensorflow:Validation (step <span class="number">1750</span>): loss = <span class="number">0.0574449</span>, global_step = <span class="number">1729</span>, accuracy = <span class="number">0.966667</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-使用MetricSpec定义Evaluation-Metrics"><a href="#2-2-使用MetricSpec定义Evaluation-Metrics" class="headerlink" title="2.2 使用MetricSpec定义Evaluation Metrics"></a>2.2 使用MetricSpec定义Evaluation Metrics</h3><ul>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029489" target="_blank" rel="external">详情参见 cwiki.apachecn.org tf.contrib.learn 基础的记录和监控教程</a></li>
</ul>
<h3 id="2-3-通过ValidationMonitor提前停止训练"><a href="#2-3-通过ValidationMonitor提前停止训练" class="headerlink" title="2.3 通过ValidationMonitor提前停止训练"></a>2.3 通过ValidationMonitor提前停止训练</h3><ul>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029489" target="_blank" rel="external">详情参见 cwiki.apachecn.org tf.contrib.learn 基础的记录和监控教程</a></li>
</ul>
<h2 id="3-用TensorBoard可视化日志数据"><a href="#3-用TensorBoard可视化日志数据" class="headerlink" title="3. 用TensorBoard可视化日志数据"></a>3. 用TensorBoard可视化日志数据</h2><p>读取通过ValidationMonitor在训练期间产生大量关于模型性能的原始数据的日志，此数据的可视化，对进一步了解趋势可能会有帮助，例如准确性如何随着步数而变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tensorboard --logdir=/tmp/iris_model/</span><br><span class="line">Starting TensorBoard 39 on port 6006</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029489" target="_blank" rel="external">tf.contrib.learn基础的记录和监控教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大数据平台CDH6.0集群在线安装]]></title>
      <url>http://iequa.com/2018/11/02/hadoop/ops-install-CDH6.0.1/</url>
      <content type="html"><![CDATA[<p>介绍了 CDH 集群的搭建与安装</p>
<p>标签： Cloudera-Manager CDH Hadoop 部署 集群</p>
<a id="more"></a>
<blockquote>
<p>目前Hadoop比较流行的主要有2个版本，Apache和Cloudera版本。</p>
<ul>
<li>Apache Hadoop：维护人员比较多，更新频率比较快，但是稳定性比较差。</li>
<li>Cloudera Hadoop（CDH）：CDH：Cloudera公司的发行版本，基于Apache Hadoop的二次开发，优化了组件兼容和交互接口、简化安装配置、增加Cloudera兼容特性。</li>
</ul>
</blockquote>
<h2 id="1-操作环境"><a href="#1-操作环境" class="headerlink" title="1. 操作环境"></a>1. 操作环境</h2><ul>
<li>CentOS 7.3 x64 （4C/10G/50G） </li>
<li>Cloudera Manager：6.0.1  </li>
<li>CDH: 6.0.1</li>
</ul>
<p>相关包地址</p>
<p>Cloudera Manager下载地址：<a href="https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/RPMS/x86_64/" target="_blank" rel="external">https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/RPMS/x86_64/</a></p>
<blockquote>
<ul>
<li>cloudera-manager-agent-6.0.0-530873.el7.x86_64.rpm</li>
<li>cloudera-manager-daemons-6.0.0-530873.el7.x86_64.rpm</li>
<li>cloudera-manager-server-6.0.0-530873.el7.x86_64.rpm</li>
<li>cloudera-manager-server-db-2-6.0.0-530873.el7.x86_64.rpm</li>
<li>oracle-j2sdk1.8-1.8.0+update141-1.x86_64.rpm</li>
</ul>
</blockquote>
<p>CDH安装包地址：<a href="https://archive.cloudera.com/cdh6/6.0.0/parcels/" target="_blank" rel="external">https://archive.cloudera.com/cdh6/6.0.0/parcels/</a></p>
<blockquote>
<ul>
<li>CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel</li>
<li>CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel.sha256</li>
<li>manifest.json</li>
</ul>
</blockquote>
<p>注意：以下操作均用root用户操作。</p>
<h2 id="2-网络配置-所有节点"><a href="#2-网络配置-所有节点" class="headerlink" title="2. 网络配置(所有节点)"></a>2. 网络配置(所有节点)</h2><p><strong>在所有节点上把IP和主机名的对应关系写入</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉原有的语句, 增加：</span></span><br><span class="line">192.192.0.25 server</span><br><span class="line">192.192.0.26 chdagent1</span><br><span class="line">192.192.0.27 chdagent2</span><br></pre></td></tr></table></figure>
<p><strong>在相应的节点主机上修改主机名</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=cdhserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改或者添加 HOSTNAME=cdhserver</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>cdhserver 是你起的的主机名字</p>
</blockquote>
<p><strong>执行命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hostname cdhserver</span><br></pre></td></tr></table></figure>
<p>CentOS7要多执行以下这步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname cdhserver</span><br></pre></td></tr></table></figure>
<h2 id="3-打通SSH"><a href="#3-打通SSH" class="headerlink" title="3. 打通SSH"></a>3. 打通SSH</h2><p>设置ssh无密码登陆（所有节点）</p>
<h2 id="4-关闭防火墙和SELinux"><a href="#4-关闭防火墙和SELinux" class="headerlink" title="4. 关闭防火墙和SELinux"></a>4. 关闭防火墙和SELinux</h2><p>注意： 需要在所有的节点上执行，因为涉及到的端口太多了，临时关闭防火墙是为了安装起来更方便，安装完毕后可以根据需要设置防火墙策略，保证集群安全。</p>
<p>关闭防火墙并关闭自启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<h2 id="5-所有节点配置NTP服务"><a href="#5-所有节点配置NTP服务" class="headerlink" title="5. 所有节点配置NTP服务"></a>5. 所有节点配置NTP服务</h2><p>集群中所有主机必须保持时间同步，如果时间相差较大会引起各种问题。 具体思路如下：</p>
<p>master节点作为ntp服务器与外界对时中心同步时间，随后对所有datanode节点提供时间同步服务。</p>
<p>所有datanode节点以master节点为基础同步时间。</p>
<p>所有节点安装相关组件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp</span><br></pre></td></tr></table></figure>
<p>启动服务： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start ntpd</span><br></pre></td></tr></table></figure>
<p>配置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br></pre></td></tr></table></figure>
<h2 id="6-安装-python-2-7"><a href="#6-安装-python-2-7" class="headerlink" title="6. 安装 python 2.7"></a>6. 安装 python 2.7</h2><p>必须是python2.7版本，CentOS 7 系统可以不用装，系统自带的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载并安装EPEL，安装python-pip，psycopg2有依赖</span><br><span class="line">[root@localhost ~]# wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@localhost ~]# rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@localhost ~]# yum repolist  #检查是否已添加至源列表</span><br></pre></td></tr></table></figure>
<p>升级软件依赖版本</p>
<p>Starting with CDH 6, PostgreSQL-backed Hue requires the Psycopg2 version to be at least 2.5.4</p>
<p>首先安装epel扩展源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install --upgrade psycopg2</span><br></pre></td></tr></table></figure>
<h2 id="7-准备Parcels，用以安装CDH6"><a href="#7-准备Parcels，用以安装CDH6" class="headerlink" title="7. 准备Parcels，用以安装CDH6"></a>7. 准备Parcels，用以安装CDH6</h2><p>将CHD6相关的Parcel包放到主节点的/opt/cloudera/parcel-repo/目录中，如果没有此目录，可以自己创建。</p>
<blockquote>
<ul>
<li>CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel</li>
<li>CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel.sha256</li>
<li>manifest.json</li>
</ul>
</blockquote>
<p>注意：最后将CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel.sha256，重命名为CDH-6.0.0-1.cdh6.0.0.p0.537114-el7.parcel.sha</p>
<p><strong>安装repo</strong>: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/cloudera-manager.repo -P /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<p><strong>导入GPG key</strong>: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm --import https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/RPM-GPG-KEY-cloudera</span><br></pre></td></tr></table></figure>
<p><strong>JDK install</strong>: </p>
<blockquote>
<p>yum install oracle-j2sdk1.8</p>
<p>注意 ： </p>
<ul>
<li>使用 yum 下载，需要确定版本与安装CDH6官方要求的需要的版本一致</li>
<li>也可不使用 yum 安装，使用自己下载 JDK，然后手动绿色安装配置</li>
<li>也可在安装 CM 的时候，再根据提示来安装需要的 JDK</li>
</ul>
<p>三种方式任选其一便可</p>
</blockquote>
<p><strong>yum安装CM</strong>: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install cloudera-manager-server</span><br></pre></td></tr></table></figure>
<h2 id="8-安装MySql"><a href="#8-安装MySql" class="headerlink" title="8. 安装MySql"></a>8. 安装MySql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
<p>初始化Mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>配置JDBC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</span><br><span class="line">tar zxvf mysql-connector-java-5.1.46.tar.gz</span><br><span class="line">mkdir -p /usr/share/java/</span><br><span class="line"><span class="built_in">cd</span> mysql-connector-java-5.1.46</span><br><span class="line">cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure>
<p>建库：根据官方文档提供的命名建库，方便记忆。(在CM配置CDH的时候会用到这些库名)</p>
<blockquote>
<p>Set up the Cloudera Manager Database：/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm</p>
</blockquote>
<p>出现如下日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_141-cloudera</span><br><span class="line">Verifying that we can write to /etc/cloudera-scm-server</span><br><span class="line">Creating SCM configuration file <span class="keyword">in</span> /etc/cloudera-scm-server</span><br><span class="line">Executing:  /usr/java/jdk1.8.0_141-cloudera/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/usr/share/java/postgresql-connector-java.jar:/opt/cloudera/cm/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.</span><br><span class="line">[main] DbCommandExecutor INFO  Successfully connected to database.</span><br><span class="line">All <span class="keyword">done</span>, your SCM database is configured correctly!</span><br></pre></td></tr></table></figure>
<h2 id="9-启动CM服务"><a href="#9-启动CM服务" class="headerlink" title="9. 启动CM服务"></a>9. 启动CM服务</h2><p>启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start cloudera-scm-server</span><br></pre></td></tr></table></figure>
<p>查看日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail <span class="_">-f</span> /var/<span class="built_in">log</span>/cloudera-scm-server/cloudera-scm-server.log</span><br></pre></td></tr></table></figure>
<blockquote>
<p>出现：INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.则表示服务正常启动</p>
</blockquote>
<p>登录 http://<server_host>:7180 账号：admin</server_host></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/caolijun1166/article/details/82714387" target="_blank" rel="external">CDH 6.0.0 搭建</a></li>
<li><a href="http://blog.51cto.com/pizibaidu/2174297" target="_blank" rel="external">CDH6.0.0详细安装教程及所遇到的问题</a></li>
<li><a href="https://www.cloudera.com/documentation/enterprise/6/6.0/topics/installation.html" target="_blank" rel="external">官方文档 - Cloudera Installation Guide</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow - tf.contrib.learn 构建输入函数]]></title>
      <url>http://iequa.com/2018/11/01/tensorflow/tf-5.2-contrib-learn-Input-fn/</url>
      <content type="html"><![CDATA[<p>介绍如何在tf.contrib.learn中创建输入函数。了解如何构建input_fn去预处理和将数据输到模型中的概述。</p>
<p>实现利用input_fn将训练，评估和预测数据提供给神经网络回归器，用于预测房价中位数。</p>
<a id="more"></a> 
<h2 id="1-利用input-fn自定义输入Pipelines"><a href="#1-利用input-fn自定义输入Pipelines" class="headerlink" title="1. 利用input_fn自定义输入Pipelines"></a>1. 利用input_fn自定义输入Pipelines</h2><p>当使用 tf.contrib.learn 训练神经网络，它可以直接通过您的特征和目标数据进行训练，分析或预测操作。这是一个从tf.contrib.learn快速入门教程中获取的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">training_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">    filename=IRIS_TRAINING, target_dtype=np.int, features_dtype=np.float32)</span><br><span class="line">test_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">    filename=IRIS_TEST, target_dtype=np.int, features_dtype=np.float32)</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">classifier.fit(x=training_set.data,</span><br><span class="line">               y=training_set.target,</span><br><span class="line">               steps=<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>当需要对源数据进行少量操作时，这种方法运行良好。但是在需要更多特征工程的情况下， tf.contrib.learn支持使用自定义输入函数（input_fn）将预处理和pipeline数据的逻辑封装到模型中。</p>
<h3 id="1-1-解析input-fn"><a href="#1-1-解析input-fn" class="headerlink" title="1.1 解析input_fn"></a>1.1 解析input_fn</h3><p>以下代码阐述了输入函数的基本框架：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input_fn</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Preprocess your data here...</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># ...then return 1) a mapping of feature columns to Tensors with</span></span><br><span class="line">    <span class="comment"># the corresponding feature data, and 2) a Tensor containing labels</span></span><br><span class="line">    <span class="keyword">return</span> feature_cols, labels</span><br></pre></td></tr></table></figure>
<p>输入函数部分包含用于预处理输入数据的特定逻辑，例如擦除不良示例或feature scaling。</p>
<p>输入函数必须返回以下两个值，其中包含要馈送到模型中的最终特征和标签数据（如上述代码框架所示）：</p>
<blockquote>
<p>feature_cols</p>
<ul>
<li>将特征列名称映射到相应特征数据的Tensors（或SparseTensors）的keys/values对的字典。</li>
</ul>
<p>labels</p>
<ul>
<li>包含您的标签（目标）值的张量：您的模型预测的值。</li>
</ul>
</blockquote>
<h3 id="1-2-将特征数据转换为张量"><a href="#1-2-将特征数据转换为张量" class="headerlink" title="1.2 将特征数据转换为张量"></a>1.2 将特征数据转换为张量</h3><p>如果特征/标签数据存储在pandas 数据架构或numpy数组，你需要将其转换为Tensor在它从input_fn返回之前。</p>
<p>对于连续数据，您可以使用tf.constant创建和填充Tensor：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">feature_column_data = [<span class="number">1</span>, <span class="number">2.4</span>, <span class="number">0</span>, <span class="number">9.9</span>, <span class="number">3</span>, <span class="number">120</span>]</span><br><span class="line">feature_tensor = tf.constant(feature_column_data)</span><br></pre></td></tr></table></figure>
<h2 id="2-详见代码"><a href="#2-详见代码" class="headerlink" title="2. 详见代码"></a>2. 详见代码</h2><ul>
<li><a href="https://github.com/blair101/TensorFlowExamples/blob/master/tf.contrib.learn/tf.contrib.learn构建输入函数.ipynb" target="_blank" rel="external">Blair’s Github tf.contrib.learn构建输入函数</a></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"> </span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义数据集中的列名COLUMNS。 为了区分标签的 feature，还要定义 FEATURES 和 LABEL。</span></span><br><span class="line"></span><br><span class="line">COLUMNS = [<span class="string">"crim"</span>, <span class="string">"zn"</span>, <span class="string">"indus"</span>, <span class="string">"nox"</span>, <span class="string">"rm"</span>, <span class="string">"age"</span>,</span><br><span class="line">           <span class="string">"dis"</span>, <span class="string">"tax"</span>, <span class="string">"ptratio"</span>, <span class="string">"medv"</span>]</span><br><span class="line">FEATURES = [<span class="string">"crim"</span>, <span class="string">"zn"</span>, <span class="string">"indus"</span>, <span class="string">"nox"</span>, <span class="string">"rm"</span>,</span><br><span class="line">            <span class="string">"age"</span>, <span class="string">"dis"</span>, <span class="string">"tax"</span>, <span class="string">"ptratio"</span>]</span><br><span class="line">LABEL = <span class="string">"medv"</span></span><br><span class="line"> </span><br><span class="line">training_set = pd.read_csv(<span class="string">"boston_train.csv"</span>, skipinitialspace=<span class="keyword">True</span>,</span><br><span class="line">                           skiprows=<span class="number">1</span>, names=COLUMNS)</span><br><span class="line">test_set = pd.read_csv(<span class="string">"boston_test.csv"</span>, skipinitialspace=<span class="keyword">True</span>,</span><br><span class="line">                       skiprows=<span class="number">1</span>, names=COLUMNS)</span><br><span class="line">prediction_set = pd.read_csv(<span class="string">"boston_predict.csv"</span>, skipinitialspace=<span class="keyword">True</span>,</span><br><span class="line">                             skiprows=<span class="number">1</span>, names=COLUMNS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(training_set.head(2))</span></span><br><span class="line"><span class="comment"># print(test_set.head(2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定义FeatureColumns并创建回归</span></span><br><span class="line">feature_cols = [tf.contrib.layers.real_valued_column(k) <span class="keyword">for</span> k <span class="keyword">in</span> FEATURES]</span><br><span class="line">feature_cols</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 实例化一个DNNRegressor神经网络回归模型</span></span><br><span class="line">regressor = tf.contrib.learn.DNNRegressor(feature_columns=feature_cols,</span><br><span class="line">                                          hidden_units=[<span class="number">10</span>, <span class="number">10</span>],</span><br><span class="line">                                          model_dir=<span class="string">"/tmp/boston_model"</span>)</span><br><span class="line">                                          </span><br><span class="line"><span class="comment"># 4. 构建input_fn                                          </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(data_set)</span>:</span></span><br><span class="line">    feature_cols = &#123;k: tf.constant(data_set[k].values)</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> FEATURES&#125;</span><br><span class="line">    labels = tf.constant(data_set[LABEL].values)</span><br><span class="line">    <span class="keyword">return</span> feature_cols, labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 训练回归器</span></span><br><span class="line">regressor.fit(input_fn=<span class="keyword">lambda</span>: input_fn(training_set), steps=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 评估模型</span></span><br><span class="line">ev = regressor.evaluate(input_fn=<span class="keyword">lambda</span>: input_fn(test_set), steps=<span class="number">1</span>)</span><br><span class="line">loss_score = ev[<span class="string">"loss"</span>]</span><br><span class="line">print(<span class="string">"Loss: &#123;0:f&#125;"</span>.format(loss_score))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 预测</span></span><br><span class="line">y = regressor.predict_scores(input_fn=<span class="keyword">lambda</span>: input_fn(prediction_set), batch_size=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># .predict() returns an iterator; convert to a list and print predictions</span></span><br><span class="line">predictions = list(itertools.islice(y, <span class="number">6</span>))</span><br><span class="line">print(<span class="string">"Predictions: &#123;&#125;"</span>.format(str(predictions)))</span><br></pre></td></tr></table></figure>
<h2 id="3-其他资源"><a href="#3-其他资源" class="headerlink" title="3. 其他资源"></a>3. 其他资源</h2><p>为神经网络回归器创建一个input_fn。要了解有关将input_fn用于其他类型模型的更多信息，请查看以下资源：</p>
<ul>
<li><a href="https://www.tensorflow.org/tutorials/linear" target="_blank" rel="external">TensorFlow的大规模线性模型</a>：介绍TensorFlow中线性模型，提供转换输入数据的特征列和技术的高级概述。</li>
<li><a href="https://www.tensorflow.org/tutorials/wide" target="_blank" rel="external">TensorFlow线性模型教程</a>：FeatureColumns和 input_fn，线性分类模型，据人口财产普查数据预测收入范围。</li>
<li><a href="https://www.tensorflow.org/tutorials/wide_and_deep" target="_blank" rel="external">TensorFlow Wide＆Deep Learning教程</a>：基于<a href="https://www.tensorflow.org/tutorials/wide" target="_blank" rel="external">线性模型教程</a>，本教程涵盖 FeatureColumn 和 input_fn，创建了一个“宽而深”的模型，它融合了一个线性模型和使用 DNNLinearCombinedClassifier 的神经网络 。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029487" target="_blank" rel="external">使用tf.contrib.learn构建输入函数</a></li>
<li><a href="http://funhacks.net/2017/02/13/itertools/" target="_blank" rel="external">高效的 itertools 模块</a></li>
<li><a href="http://www.cnblogs.com/datablog/p/6127000.html" target="_blank" rel="external">pandas.read_csv参数整理</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow - tf.contrib.learn 快速入门]]></title>
      <url>http://iequa.com/2018/10/31/tensorflow/tf-5.1-contrib-learn-Quickstart/</url>
      <content type="html"><![CDATA[<p>TensorFlow 的高级机器学习API（tf.contrib.learn）可以轻松配置，训练和评估各种机器学习模型。</p>
<p>使用tf.contrib.learn构建 神经网络 分类器并在<strong>Iris</strong>数据集上进行训练. 基于花萼/花瓣几何形状来预测花种。</p>
<a id="more"></a> 
<p>依照以下五个步骤编写代码：</p>
<ol>
<li>将包含Iris训练/测试数据的CSV加载到TensorFlow数据集中</li>
<li>构建神经网络分类器</li>
<li>使用训练数据拟合模型</li>
<li>评估模型的准确性</li>
<li>分类新样本</li>
</ol>
<h2 id="1-完整的神经网络源代码"><a href="#1-完整的神经网络源代码" class="headerlink" title="1. 完整的神经网络源代码"></a>1. 完整的神经网络源代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data sets</span></span><br><span class="line">IRIS_TRAINING = <span class="string">"iris_training.csv"</span></span><br><span class="line">IRIS_TRAINING_URL = <span class="string">"http://download.tensorflow.org/data/iris_training.csv"</span></span><br><span class="line"></span><br><span class="line">IRIS_TEST = <span class="string">"iris_test.csv"</span></span><br><span class="line">IRIS_TEST_URL = <span class="string">"http://download.tensorflow.org/data/iris_test.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># First download iris_training.csv and iris_test.csv</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load datasets.</span></span><br><span class="line">    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">        filename=IRIS_TRAINING,</span><br><span class="line">        target_dtype=np.int,</span><br><span class="line">        features_dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">        filename=IRIS_TEST,</span><br><span class="line">        target_dtype=np.int,</span><br><span class="line">        features_dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify that all features have real-value data</span></span><br><span class="line">    feature_columns = [tf.contrib.layers.real_valued_column(<span class="string">""</span>, dimension=<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build 3 layer DNN with 10, 20, 10 units respectively.</span></span><br><span class="line">    classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,</span><br><span class="line">                                                hidden_units=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>],</span><br><span class="line">                                                n_classes=<span class="number">3</span>,</span><br><span class="line">                                                model_dir=<span class="string">"/tmp/iris_model"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define the training inputs</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_train_inputs</span><span class="params">()</span>:</span></span><br><span class="line">        x = tf.constant(training_set.data)</span><br><span class="line">        y = tf.constant(training_set.target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fit model.</span></span><br><span class="line">    classifier.fit(input_fn=get_train_inputs, steps=<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define the test inputs</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_test_inputs</span><span class="params">()</span>:</span></span><br><span class="line">        x = tf.constant(test_set.data)</span><br><span class="line">        y = tf.constant(test_set.target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">    <span class="string">'''Evaluate accuracy'''</span> </span><br><span class="line">    <span class="comment"># &#123;'loss': 0.098150678, 'accuracy': 0.96666664, 'global_step': 4000&#125;</span></span><br><span class="line">    accuracy_score = classifier.evaluate(input_fn=get_test_inputs,</span><br><span class="line">                                         steps=<span class="number">1</span>)[<span class="string">"accuracy"</span>]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\nTest Accuracy: &#123;0:f&#125;\n"</span>.format(accuracy_score))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Classify two new flower samples.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_samples</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.array(</span><br><span class="line">            [[<span class="number">6.4</span>, <span class="number">3.2</span>, <span class="number">4.5</span>, <span class="number">1.5</span>],</span><br><span class="line">             [<span class="number">5.8</span>, <span class="number">3.1</span>, <span class="number">5.0</span>, <span class="number">1.7</span>]], dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    predictions = list(classifier.predict(input_fn=new_samples))</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"New Samples, Class Predictions:    &#123;&#125;\n"</span></span><br><span class="line">            .format(predictions))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="2-将Iris-CSV数据加载到TF中"><a href="#2-将Iris-CSV数据加载到TF中" class="headerlink" title="2. 将Iris CSV数据加载到TF中"></a>2. 将Iris CSV数据加载到TF中</h2><p>该<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set" target="_blank" rel="external">Iris data set</a>包含150行数据，包括来自每三个相关Iris种类的50个样品： ris setosa, Iris virginica, 以及 Iris versicolor。</p>
<p><img src="/images/tensorflow/tf-5.1-Iris-data_1.jpg" width="700"></p>
<blockquote>
<p>从左到右， Iris setosa（ Radomil，CC BY-SA 3.0）， Iris versicolor（Dlanglois，CC BY-SA 3.0）和Iris virginica（Frank Mayfield，CC BY-SA 2.0））。</p>
<p>每行包含每个花样品的以下数据： 花萼长度，花萼宽度， 花瓣长度，花瓣宽度和花种。花种以整数表示，0表示Iris setosa，1表示Iris versicolor，2表示Iris virginica。</p>
</blockquote>
<p><img src="/images/tensorflow/tf-5.1-Iris-data_2.jpg" width="400"></p>
<blockquote>
<p>Iris数据已被随机分为两个独立的CSV：</p>
<ul>
<li>含120个样本的训练集（iris_training.csv）</li>
<li>含30个样本的测试集（iris_test.csv）。</li>
</ul>
</blockquote>
<p>接下来，使用learn.datasets.base中的<a href="https://www.github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/contrib/learn/python/learn/datasets/base.py" target="_blank" rel="external">load_csv_with_header()</a> 方法将训练集和测试集加载到datasets中。该load_csv_with_header()方法需要三个必不可少的参数：</p>
<ul>
<li>filename，带有文件路径的CSV文件。</li>
<li>target_dtype，数据集的形式为numpy 数据类型。</li>
<li>features_dtype，数据特征集的形式为numpy 数据类型。</li>
</ul>
<p>在这里，目标（你正在训练预测模型的值）是花种，它是0-2的整数，所以适当的numpy数据类型是np.int：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load datasets.</span></span><br><span class="line">training_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">    filename=IRIS_TRAINING,</span><br><span class="line">    target_dtype=np.int,</span><br><span class="line">    features_dtype=np.float32)</span><br><span class="line">    </span><br><span class="line">test_set = tf.contrib.learn.datasets.base.load_csv_with_header(</span><br><span class="line">    filename=IRIS_TEST,</span><br><span class="line">    target_dtype=np.int,</span><br><span class="line">    features_dtype=np.float32)</span><br></pre></td></tr></table></figure>
<p>test_set 数据形式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Dataset(</span><br><span class="line">       data=array([</span><br><span class="line">          [ <span class="number">5.9000001</span> ,  <span class="number">3.</span> ,  <span class="number">4.19999981</span>,  <span class="number">1.5</span>],</span><br><span class="line">          [ <span class="number">6.9000001</span> ,  <span class="number">3.0999999</span> ,  <span class="number">5.4000001</span> ,  <span class="number">2.0999999</span> ],</span><br><span class="line">          ......</span><br><span class="line">          [ <span class="number">6.69999981</span>,  <span class="number">3.29999995</span>,  <span class="number">5.69999981</span>,  <span class="number">2.5</span>       ],</span><br><span class="line">          [ <span class="number">6.4000001</span> ,  <span class="number">2.9000001</span> ,  <span class="number">4.30000019</span>,  <span class="number">1.29999995</span>]</span><br><span class="line">       ], dtype=float32), </span><br><span class="line">   		</span><br><span class="line">       target=array(</span><br><span class="line">          [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>test_set.data 数据形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[ 5.9000001   3.          4.19999981  1.5       ]</span><br><span class="line"> [ 6.9000001   3.0999999   5.4000001   2.0999999 ]</span><br><span class="line"> ......</span><br><span class="line"> [ 6.4000001   2.9000001   4.30000019  1.29999995]]</span><br></pre></td></tr></table></figure>
<p>test_set.target 数据形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1 2 0 1 1 1 0 2 1 2 2 0 2 1 1 0 1 0 0 2 0 1 2 1 1 1 0 1 2 1]</span><br></pre></td></tr></table></figure>
<p>tf.contrib.learn中的datasets被命名为 tuples ; 您可以通过data和target 属性访问特征数据和目标值。这里的training_set.data，training_set.target包含训练集的特征数据和目标值，test_set.data ，test_set.target包含测试集的特征数据和目标值。</p>
<p>在 “在Iris训练数据中拟合DNNC分类器”， 您将使用training_set.data和 training_set.target训练您的模型，在 “评估模型精度” 时，您将使用test_set.data和 test_set.target。</p>
<h2 id="3-构建深层神经网络分类器"><a href="#3-构建深层神经网络分类器" class="headerlink" title="3. 构建深层神经网络分类器"></a>3. 构建深层神经网络分类器</h2><p>tf.contrib.learn提供了各种预定义的模型，称为 <a href="https://www.tensorflow.org/api_guides/python/contrib.learn#estimators" target="_blank" rel="external">Estimators</a>，您可以使用“out of the box”方式对数据进行训练和评估操作。</p>
<p>在这里，您将配置深层神经网络分类器模型以拟合Iris数据。利用tf.contrib.learn，您可以使用几行代码实例化<a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/DNNClassifier" target="_blank" rel="external">tf.contrib.learn.DNNClassifier</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Specify that all features have real-value data</span></span><br><span class="line">feature_columns = [tf.contrib.layers.real_valued_column(<span class="string">""</span>, dimension=<span class="number">4</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Build 3 layer DNN with 10, 20, 10 units respectively.</span></span><br><span class="line">classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,</span><br><span class="line">                                            hidden_units=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>],</span><br><span class="line">                                            n_classes=<span class="number">3</span>,</span><br><span class="line">                                            model_dir=<span class="string">"/tmp/iris_model"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3-1-feature-columns-形式"><a href="#3-1-feature-columns-形式" class="headerlink" title="3.1 feature_columns 形式"></a>3.1 feature_columns 形式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[_RealValuedColumn(column_name=<span class="string">''</span>, dimension=4, default_value=None, dtype=tf.float32, normalizer=None)]</span><br></pre></td></tr></table></figure>
<p>上面的代码首先定义了模型的特征列，它们指定数据集中的特征数据类型。所有的特征数据是连续的，所以tf.contrib.layers.real_valued_column使用相应的函数来构造特征列。数据集中有四个特征（花萼宽度，花萼高度，花瓣宽度和花瓣高度），因此dimension 必须设置为4保存所有数据。</p>
<h3 id="3-2-classifier-形式"><a href="#3-2-classifier-形式" class="headerlink" title="3.2 classifier 形式"></a>3.2 classifier 形式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DNNClassifier(params=&#123;</span><br><span class="line"><span class="string">'head'</span>: &lt;tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead object at 0x1089c0c18&gt;, </span><br><span class="line"><span class="string">'hidden_units'</span>: [10, 20, 10], </span><br><span class="line"><span class="string">'feature_columns'</span>: (_RealValuedColumn(column_name=<span class="string">''</span>, dimension=4, default_value=None, dtype=tf.float32, normalizer=None),), </span><br><span class="line"><span class="string">'optimizer'</span>: None, </span><br><span class="line"><span class="string">'activation_fn'</span>: &lt;<span class="keyword">function</span> relu at 0x11590ad08&gt;, </span><br><span class="line"><span class="string">'dropout'</span>: None, </span><br><span class="line"><span class="string">'gradient_clip_norm'</span>: None, </span><br><span class="line"><span class="string">'embedding_lr_multipliers'</span>: None, </span><br><span class="line"><span class="string">'input_layer_min_slice_size'</span>: None&#125;)</span><br></pre></td></tr></table></figure>
<p>然后，代码使用以下参数创建一个DNNClassifier模型：</p>
<ul>
<li>feature_columns=feature_columns。上面定义的特征列集合。</li>
<li>hidden_units=[10, 20, 10]。三个隐含层，分别含有10,20和10个神经元。</li>
<li>n_classes=3。三个目标类别，代表三种Iris物种。</li>
<li>model_dir=/tmp/iris_model。TensorFlow将在模型训练期间保存检查点数据的目录。有关使用TensorFlow进行日志记录和监视的更多信息，请参阅Logging and Monitoring Basics with tf.contrib.learn.。</li>
</ul>
<h2 id="4-训练的输入流"><a href="#4-训练的输入流" class="headerlink" title="4. 训练的输入流"></a>4. 训练的输入流</h2><p>tf.contrib.learnAPI使用输入函数，创建为模型生成数据的TensorFlow操作。本例中，数据足够小，可以TensorFlow constants 存储。以下代码生成最简单的输入：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define the test inputs</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_inputs</span><span class="params">()</span>:</span></span><br><span class="line">  x = tf.constant(training_set.data)</span><br><span class="line">  y = tf.constant(training_set.target)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> x, y</span><br></pre></td></tr></table></figure>
<h2 id="5-在Iris训练数据上拟合DNN分类器"><a href="#5-在Iris训练数据上拟合DNN分类器" class="headerlink" title="5. 在Iris训练数据上拟合DNN分类器"></a>5. 在Iris训练数据上拟合DNN分类器</h2><p>现在您已经配置了DNN classifier模型，您可以使用该<a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/BaseEstimator#fit" target="_blank" rel="external">fit</a>方法将其拟合Iris训练数据。将get_train_inputs传递给input_fn，指定训练的步骤（这里取2000）：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fit model.</span></span><br><span class="line">classifier.fit(input_fn=get_train_inputs, steps=<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>模型的状态保留在classifier，这意味着如果你喜欢，你可以分布训练。例如，以上代码相当于：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">classifier.fit(x=training_set.data, y=training_set.target, steps=<span class="number">1000</span>)</span><br><span class="line">classifier.fit(x=training_set.data, y=training_set.target, steps=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>但是，如果您希望在训练时跟踪模型，则可能需要使用TensorFlow <a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/monitors" target="_blank" rel="external">monitor</a> 来执行日志记录操作。有关此主题的更多信息，请参阅<br>“Logging and Monitoring Basics with tf.contrib.learn”教程 。</p>
<h2 id="6-评估模型精度"><a href="#6-评估模型精度" class="headerlink" title="6. 评估模型精度"></a>6. 评估模型精度</h2><p>您已经在Iris训练数据上拟合DNNClassifier模型; 现在，您可以使用该<a href="https://www.tensorflow.org/api_docs/python/tf/contrib/learn/BaseEstimator#evaluate" target="_blank" rel="external">evaluate</a>方法检查其对Iris测试数据的准确性 。正如fit， evaluate需要一个构建其输入渠道的输入函数。evaluate 返回一个评估结果dict。下面的代码通过Iris测试数据- test_set.data和test_set.target进行evaluate并打印结果的精度：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define the test inputs</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_inputs</span><span class="params">()</span>:</span></span><br><span class="line">  x = tf.constant(test_set.data)</span><br><span class="line">  y = tf.constant(test_set.target)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> x, y</span><br><span class="line"> </span><br><span class="line"><span class="string">'''Evaluate accuracy.'''</span> </span><br><span class="line"><span class="comment"># &#123;'loss': 0.098150678, 'accuracy': 0.96666664, 'global_step': 4000&#125;</span></span><br><span class="line">accuracy_score = classifier.evaluate(input_fn=get_test_inputs,</span><br><span class="line">                                     steps=<span class="number">1</span>)[<span class="string">"accuracy"</span>]</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"\nTest Accuracy: &#123;0:f&#125;\n"</span>.format(accuracy_score))</span><br></pre></td></tr></table></figure>
<p>注意：这里的steps参数对evaluate很重要。 evaluate直到它到达输入的末尾才停止运行。</p>
<h2 id="7-分类新样本"><a href="#7-分类新样本" class="headerlink" title="7. 分类新样本"></a>7. 分类新样本</h2><p>使用estimator的predict()方法对新样本进行分类。例如，说你有这两个新的花朵样例：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Classify two new flower samples.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_samples</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> np.array(</span><br><span class="line">    [[<span class="number">6.4</span>, <span class="number">3.2</span>, <span class="number">4.5</span>, <span class="number">1.5</span>],</span><br><span class="line">     [<span class="number">5.8</span>, <span class="number">3.1</span>, <span class="number">5.0</span>, <span class="number">1.7</span>]], dtype=np.float32)</span><br><span class="line"> </span><br><span class="line">predictions = list(classifier.predict(input_fn=new_samples))</span><br><span class="line"> </span><br><span class="line">print(</span><br><span class="line">    <span class="string">"New Samples, Class Predictions:    &#123;&#125;\n"</span></span><br><span class="line">    .format(predictions))</span><br></pre></td></tr></table></figure>
<p>您可以使用该predict()方法预测其物种。predict返回一个生成器，可以很容易地转换成一个列表。以下代码取得并打印分类的预测结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New Samples, Class Predictions:    [1 2]</span><br></pre></td></tr></table></figure>
<h2 id="8-其他资源"><a href="#8-其他资源" class="headerlink" title="8. 其他资源"></a>8. 其他资源</h2><ul>
<li>其他资源有关tf.contrib.learn的更多参考资料，请参阅官方 <a href="https://www.tensorflow.org/api_guides/python/contrib.learn" target="_blank" rel="external">API文档</a>。</li>
<li>有关使用tf.contrib.learn创建线性模型的更多信息，请参阅 <a href="https://www.tensorflow.org/tutorials/linear" target="_blank" rel="external">Large-scale Linear Models with TensorFlow.</a></li>
<li>要使用tf.contrib.learn API构建自己的Estimator，请查看在 <a href="https://www.tensorflow.org/extend/estimators" target="_blank" rel="external">tf.contrib.learn中创建估计器</a>。</li>
<li>要在浏览器中实验神经网络建模和可视化，请查看<a href="http://playground.tensorflow.org/" target="_blank" rel="external">Deep Playground</a>。</li>
<li>有关神经网络的更多高级教程，请参阅 <a href="https://www.tensorflow.org/tutorials/images/deep_cnn" target="_blank" rel="external">卷积神经网络</a>和<a href="https://www.tensorflow.org/tutorials/sequences/recurrent" target="_blank" rel="external">循环神经网络</a>。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://mli.github.io/gpu/2016/01/17/build-gpu-clusters/" target="_blank" rel="external">GPU集群折腾手记——2015</a></li>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029485" target="_blank" rel="external">TensorFlow R1.2 中文文档</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 快速学习 & 文档]]></title>
      <url>http://iequa.com/2018/10/23/tensorflow/tf-doc/</url>
      <content type="html"><![CDATA[<p>介绍 Tensorflow 的学习流程 与 <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-bm7y28si.html" target="_blank" rel="external">W3C shchool Tensorflow</a> 的中文文档。</p>
<a id="more"></a>
<h2 id="1-结构目录"><a href="#1-结构目录" class="headerlink" title="1. 结构目录"></a>1. 结构目录</h2><h3 id="1-1-Tensorflow-入门介绍"><a href="#1-1-Tensorflow-入门介绍" class="headerlink" title="1.1 Tensorflow 入门介绍"></a>1.1 Tensorflow 入门介绍</h3><h3 id="1-2-Tensorflow-使用指南"><a href="#1-2-Tensorflow-使用指南" class="headerlink" title="1.2 Tensorflow 使用指南"></a>1.2 Tensorflow 使用指南</h3><p>TensorFlow <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-85v22c69.html" target="_blank" rel="external">张量变换</a></p>
<p>TensorFlow <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-y6p82c6e.html" target="_blank" rel="external">Training函数</a> ： tf.train 提供了一组帮助训练模型的类和函数。</p>
<h3 id="1-3-Tensorflow-函数介绍"><a href="#1-3-Tensorflow-函数介绍" class="headerlink" title="1.3 Tensorflow 函数介绍"></a>1.3 Tensorflow 函数介绍</h3><p>函数模块 : tf</p>
<p>TensorFlow <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-58lx2coj.html" target="_blank" rel="external">app模块 : 定义通用入口点脚本</a></p>
<p>TensorFlow contrib模块</p>
<p>TensorFlow 的 errors模块</p>
<p>estimator 模块 <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-xp3r2dl5.html" target="_blank" rel="external">估算器（Estimator）</a> ： 用于处理模型的高级工具。</p>
<blockquote>
<ul>
<li>TensorFlow的estimator类函数：<a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-hd9a2oyb.html" target="_blank" rel="external">tf.estimator.Estimator</a></li>
</ul>
</blockquote>
<p>TensorFlow 的 image模块</p>
<p>TensorFlow 使用之 <strong>tf.initializers</strong></p>
<p>TensorFlow 使用之 tf.keras</p>
<p>TensorFlow <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-59ay2s9i.html" target="_blank" rel="external">使用之 tf.layers</a></p>
<p>TensorFlow 使用之 <strong>tf.losses</strong></p>
<p>TensorFlow <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-ke8y2yhg.html" target="_blank" rel="external">使用之 tf.metrics</a></p>
<h3 id="1-4-TensorFlow-功能函数"><a href="#1-4-TensorFlow-功能函数" class="headerlink" title="1.4 TensorFlow 功能函数"></a>1.4 TensorFlow 功能函数</h3><p><strong>tf.get_variable</strong> 函数</p>
<p>TensorFlow范数：<code>tf.norm</code>函数</p>
<p>TensorFlow函数：<code>tf.ones</code></p>
<p>tf.one_hot函数：返回one-hot张量</p>
<p>TensorFlow随机值：tf.random_normal函数</p>
<p>tf.random_normal_initializer：TensorFlow初始化器</p>
<p>TensorFlow函数：tf.ones_initializer</p>
<p>TensorFlow占位符：<code>tf.placeholder</code></p>
<p>TensorFlow函数： <a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-hckq2htb.html" target="_blank" rel="external">tf.reduce_mean</a></p>
<p>TensorFlow函数：<code>tf.reduce_sum</code></p>
<blockquote>
<p>axis = 0， 为纵向<br>axis = 1， 为横向</p>
</blockquote>
<h3 id="1-5-TensorFlow-手写数字分类问题"><a href="#1-5-TensorFlow-手写数字分类问题" class="headerlink" title="1.5 TensorFlow 手写数字分类问题"></a>1.5 TensorFlow 手写数字分类问题</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-bm7y28si.html" target="_blank" rel="external">TensorFlow 入门基础 W3C school</a></li>
<li><a href="https://blog.csdn.net/jerr__y/article/category/6747409" target="_blank" rel="external">大学之道，在明明德 - 我的Tensorflow学习之路</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 踩坑记之 tf.metrics]]></title>
      <url>http://iequa.com/2018/10/23/tensorflow/tf-metrics_learn/</url>
      <content type="html"><![CDATA[<p>总结一下 tf.metrics 遇到的一些坑。</p>
<a id="more"></a>
<p><strong>精确率的计算公式</strong></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/qq_37747262/article/details/82223155" target="_blank" rel="external">Tensorflow踩坑记之tf.metrics</a></li>
<li><a href="https://github.com/blair101/tensorflow_metrics_learn/blob/master/tensorflow_metrics_learn.ipynb" target="_blank" rel="external">TensorFlow Github tf.metrics 实践</a></li>
<li><a href="http://ronny.rest/blog/post_2017_09_11_tf_metrics/" target="_blank" rel="external">Ronny Restrepo - tf.metrics.accuracy()讲解滴很清楚</a></li>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029489" target="_blank" rel="external">ApacheCN 开源组织 tf.contrib.learn基础的记录和监控教程</a></li>
<li><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10029377" target="_blank" rel="external">ApacheCN 开源组织 TensorFlow入门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow tf.app.run()与命令行参数解析]]></title>
      <url>http://iequa.com/2018/10/23/tensorflow/tf-app_run_&_tf_flags/</url>
      <content type="html"><![CDATA[<p>tf.app.run() 与 命令行参数解析 tf.flags</p>
<a id="more"></a>
<p>首先给出一段常见的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure>
<p>找到 Tensorflow 中关于上述 函数<code>run()</code> 的源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(main=None, argv=None)</span>:</span></span><br><span class="line">  <span class="string">"""Runs the program with an optional 'main' function and 'argv' list."""</span></span><br><span class="line">  f = flags.FLAGS</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Extract the args from the optional `argv` list.</span></span><br><span class="line">  args = argv[<span class="number">1</span>:] <span class="keyword">if</span> argv <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Parse the known flags from that list, or from the command</span></span><br><span class="line">  <span class="comment"># line otherwise.</span></span><br><span class="line">  <span class="comment"># pylint: disable=protected-access</span></span><br><span class="line">  flags_passthrough = f._parse_flags(args=args)</span><br><span class="line">  <span class="comment"># pylint: enable=protected-access</span></span><br><span class="line"></span><br><span class="line">  main = main <span class="keyword">or</span> _sys.modules[<span class="string">'__main__'</span>].main</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Call the main function, passing through any arguments</span></span><br><span class="line">  <span class="comment"># to the final program.</span></span><br><span class="line">  _sys.exit(main(_sys.argv[:<span class="number">1</span>] + flags_passthrough))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_allowed_symbols = [</span><br><span class="line">    <span class="string">'run'</span>,</span><br><span class="line">    <span class="comment"># Allowed submodule.</span></span><br><span class="line">    <span class="string">'flags'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">remove_undocumented(__name__, _allowed_symbols)</span><br></pre></td></tr></table></figure>
<p>可以看到源码中的过程是首先加载 <code>flags</code> 的参数项，然后执行 <code>main</code> 函数。参数是使用<code>tf.app.flags.FLAGS</code> 定义的。</p>
<h2 id="tf-app-flags-FLAGS"><a href="#tf-app-flags-FLAGS" class="headerlink" title="tf.app.flags.FLAGS"></a>tf.app.flags.FLAGS</h2><p>关于 <code>tf.app.flags.FLAGS</code> 的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fila_name: temp.py</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'string'</span>, <span class="string">'train'</span>, <span class="string">'This is a string'</span>)</span><br><span class="line">tf.app.flags.DEFINE_float(<span class="string">'learning_rate'</span>, <span class="number">0.001</span>, <span class="string">'This is the rate in training'</span>)</span><br><span class="line">tf.app.flags.DEFINE_boolean(<span class="string">'flag'</span>, <span class="keyword">True</span>, <span class="string">'This is a flag'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'string: '</span>, FLAGS.string)</span><br><span class="line">print(<span class="string">'learning_rate: '</span>, FLAGS.learning_rate)</span><br><span class="line">print(<span class="string">'flag: '</span>, FLAGS.flag)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="string">'string: '</span>, <span class="string">'train'</span>)</span><br><span class="line">(<span class="string">'learning_rate: '</span>, 0.001)</span><br><span class="line">(<span class="string">'flag: '</span>, True)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/TwT520Ly/article/details/79759448" target="_blank" rel="external">tf.app.run()与命令行参数解析</a></li>
<li><a href="https://blog.csdn.net/spring_willow/article/details/80111993" target="_blank" rel="external">TensorFlow中的小知识：tf.flags.DEFINE_xxx()</a></li>
<li><a href="https://www.jianshu.com/p/7ccfe8cf4aa1" target="_blank" rel="external">Tensorflow 1.0：老司机立下的Flag</a></li>
<li><a href="https://blog.csdn.net/yanqianglifei/article/details/83020992" target="_blank" rel="external">Tensorflow教程(十四) 命令行参数tf.flags的使用</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从 Encoder 到 Decoder 实现 Seq2Seq 模型]]></title>
      <url>http://iequa.com/2018/10/15/tensorflow/tf-seq2seq/</url>
      <content type="html"><![CDATA[<p>简单的 Seq2Seq 实现，我们将使用 TensorFlow 来实现个基础版的 Seq2Seq，主要帮助理解 Seq2Seq 中的基础架构。</p>
<a id="more"></a>
<p><img src="/images/tensorflow/tf-nlp-seq2seq.jpg" width="800"></p>
<p>自己做了一个示意图，希望帮助初学者更好地理解. </p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://coolshell.cn/articles/17583.html" target="_blank" rel="external">技术人员的发展之路</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27608348" target="_blank" rel="external">从 Encoder 到 Decoder 实现 Seq2Seq 模型</a></li>
<li><a href="https://github.com/NELSONZHAO/zhihu/tree/master/basic_seq2seq?1521452873816" target="_blank" rel="external">zhihu/basic_seq2seq/</a></li>
<li><a href="https://www.zhihu.com/question/41949741" target="_blank" rel="external">隔壁小王 LSTM 神经网络输入输出究竟是怎样的？</a></li>
<li><a href="https://colab.research.google.com" target="_blank" rel="external">colab.research.google</a></li>
<li><a href="https://zh.gluon.ai/" target="_blank" rel="external">zh.gluon.ai 动手学深度学习</a></li>
<li><a href="http://discuss.gluon.ai/" target="_blank" rel="external">discuss.gluon.ai 论坛</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单前馈网络实现 mnist 分类]]></title>
      <url>http://iequa.com/2018/10/04/tensorflow/tf-mnist-1-beginners/</url>
      <content type="html"><![CDATA[<p>我们来实现一个非常简单的两层 FC 全连接网络来完成 MNIST数据 的分类</p>
<a id="more"></a> 
<p>输入 [-1,28*28]， FC1 有 1024 个neurons， FC2 有 10 个neurons。</p>
<blockquote>
<p>这么简单的一个全连接网络，结果测试准确率达到了 0.98。还是非常棒的！！！</p>
<p>MNIST 数据集 包含了 60000 张图片来作为训练数据，10000 张图片作为测试数据。每张图片都代表了 0~9 中的一个数字。图片大小都为 28*28，处理后的每张图片是一个长度为 784 的一维数组，这个数组中的元素对应图片像素矩阵提供给神经网络的输入层，像素矩阵中元素的取值范围 [0, 1]， 它代表了颜色的深浅。其中 0 表示白色背景(background)，1 表示黑色前景(foreground)。</p>
<p>为了方便使用随机梯度下降， input_data.read_data_sets 函数生成的类还提供了 mnist.train.next.batch 函数，它可以从所有训练数据中读取一小部分作为一个训练 batch。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">MNIST 数据下载地址和内容</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Extracting MNIST_data/train-images-idx3-ubyte.gz</td>
<td style="text-align:center">训练数据图片</td>
</tr>
<tr>
<td style="text-align:center">Extracting MNIST_data/train-labels-idx1-ubyte.gz</td>
<td style="text-align:center">训练数据答案</td>
</tr>
<tr>
<td style="text-align:center">Extracting MNIST_data/t10k-images-idx3-ubyte.gz</td>
<td style="text-align:center">测试数据图片</td>
</tr>
<tr>
<td style="text-align:center">Extracting MNIST_data/t10k-labels-idx1-ubyte.gz</td>
<td style="text-align:center">测试数据答案</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置按需使用 GPU</span></span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="keyword">True</span></span><br><span class="line">sess = tf.InteractiveSession(config=config)</span><br></pre></td></tr></table></figure>
<h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1. 导入数据"></a>1. 导入数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用tensorflow 导入数据</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># input_data.read_data_sets 自动将 MNIST 数据集划分为 train、validation、test 三个数据集</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train 集合有 55000 张图片</span></span><br><span class="line"><span class="comment"># validation 集合有 5000 张图片</span></span><br><span class="line"><span class="comment"># test 集合有 10000 张图片，图片来自 MNIST 提供的测试数据集</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'training data shape '</span>, mnist.train.images.shape)</span><br><span class="line">print(<span class="string">'training label shape '</span>, mnist.train.labels.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># training data shape  (55000, 784)</span></span><br><span class="line"><span class="comment"># training label shape  (55000, 10)</span></span><br></pre></td></tr></table></figure>
<h2 id="2-构建网络"><a href="#2-构建网络" class="headerlink" title="2. 构建网络"></a>2. 构建网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权值初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="comment"># 用正态分布来初始化权值</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="comment"># 本例中用relu激活函数，所以用一个很小的正偏置较好</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># input_layer</span></span><br><span class="line">X_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># FC1</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">784</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(X_, W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># FC2</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_pre = tf.nn.softmax(tf.matmul(h_fc1, W_fc2) + b_fc2)</span><br></pre></td></tr></table></figure>
<h2 id="3-训练和评估"><a href="#3-训练和评估" class="headerlink" title="3. 训练和评估"></a>3. 训练和评估</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.损失函数：cross_entropy</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_ * tf.log(y_pre))</span><br><span class="line"><span class="comment"># 2.优化函数：AdamOptimizer, 优化速度要比 GradientOptimizer 快很多</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.预测结果评估</span></span><br><span class="line"><span class="comment">#　预测值中最大值（１）即分类结果，是否等于原始标签中的（１）的位置。argmax()取最大值所在的下标</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_pre, <span class="number">1</span>), tf.arg_max(y_, <span class="number">1</span>))  </span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始运行</span></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="comment"># 这大概迭代了不到 10 个 epoch， 训练准确率已经达到了0.98</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5000</span>):</span><br><span class="line">    X_batch, y_batch = mnist.train.next_batch(batch_size=<span class="number">100</span>)</span><br><span class="line">    train_step.run(feed_dict=&#123;X_: X_batch, y_: y_batch&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        train_accuracy = accuracy.eval(feed_dict=&#123;X_: mnist.train.images, y_: mnist.train.labels&#125;)</span><br><span class="line">        print(<span class="string">"step %d, training acc %g"</span> % (i+<span class="number">1</span>, train_accuracy))</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = accuracy.eval(feed_dict=&#123;X_: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line">        print(<span class="string">"= "</span> * <span class="number">10</span>, <span class="string">"step %d, testing acc %g"</span> % (i+<span class="number">1</span>, test_accuracy))</span><br></pre></td></tr></table></figure>
<p><strong>Output:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">step 200, training acc 0.937364</span><br><span class="line">step 400, training acc 0.965818</span><br><span class="line">step 600, training acc 0.973364</span><br><span class="line">step 800, training acc 0.977709</span><br><span class="line">step 1000, training acc 0.981528</span><br><span class="line">= = = = = = = = = =  step 1000, testing acc 0.9688</span><br><span class="line">step 1200, training acc 0.988437</span><br><span class="line">step 1400, training acc 0.988728</span><br><span class="line">step 1600, training acc 0.987491</span><br><span class="line">step 1800, training acc 0.993873</span><br><span class="line">step 2000, training acc 0.992527</span><br><span class="line">= = = = = = = = = =  step 2000, testing acc 0.9789</span><br><span class="line">step 2200, training acc 0.995309</span><br><span class="line">step 2400, training acc 0.995455</span><br><span class="line">step 2600, training acc 0.9952</span><br><span class="line">step 2800, training acc 0.996073</span><br><span class="line">step 3000, training acc 0.9964</span><br><span class="line">= = = = = = = = = =  step 3000, testing acc 0.9778</span><br><span class="line">step 3200, training acc 0.996709</span><br><span class="line">step 3400, training acc 0.998109</span><br><span class="line">step 3600, training acc 0.997455</span><br><span class="line">step 3800, training acc 0.995055</span><br><span class="line">step 4000, training acc 0.997291</span><br><span class="line">= = = = = = = = = =  step 4000, testing acc 0.9808</span><br><span class="line">step 4200, training acc 0.997746</span><br><span class="line">step 4400, training acc 0.996073</span><br><span class="line">step 4600, training acc 0.998564</span><br><span class="line">step 4800, training acc 0.997946</span><br><span class="line">step 5000, training acc 0.998673</span><br><span class="line">= = = = = = = = = =  step 5000, testing acc 0.98</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/jerr__y/article/category/6747409" target="_blank" rel="external">大学之道，在明明德 永永夜 Tensorflow学习之路</a></li>
<li><a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-c1ov28so.html" target="_blank" rel="external">W3cschool MNIST数据集 來龍去脈講解的清清楚楚</a></li>
<li><a href="http://colah.github.io/posts/2015-09-Visual-Information/" target="_blank" rel="external">Visual-Information 交叉熵</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RNN 的语言模型 TensorFlow 实现]]></title>
      <url>http://iequa.com/2018/10/02/tensorflow/tf-nlp-9.2.3/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>

<p>上篇 <code>PTB</code> 数据集 batching 中我们介绍了如何对 <code>PTB</code> 数据集进行 连接、切割 成多个 batch，作为 NNLM 的输入。</p>
<p>本文将介绍如何采用 TensorFlow 实现 RNN-based NNLM。 </p>
<a id="more"></a>
<p><img src="/images/tensorflow/tf-nlp-9.2.3_1.jpg" width="700"></p>
<h2 id="1-Embedding-层"><a href="#1-Embedding-层" class="headerlink" title="1. Embedding 层"></a>1. Embedding 层</h2><p>将 word 编号 转化为 word embedding 两大作用 :</p>
<table>
<thead>
<tr>
<th style="text-align:center">No.</th>
<th style="text-align:center">function</th>
<th style="text-align:center">desc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1.</td>
<td style="text-align:center">降低输入的维度</td>
<td style="text-align:center">词向量的维度通常在 200 ~ 1000 之间, 大大减少 RNN 网络的参数数量 与 计算量</td>
</tr>
<tr>
<td style="text-align:center">2.</td>
<td style="text-align:center">增加语义信息</td>
<td style="text-align:center">简单的单词编号是不包含任何语义信息的.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>词向量维度: EMB_SIZE，词汇表大小: VOCAB_SIZE</p>
<p>所有单词的词向量可以放入一个大小为 <strong>(EMB_SIZE, VOCAB_SIZE)</strong> 的矩阵内</p>
<p>在读取词向量时，可以调用 <strong>tf.nn.embedding_lookup</strong> 方法。</p>
<p>用 tf.Variable 来表示词向量，这样就可以采用任意初始化的词向量，学习过程中也会优化词向量。</p>
</blockquote>
<p><img src="/images/tensorflow/tf-nlp-9.2.3_2.jpg" width="700"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义单词的词向量矩阵</span></span><br><span class="line">embedding = tf.get_variable(<span class="string">"embedding"</span>, [VOCAB_SIZE, EMB_SIZE])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据转化为词向量表示</span></span><br><span class="line">inputs = tf.nn.embedding_lookup(embedding, input_data)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中输入数据 input_data 的维度是 (batch_size * num_steps)</p>
<p>而输出的 input_embedding 的维度成为 (batch_size * num_steps * EMB_SIZE). </p>
<p>在本文中，我们输入数据维度是 ($20 \times 35$) ，EMB_SIZE = 300, 输入词向量维度时 ($20 \times 35 \times 300$) .</p>
</blockquote>
<h2 id="2-Softmax-层"><a href="#2-Softmax-层" class="headerlink" title="2. Softmax 层"></a>2. Softmax 层</h2><p>Softmax层 的作用是将 RNN 的输出 转化为一个单词表中每个单词的输出概率，为此需要两个步骤：</p>
<h3 id="2-1-第一步"><a href="#2-1-第一步" class="headerlink" title="2.1 第一步"></a>2.1 第一步</h3><p>使用一个线性映射将 RNN 的输出映射为一个维度与词汇表大小相同的向量，这一步的输出叫做 <strong>logits</strong>. 代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先定义映射用到的参数</span></span><br><span class="line"><span class="comment"># HIDDEN_SIZE 是 RNN 的隐藏状态维度，VOCAB_SIZE 是词汇表大小</span></span><br><span class="line">weight = tf.get_variable(<span class="string">"weight"</span>, [HIDDEN_ZIZE, VOCAB_SIZE])</span><br><span class="line">bias = tf.get_variable(<span class="string">"bias"</span>, [VOCAB_SIZE])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算线性映射</span></span><br><span class="line">logits = tf.matmul(output, weight) + bias</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 output 是 RNN 的输出，维度是 [batch_size * num_steps, <strong>HIDDEN_SIZE</strong>]</p>
<p>经过线性映射后，输出结果是 [batch_size * num_steps, <strong>VOCAB_SIZE</strong>].</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://www.zhihu.com/question/52250059/answer/146260654" target="_blank" rel="external">tf.nn.embedding_lookup函数原理？</a></li>
<li><a href="https://www.zhihu.com/question/48107602/answer/159801895" target="_blank" rel="external">求通俗讲解下tensorflow的embedding_lookup接口的意思？</a></li>
<li><a href="http://www.fit.vutbr.cz/~imikolov/rnnlm/" target="_blank" rel="external">Tomas Mikolov PTB 数据</a></li>
<li><a href="https://www.zhihu.com/question/60751553" target="_blank" rel="external">如何理解深度学习源码里经常出现的logits？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37886740" target="_blank" rel="external">基于循环神经网络的语言模型的介绍与TensorFlow实现(4)：TensorFlow实现RNN-based语言模型</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PTB 数据的 batching 方法]]></title>
      <url>http://iequa.com/2018/10/01/tensorflow/tf-nlp-9.2.2/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>

<p><code>PTB</code> 数据集 batching 介绍, 如何对 <code>PTB</code> 数据集进行 连接、切割 成多个 batch。</p>
<p>重点了解 <strong>batch_size</strong>、<strong>num_batch</strong>、<strong>num_step</strong> 这三个概念。</p>
<a id="more"></a>
<h2 id="batching"><a href="#batching" class="headerlink" title="batching"></a>batching</h2><p>先看下面这段，摘取自 <a href="https://www.zhihu.com/question/278485204/answer/402066718" target="_blank" rel="external">知乎 作者：dalida</a></p>
<p>画图很弱，直接就徒手画了。以朱自清的《背影》中的节选段落为例。字有点难看，请忽略～(￣▽￣～)~</p>
<p>这是单个字符级别的 RNN，换成词语也一样。</p>
<p>num_batch 其实就是 batch 的数量，这里只画了三个，可以一直接下去….这样一次完成 6个字符 (num_step=6) 的处理，而且能保证 batch 之间的连续性。但是行与行之间的连续性确实是丢失了。</p>
<p><img src="/images/tensorflow/tf-nlp-9.2.2_2.jpg" width="700"></p>
<p><strong>结论 :</strong></p>
<ul>
<li>batch_size = 3 </li>
<li>num_batch = 3</li>
<li>num_step = 6</li>
</ul>
<blockquote>
<p>batch_size 也是一次输入的句子数</p>
</blockquote>
<h2 id="朱自清《背影》"><a href="#朱自清《背影》" class="headerlink" title="朱自清《背影》"></a>朱自清《背影》</h2><p>我们过了江，进了车站。我买票，他忙着照看行李。行李太多了，得向脚夫行些小费，才可过去。他便又忙着和他们讲价钱。我那时真是聪明过分，总觉他说话不大漂亮，非自己插嘴不可。但他终于讲定了价钱；就送我上车。他给我拣定了靠车门的一张椅子；我将他给我做的紫毛大衣铺好坐位。他嘱我路上小心，夜里警醒些，不要受凉。又嘱托茶房好好照应我。我心里暗笑他的迂；他们只认得钱，托他们直是白托！而且我这样大年纪的人，难道还不能料理自己么？唉，我现在想想，那时真是太聪明了！</p>
<p>我说道，“爸爸，你走吧。”他望车外看了看，说，“我买几个橘子去。你就在此地，不要走动。”我看那边月台的栅栏外有几个卖东西的等着顾客。走到那边月台，须穿过铁道，须跳下去又爬上去。父亲是一个胖子，走过去自然要费事些。我本来要去的，他不肯，只好让他去。我看见他戴着黑布小帽，穿着黑布大马褂，深青布棉袍，蹒跚地走到铁道边，慢慢探身下去，尚不大难。可是他穿过铁道，要爬上那边月台，就不容易了。他用两手攀着上面，两脚再向上缩；他肥胖的身子向左微倾，显出努力的样子。这时我看见他的背影，我的泪很快地流下来了。我赶紧拭干了泪，怕他看见，也怕别人看见。我再向外看时，他已抱了朱红的橘子望回走了。过铁道时，他先将橘子散放在地上，自己慢慢爬下，再抱起橘子走。到这边时，我赶紧去搀他。他和我走到车上，将橘子一股脑儿放在我的皮大衣上。于是扑扑衣上的泥土，心里很轻松似的，过一会说，“我走了；到那边来信！”我望着他走出去。他走了几步，回过头看见我，说，“进去吧，里边没人。”等他的背影混入来来往往的人里，再找不着了，我便进来坐下，我的眼泪又来了。</p>
<p>近几年来，父亲和我都是东奔西走，家中光景是一日不如一日。他少年出外谋生，独力支持，做了许多大事。那知老境却如此颓唐！他触目伤怀，自然情不能自已。情郁于中，自然要发之于外；家庭琐屑便往往触他之怒。他待我渐渐不同往日。但最近两年的不见，他终于忘却我的不好，只是惦记着我，惦记着我的儿子。我北来后，他写了一信给我，信中说道，“我身体平安，惟膀子疼痛利害，举箸提笔，诸多不便，大约大去之期不远矣。”我读到此处，在晶莹的泪光中，又看见那肥胖的，青布棉袍，黑布马褂的背影。唉！我不知何时再能与他相见！</p>
<p><strong>再看这个图</strong>：</p>
<p><img src="/images/tensorflow/tf-nlp-9.2.2_1.jpg" width="700"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.zhihu.com/question/278485204/answer/402066718" target="_blank" rel="external">关于batching多句子切割batch疑问？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40809517" target="_blank" rel="external">[L2]使用LSTM实现语言模型-数据batching</a></li>
<li><a href="https://blog.csdn.net/jerr__y/article/details/61195257" target="_blank" rel="external">TensorFlow入门（五）多层 LSTM 通俗易懂版</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[numpy.random.normal 函数]]></title>
      <url>http://iequa.com/2018/09/11/python/py-numpy-9-numpy.random.normal/</url>
      <content type="html"><![CDATA[<p>numpy.random.normal 函数，有三个参数（<strong>loc, scale, size</strong>），代表生成的高斯分布随机数的均值、方差以及输出的 size. </p>
<a id="more"></a>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, (<span class="number">7</span>,<span class="number">1</span>)).astype(np.float32)</span><br></pre></td></tr></table></figure>
<p>Output :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[-0.05229944],</span><br><span class="line">       [ 0.01754326],</span><br><span class="line">       [ 0.01764081],</span><br><span class="line">       [-0.03058357],</span><br><span class="line">       [-0.05406121],</span><br><span class="line">       [-0.07284269],</span><br><span class="line">       [ 0.00289147]], dtype=float32)</span><br></pre></td></tr></table></figure>
<p><strong>Scipy Help</strong>: <strong>numpy.random.normal</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Parameters:	</span><br><span class="line">loc : float <span class="keyword">or</span> array_like of floats</span><br><span class="line">Mean (“centre”) of the distribution.</span><br><span class="line"></span><br><span class="line">scale : float <span class="keyword">or</span> array_like of floats</span><br><span class="line">Standard deviation (spread <span class="keyword">or</span> “width”) of the distribution.</span><br><span class="line"></span><br><span class="line">size : int <span class="keyword">or</span> tuple of ints, optional</span><br><span class="line">Output shape. If the given shape <span class="keyword">is</span>, e.g., (m, n, k), then m * n * k samples are drawn. If size <span class="keyword">is</span> <span class="keyword">None</span> (default), a single value <span class="keyword">is</span> returned <span class="keyword">if</span> loc <span class="keyword">and</span> scale are both scalars. Otherwise, np.broadcast(loc, scale).size samples are drawn.</span><br><span class="line"></span><br><span class="line">Returns:	</span><br><span class="line">out : ndarray <span class="keyword">or</span> scalar</span><br><span class="line">Drawn samples <span class="keyword">from</span> the parameterized normal distribution.</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.normal.html" target="_blank" rel="external">numpy.random.normal</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[numpy.newaxis 转变矩阵的形狀]]></title>
      <url>http://iequa.com/2018/09/11/python/py-numpy-9-newaxis/</url>
      <content type="html"><![CDATA[<p>有一個<strong>一維陣列 x1</strong>，我分別想要把它變成一個 3*1 的矩陣 <strong>x2</strong>，以及 1*3 的矩陣 <strong>x3</strong>，作法如下。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x1 = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], float)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有一個一維陣列x1，我分別想要把它變成一個 3*1 的矩陣x2，以及 1*3 的矩陣x3，作法如下。</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"shape of x1 is "</span>, x1.shape)</span><br><span class="line">print(x1)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------"</span>)</span><br><span class="line"></span><br><span class="line">x2 = x1[:, np.newaxis]</span><br><span class="line">print(<span class="string">"shape of x2 is "</span>, x2.shape)</span><br><span class="line">print(x2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------"</span>)</span><br><span class="line"></span><br><span class="line">x3 = x1[np.newaxis, :]</span><br><span class="line">print(<span class="string">"shape of x3 is "</span>, x3.shape)</span><br><span class="line">print(x3)</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shape of x1 is  (3,)</span><br><span class="line">[ 10.  20.  30.]</span><br><span class="line">-------------</span><br><span class="line">shape of x2 is  (3, 1)</span><br><span class="line">[[ 10.]</span><br><span class="line"> [ 20.]</span><br><span class="line"> [ 30.]]</span><br><span class="line">-------------</span><br><span class="line">shape of x3 is  (1, 3)</span><br><span class="line">[[ 10.  20.  30.]]</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.ben-do.github.io/2016/09/15/change-shape-of-matrix-by-numpy/" target="_blank" rel="external">利用numpy的newaxis轉變矩陣的形狀</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[互联网金融风控中的数据科学 (part3) ： Lending Club 的数据试验]]></title>
      <url>http://iequa.com/2018/04/23/data-science/internet-finance-3/</url>
      <content type="html"><![CDATA[<p>用户全流程欺诈⻛险评分体系</p>
<a id="more"></a>
<h2 id="反欺诈是一种机器学习过程"><a href="#反欺诈是一种机器学习过程" class="headerlink" title="反欺诈是一种机器学习过程"></a>反欺诈是一种机器学习过程</h2><blockquote>
<p>对于做互联网金融一般情况是 正负样本 是极度不平衡的(最高可以达到 100 : 1), 这样的情况对于 SVM 这种分类器是不合适的，所以在做金融的<strong>评分卡模型</strong> 或 <strong>欺诈模型</strong> 也好，这样对特征的处理 和 样本的非平衡处理是比较高的.</p>
<p>好坏用户的定义，一般是根据用户的贷后表现，来定义好坏用户的.</p>
</blockquote>
<p>举个栗子🌰 :</p>
<blockquote>
<p>用户借款 5W 元，可能是分期还款 12个月，这样每个月都会还一笔固定的额度.</p>
<p><strong>信用风险</strong> : 在挺长的时间可以按时还款.</p>
<p><strong>欺诈风险</strong> : </p>
<ol>
<li>用户可能 第 1、2 期 是还的，之后是不还的.<br> (因为中介也越来越聪明，给他自己留出时间，躲避催收的手段，也躲避追踪等等)</li>
<li>贷前审核 （触碰到拒贷规则）</li>
<li>造假行为 （信息资料造假）</li>
<li>调查员 调查出来是 <strong>中介</strong> 或者 <strong>有欺诈风向的</strong>，进入黑名单的.</li>
<li>…</li>
</ol>
<p>所以我们在定义模型负样本的话，我们可能定义为 m1+ 信用风险、m3+ (90天以上不还款的话)，我们可以定义为欺诈风险</p>
<p><code>坏用户</code> ： 欺诈风险用户<br><code>好用户</code> ： 一天都不逾期还款<br><code>灰用户</code> ： m1+ 未还款，但是90天之内可以还款的 (不放在训练中，否则会给模型带来很多额外的信息，影响效果)</p>
<p>灰用户不放在模型中，这样训练出的模型对好坏用户的区分程度也越高.</p>
</blockquote>
<p>金融模型 和 CTR预估 相比是 有一个周期性质的</p>
<blockquote>
<ol>
<li>广告点击的话，用户点击，立马有一个样本出现</li>
<li>做长期现金贷，选择样本是选择半年之前的用户，作为样本</li>
</ol>
</blockquote>
<h2 id="正负样本"><a href="#正负样本" class="headerlink" title="正负样本"></a>正负样本</h2><p>真实场景正负样本比例 <code>(10~30) ：1</code> （成熟平台的风险是越来越小的，所以我们拿到的 <code>正负样本比例</code>是逐步增加的）.</p>
<p>数据的不平衡处理 ： <strong>降采样</strong>、<strong>过采样</strong>、<strong>SMOTE</strong></p>
<ul>
<li><strong>降采样</strong> ： 正负样本成 3:1， 5:1 来做一个模型,  坏样本是全部取的, (一般这种情况 做评分卡的时候是需要做的)</li>
<li><strong>过采样</strong> ： 实际用的不多，如果负样本实在是过少 都 &lt;100 个， 那么可以考虑 减低我们的观察周期， 或者 欺诈定义的并不是一个很严格 来放进来多一些的 负样本过来来做训练，或者在拒贷里面找一些人过来.</li>
<li><strong>SMOTE</strong> ： 在分布上模拟一些数据，模拟完的数据可做训练，比较经典拿真实的数据做训练是更贴近真实的情况.<blockquote>
<p>做模型 如 GBRT、RF 等，他们对不平衡的数据是有容忍的，这种直接用真实数据进行训练，也能得到很好的效果.</p>
</blockquote>
</li>
</ul>
<h2 id="模型选型"><a href="#模型选型" class="headerlink" title="模型选型"></a>模型选型</h2><p>对于做评分卡的模型 或者 LR 的话，样本的平衡要在 10:1 范围内， LR 对变量相关性的筛选 和 数据平衡 有要求</p>
<p>做模型，至少要用 RF 来做模型， 或者 GBDT、GBRT，这种 Boosting 的模型，对于样本的不平衡容忍度更高一些，他们对于学习 更小而细微 的特征和变量 可以学习的更深一些.</p>
<h2 id="Lending-Club"><a href="#Lending-Club" class="headerlink" title="Lending Club"></a>Lending Club</h2><p>Lending Club 创立于 2016年， 主要做一个提供 P2P 贷款的平台中介服务，2016年底在 纽交所上市，后来爆出来很多丑闻，创始人离职，股价下跌. 但是不管怎么样，它的数据在我们做反欺诈等是非常有重要的.</p>
<blockquote>
<p>Lending Club 2016 的借贷数据，Q3，Q4 可以一起做一下，半年的数据做训练是更好的.</p>
</blockquote>
<h3 id="1-Data"><a href="#1-Data" class="headerlink" title="1. Data"></a>1. Data</h3><p>Lending Club 2016年Q3数据：<a href="https://www.lendingclub.com/info/download-data.action" target="_blank" rel="external">https://www.lendingclub.com/info/download-data.action</a></p>
<p>参考：<a href="http://kldavenport.com/lending-club-data-analysis-revisted-with-python/" target="_blank" rel="external">http://kldavenport.com/lending-club-data-analysis-revisted-with-python/</a></p>
<p><img src="/images/datascience/finance-LC-18.jpg" width="900"></p>
<p>看下数据，其实我也不能完全了解这些所有字段的含义</p>
<blockquote>
<ol>
<li>int_rate 利率</li>
<li>term 待多少期</li>
<li>grade 等级 C、B、D，7个等级吧</li>
<li>sub_grade 会分为更细的等级.</li>
<li>后面这些是从 FICO 获取的数据吧…</li>
</ol>
</blockquote>
<p>我们的目的是判断，来了一个用户，之后输入该用户的这些特征，我们判断他是不是一个欺诈用户</p>
<p><strong>如果用户填写假资料</strong></p>
<blockquote>
<p>用户贷款之后的表现，如果填的真假我们不了解，填写的是假资料，但是之后还款表现好那么它还是一个好用户.</p>
</blockquote>
<p><strong>数据上</strong> </p>
<blockquote>
<p>我只取了2016年Q3数据，9W+ 的数据，列数 122 列。数据有 99124行， 去掉表头，有 99123 行</p>
</blockquote>
<h2 id="2-Keep-what-we-need"><a href="#2-Keep-what-we-need" class="headerlink" title="2. Keep what we need"></a>2. Keep what we need</h2><blockquote>
<p>我们初步做特征筛选…, 我们在看的时候，可以分片分片的看这 122 个列…</p>
</blockquote>
<h3 id="2-1-特征分析-part1"><a href="#2-1-特征分析-part1" class="headerlink" title="2.1 特征分析 part1"></a>2.1 特征分析 part1</h3><p><img src="/images/datascience/finance-LC-19.jpg" width="850"></p>
<blockquote>
<p>id 和 member_id 不作为特征，可以直接去掉, int_rate 带 % 的可以直接去掉 %， 变为 float 的</p>
</blockquote>
<p><strong>Loan Amount Requested Verus the Funded Amount</strong></p>
<p><img src="/images/datascience/finance-LC-20.png" width="850"></p>
<h3 id="2-2-特征分析-part2"><a href="#2-2-特征分析-part2" class="headerlink" title="2.2 特征分析 part2"></a>2.2 特征分析 part2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.ix[:<span class="number">5</span>,<span class="number">8</span>:<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line">print(df.emp_title.value_counts().head())</span><br><span class="line">print(df.emp_title.value_counts().tail())</span><br><span class="line">df.emp_title.unique().shape </span><br><span class="line"><span class="comment"># 37421 emp_title， 太多了，可信度不高，我们也无法做 emp_title 非数值型变量的 one-hot enconding</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.drop([&apos;emp_title&apos;],1, inplace=True)</span><br></pre></td></tr></table></figure>
<p>employment title</p>
<hr>
<ul>
<li><a href="https://github.com/blair101/machine-learning-action/blob/master/LC/LC.ipynb" target="_blank" rel="external">LC code</a></li>
</ul>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>删不删除变量，需要看模型，LR 需要删除，GBRT 不用删除也可以.</p>
<p>LR 做评分卡模型，变量 一定是强变量，20个左右，不会几百个，有个变量可以训练处系数</p>
<p>出来 0 ~ 1 概率，拉一下橡皮筋， 分数映射，拉到 300 ~ 900 分，可以做一个评分卡，600分 可能是好用户:坏用户，可能是 50:1</p>
<p>评分卡的阶梯可能是增加。</p>
<p>模型不同 0 ~ 1 的概率可能是不同的，那么我增加50分，风险水平会降低一半</p>
<p>550 25:1</p>
<p>评分卡分的映射和模型是没有关系的，是样本里人群的好坏是有关系的，所以模型的参数做映射，是不需要重新训练的。</p>
<p>lending club 要求 FICO 是个特定的评分方法，是一个固定的评分方法。</p>
<p>比如 芝麻信用都是用自己的模型，自己算出来的</p>
<p>如果人群变了</p>
<p>模型的稳定性非常重要，当前要评估的人群已经和去年下半年的用户已经不一样的，所以训练的时候要尽可能提升模型的稳定性，如果训练时模型稳定性非常差，那么一上线就崩溃了。</p>
<p>如何提高模型稳定性，2种方法</p>
<ol>
<li><p>特征筛选的时候，我会去把特征从样本的时间开始，2016.06 开始每个月我一直在看它的均值和方差的变化是否在容忍的范围内，比如我去年这个月这个特征是30，当前 2017.06 这个特征变为了 100，那么这个特征变化太大，是不能用的，超过50%， 太不稳定了，其实这个变量，或者做评分卡，反欺诈等是不合适的，直接扔掉。</p>
</li>
<li><p>尽量做模型融合，单模型的模型稳定性是不好的，随着月份的变化，你的预测是有变化的，波动的范围是有点低，ensemble 集成学习，</p>
<p>三种方法 (bagging、boosting，Stacking）</p>
</li>
</ol>
<p>2.1 Bagging 比如 RF，每个模型取一样的权重，进行评估<br>2.2 Boosting 根据模型训练出不同权重，给予不同的权重<br>2.3 Stacking 我在用一个分类器，去处理我要集成的这3，4种模型，训练出一个参数</p>
<p>这三种方法，都能提高模型的稳定性</p>
<p>让你在线上运行 3~6 个月，信贷产品比较长的话，2个月更新一次比较好，贷款周期短的话，周更新都可以</p>
<blockquote>
<p>有做 KS 比较高的话，会送大家小礼品，</p>
</blockquote>
<p>我们线上有用 spark streaming 也有处理实时特征，但是目前体量，一般单机和离线处理就够了。</p>
<p>9W 个用户，100多个变量，那根本不需要用分布式来计算了。</p>
<p>半年的样本数据，把数据取出来之后，你要定义你的<code>好坏</code>样本,会把一些灰色地段的用户给他摘除掉，只留下最好或者最坏的用户，这些用户提特征之后，在做训练，<code>样本内的验证</code>和<code>跨时间的验证</code> ，就是说我的时间段是完全不一样的，那么能够验证模型的稳定性，那么最好就要拿 2017年，1和2月的数据，在做一个跨时间的验证，跨时间的验证才是你真正上线之后的效果，因为你在时间窗口内训练或者test的话，它的 ks 可能 30 多，如果跨时间验证的话，你的人群可能会偏移，那么ks可能会下降，ks就变为20，如果差别控制在 15%，差别大稳定性就很不好，是不能上线的。</p>
<p>模型的话，你现在开始做模型，你一定取的是 去年 下半年的是数据，做验证的话是拿去年1月份的数据，一个月的数据还有5，6，7个还款表现，基本上等你做完模型，你做跨时间验证的话，刚刚好，你花2个礼拜做一个模型，上线的时候，你就不需要重新训练了。除非你到9月份上线，那么时间久了，就需要重新训练，一般是不需要重新训练的。</p>
<p>欺诈模型的稳定性评价指标： 1. 对比训练集 与 跨时间验证集 的 KS 偏差，一般偏差大不大的话，觉得这个模型是可以在时间维度上hold住的，那么可以模型上线。另外指标金融上比较常用的指标是 psi，这个是验证不同人群的偏移程度，以后可以自己查查资料。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://myslide.cn/slides/3199" target="_blank" rel="external">金融反欺诈场景下的Spark实践</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[互联网金融风控中的数据科学 (part2)  ： 模型策略]]></title>
      <url>http://iequa.com/2018/04/21/data-science/internet-finance-2/</url>
      <content type="html"><![CDATA[<p>反欺诈也是一种机器学习过程， 反欺诈建模中的数据科学</p>
<a id="more"></a>
<p><img src="/images/datascience/finance-8.jpg" width="850"></p>
<h2 id="反欺诈也是一种机器学习过程"><a href="#反欺诈也是一种机器学习过程" class="headerlink" title="反欺诈也是一种机器学习过程"></a>反欺诈也是一种机器学习过程</h2><p><img src="/images/datascience/finance-9.jpg" width="850"></p>
<blockquote>
<p>对于做互联网金融一般情况是 正负样本 是极度不平衡的(最高可以达到 100 : 1), 这样的情况对于 SVM 这种分类器是不合适的，所以在做金融的<strong>评分卡模型</strong> 或 <strong>欺诈模型</strong> 也好，这样对特征的处理 和 样本的非平衡处理是比较高的.</p>
<p>好坏用户的定义，一般是根据用户的贷后表现，来定义好坏用户的.</p>
</blockquote>
<p>举个栗子🌰 :</p>
<blockquote>
<p>用户借款 5W 元，可能是分期还款 12个月，这样每个月都会还一笔固定的额度.</p>
<p><strong>信用风险</strong> : 在挺长的时间可以按时还款.</p>
<p><strong>欺诈风险</strong> : </p>
<ol>
<li>用户可能 第 1、2 期 是还的，之后是不还的.<br> (因为中介也越来越聪明，给他自己留出时间，躲避催收的手段，也躲避追踪等等)</li>
<li>贷前审核 （触碰到拒贷规则）</li>
<li>造假行为 （信息资料造假）</li>
<li>调查员 调查出来是 <strong>中介</strong> 或者 <strong>有欺诈风向的</strong>，进入黑名单的.</li>
<li>…</li>
</ol>
<p>所以我们在定义模型负样本的话，我们可能定义为 m1+ 信用风险、m3+ (90天以上不还款的话)，我们可以定义为欺诈风险</p>
<p><code>坏用户</code> ： 欺诈风险用户<br><code>好用户</code> ： 一天都不逾期还款<br><code>灰用户</code> ： m1+ 未还款，但是90天之内可以还款的 (不放在训练中，否则会给模型带来很多额外的信息，影响效果)</p>
</blockquote>
<p>金融模型 和 CTR 预估的相比是 有一个周期性质的</p>
<blockquote>
<ol>
<li>广告点击的话，用户点击，立马有一个样本出现</li>
<li>做长期现金贷，选择样本是选择半年之前的用户，作为样本</li>
</ol>
</blockquote>
<h2 id="模型策略"><a href="#模型策略" class="headerlink" title="模型策略"></a>模型策略</h2><p><img src="/images/datascience/finance-10.jpg" width="800"></p>
<h3 id="1-Linear-Regression"><a href="#1-Linear-Regression" class="headerlink" title="1. Linear Regression"></a>1. Linear Regression</h3><p><img src="/images/datascience/finance-11.jpg" width="800"></p>
<h3 id="2-Logistic-Regression"><a href="#2-Logistic-Regression" class="headerlink" title="2 Logistic Regression"></a>2 Logistic Regression</h3><p><img src="/images/datascience/finance-12.jpg" width="800"></p>
<h3 id="3-Decision-Tree"><a href="#3-Decision-Tree" class="headerlink" title="3. Decision Tree"></a>3. Decision Tree</h3><p><img src="/images/datascience/finance-13.jpg" width="850"></p>
<h3 id="4-Random-Forest"><a href="#4-Random-Forest" class="headerlink" title="4. Random Forest"></a>4. Random Forest</h3><p><img src="/images/datascience/finance-14.png" width="850"></p>
<h3 id="5-Gradient-Boosting-RT"><a href="#5-Gradient-Boosting-RT" class="headerlink" title="5. Gradient Boosting RT"></a>5. Gradient Boosting RT</h3><p><img src="/images/datascience/finance-15.png" width="850"></p>
<blockquote>
<hr>
</blockquote>
<p><img src="/images/datascience/finance-16.png" width="850"></p>
<h2 id="结果评估-混淆矩阵"><a href="#结果评估-混淆矩阵" class="headerlink" title="结果评估-混淆矩阵"></a>结果评估-混淆矩阵</h2><ul>
<li>Precision: 评估认定坏用户的精确度</li>
<li>Recall: 评估坏用户的召回率</li>
<li>F-Measure: 组合判断</li>
</ul>
<p><img src="/images/datascience/finance-17.png" width="830"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://myslide.cn/slides/3199" target="_blank" rel="external">金融反欺诈场景下的Spark实践</a></li>
<li><a href="http://www.itdks.com/dakalive/detail/442" target="_blank" rel="external">大咖说 王婷</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[互联网金融风控中的数据科学 (part1) ： 金融科技企业面临的欺诈⻛险]]></title>
      <url>http://iequa.com/2018/04/20/data-science/internet-finance-1/</url>
      <content type="html"><![CDATA[<p>金融科技企业面临的欺诈⻛险介绍 , 互联网金融 主要是通过互联网平台，连接 出借方 和 借款方</p>
<a id="more"></a>
<h2 id="1-金融与科技的结晶"><a href="#1-金融与科技的结晶" class="headerlink" title="1. 金融与科技的结晶"></a>1. 金融与科技的结晶</h2><ul>
<li>金融的本质 : 资源的最合理化应用</li>
<li>互联网技术 : 交易的边界成本趋向“零”</li>
<li>金融科技 : 用大数据、云计算等技术实现的资金融通、支付、投资和信息中介服务</li>
</ul>
<p><img src="/images/datascience/finance-1.jpg" width="520"></p>
<blockquote>
<p>我们国家没有覆盖度很全的所有人的征信，虽然有央行，但是还远远不够…</p>
<p>授权抓取的用户的数据，(百融、同盾、芝麻信用 等，工作中可能都会对接到这些平台)，这些平台会通过很多渠道收集用户，然后给用户打一些风险标签和欺诈的评分.</p>
</blockquote>
<h2 id="2-中国信用贷款行业"><a href="#2-中国信用贷款行业" class="headerlink" title="2. 中国信用贷款行业"></a>2. 中国信用贷款行业</h2><p>&nbsp;&nbsp;&nbsp; 网贷之家 收集P2P网贷平台的运营数据，并为行业排行, 以下为 2018年3月数据做的行业排行 :</p>
<p><img src="/images/datascience/finance-3.jpg" width="800"></p>
<blockquote>
<p>网贷之家 : <a href="http://www.wdzj.com/pingji.html" target="_blank" rel="external">http://www.wdzj.com/pingji.html</a></p>
<p>现在消亡的 P2P 公司逐渐消亡的也很多，之前 3000 多家，行业大洗牌之后，现在 2000 多家…</p>
<p>在整个行业的体量上，陆金所 一定是体量非常大的，整个网贷的市场大概有万亿级别.</p>
</blockquote>
<h2 id="3-中国信用贷款行业分层"><a href="#3-中国信用贷款行业分层" class="headerlink" title="3. 中国信用贷款行业分层"></a>3. 中国信用贷款行业分层</h2><p><img src="/images/datascience/finance-4.jpg" width="800"></p>
<blockquote>
<p>APR (Annual Percentage Rate) 年利率, 对银行信用卡来说，一般 APR 在 16% ~ 18%, 那么日利率为 0.04%~0.05% 之间</p>
</blockquote>
<p>举个栗子🌰 :</p>
<blockquote>
<p>银行是按日收利息的。简单介绍一下利息是如何计算的 :</p>
<p>假设用信用卡提现1000刀，20天后还清，这张卡的Cash Advance APR是25.49%.<br>一年有365天（部分银行按360天算（不要问我闰年怎么算Orz））日利率应该是25.49%/365=0.07%.<br>20天后产生的利息为1000 * 20 * 0.07% = 14刀</p>
</blockquote>
<p>APR 可以划分人群，APR 不同级别，贷前贷后的审核，催收的制度 也是不同的</p>
<blockquote>
<p>APR越低，人群是越好的. 在 APR 低的人群，是基本不需要催收的，在 APR 高的人群，是要催收的.</p>
</blockquote>
<p>高 APR 人群:</p>
<blockquote>
<p>对于 APR 在 40% ~ 80% 的，比如 拍拍贷，这种小额的现金贷，5000 以下，7天~1个月，贷款的时间也短，多还的利息用户是不感知的，但是如果变成年化，APR 就会非常高</p>
<p>在 APR &gt; 80%, 是 现金巴士，用钱宝，这些存在也是有人们的需求存在的<br>APR 低的用户，就是信用好，APR高的话，就是信用没有那么好，或者还款能力没有那么好</p>
</blockquote>
<p><strong>做金融最大的本质就是在控制风险，在风险可控的情况下获得最大的利润</strong>.</p>
<h2 id="4-个人对个人的信用贷款"><a href="#4-个人对个人的信用贷款" class="headerlink" title="4. 个人对个人的信用贷款"></a>4. 个人对个人的信用贷款</h2><p><img src="/images/datascience/finance-5.jpg" width="800"></p>
<h2 id="5-急速信任-自动化信用评估"><a href="#5-急速信任-自动化信用评估" class="headerlink" title="5. 急速信任-自动化信用评估"></a>5. 急速信任-自动化信用评估</h2><p><img src="/images/datascience/finance-6.jpg" width="800"></p>
<p>国内外 P2P 网贷的比较 :</p>
<blockquote>
<p>国家金融环境存在较大区别,在信用体系建设等方面也都存在很大的差异，国外拥有较为完善的信用评估体制,中国在这方面却非常缺失，所以国内的借贷平台在用户信用评估方面都做出自己的努力，构建了不同形式的评价方法.</p>
<p>国外有完善的信用评估体质，有 <a href="https://xueqiu.com/k?q=FICO#/" target="_blank" rel="external">FICO</a>官方的评分. 国外80%都是信用风险，20%是欺诈风险. <code>中国更多的是欺诈风险</code>.</p>
<p><a href="https://xueqiu.com/k?q=FICO#/" target="_blank" rel="external">FICO</a> 成立于1956年，为纽交所上市公司，市值52亿美金，提供跨多个行业的分析软件和工具.</p>
</blockquote>
<p>国内黑产业链 :</p>
<blockquote>
<p>国内不还钱的话惩罚的措施跟不上，国内有些中介我不还钱的话，你找不到我的话，这个钱就是我空手套白狼的利润，这样催生了越来越多贷款的欺诈的情况，他们有一个黑产业链，从账号的获取到恶意的注册，再到互联网金融公司的平台申请贷款，有的中介会有一些现象. </p>
</blockquote>
<p>举个栗子🌰: </p>
<blockquote>
<p>他们会到燕郊找一批老人妇女，然后说我给你3000元钱，你跟着我走一趟。还有一些客户对自己的资质没有信心，然后找中介包装一些材料。有好中介，有坏中介，如果坏中介带你贷了5W元钱，然后给你2.5W告诉你爱还不还，然后还可以带你的信息再去其他家平台再贷款，这样用户在不知情的情况下会背负很多债务信息.</p>
<p>中介做的事，就是不停的去试各个P2P平台产品，发现其中漏洞，这些中介比产品经理还要了解这个产品，然后他帮助他的客户去做包装，这样比如一下子可能进来 100 个欺诈用户，每个用户5W，这样一下子就是500W，对企业来说损失很大，然后在这种高额收入的诱惑下，这些中介会升级不断自己的伪造技术.</p>
</blockquote>
<h2 id="6-金融科技企业面临的欺诈风险"><a href="#6-金融科技企业面临的欺诈风险" class="headerlink" title="6. 金融科技企业面临的欺诈风险"></a>6. 金融科技企业面临的欺诈风险</h2><p><img src="/images/datascience/finance-7.jpg" width="800"></p>
<blockquote>
<p>对于线上反欺诈来说，你看不见用户，只面对数据，要发现数据之间的异常、用户与用户之间有没有异常相似度联系等.</p>
</blockquote>
<h2 id="7-Reference"><a href="#7-Reference" class="headerlink" title="7. Reference"></a>7. Reference</h2><ul>
<li><a href="https://myslide.cn/slides/3199" target="_blank" rel="external">宜人贷数据科学家王婷: 金融反欺诈场景下的Spark实践</a></li>
<li><a href="http://www.itdks.com/dakalive/detail/442" target="_blank" rel="external">大咖说 王婷</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive 中 udf、udaf 和 udtf 的使用]]></title>
      <url>http://iequa.com/2018/02/01/hadoop/hadoop-hive-udf-udaf/</url>
      <content type="html"><![CDATA[<p>Hive 是基于 Hadoop 中的 MapReduce，提供 HQL 查询的数据仓库. </p>
<p>Hive 是一个很开放的系统，很多内容都支持用户定制. 如 : 文件格式、MR脚本、自定义函数、自定义聚合函数 等.</p>
<a id="more"></a>
<h2 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h2><p>编写 UDF函数 的时候需要注意一下几点：</p>
<ol>
<li>自定义 UDF 需要继承 org.apache.hadoop.hive.ql.UDF</li>
<li>需要实现 <code>evaluate</code> 函数</li>
</ol>
<p>以下是两个数求和函数的UDF。evaluate函数代表两个整型数据相加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hive.connect;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">evaluate</span><span class="params">(Integer a, Integer b)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == a || <span class="keyword">null</span> == b) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> a + b;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h2><p>函数类需要继承 <strong>UDAF</strong> 类，内部类 <strong>Evaluator</strong> 需要实现 <strong>UDAFEvaluator</strong> 接口.</p>
<p>Evaluator 需要实现 init、iterate、terminatePartial、merge、terminate 这几个函数.</p>
<ol>
<li><code>init</code>函数实现接口 UDAFEvaluator 的 init 函数.</li>
<li><code>iterate</code>接收传入的参数，并进行内部的轮转。其返回类型为 boolean.</li>
<li><code>terminatePartial</code>无参数，其为 iterate 函数轮转结束后，返回轮转数据.</li>
<li><code>merge</code> 接收 terminatePartial 的返回结果，进行数据 merge 操作，其返回类型为boolean.</li>
<li><code>terminate</code> 返回最终的聚集函数结果.</li>
</ol>
<p><a href="https://github.com/blair101/bigdata/tree/master/hadoop/hive_udf_udaf" target="_blank" rel="external">下面是一个简单的 UDAF 的 demo</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x.user_bhv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDAF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDAFEvaluator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDAFMergeIntToIntMap</span> <span class="keyword">extends</span> <span class="title">UDAF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PartialResult</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; attributes;</span><br><span class="line"></span><br><span class="line">        PartialResult() &#123;</span><br><span class="line">            attributes = Maps.newHashMap();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitIdUDAFEvaluator</span> <span class="keyword">implements</span> <span class="title">UDAFEvaluator</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> PartialResult partialResult;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnitIdUDAFEvaluator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"map init"</span>);</span><br><span class="line">            partialResult = <span class="keyword">new</span> PartialResult();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">iterate</span><span class="params">(Map&lt;Integer, Integer&gt; attributes_args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (attributes_args == <span class="keyword">null</span> || attributes_args.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : attributes_args.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.partialResult.attributes.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PartialResult <span class="title">terminatePartial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.partialResult;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">merge</span><span class="params">(PartialResult other)</span> </span>&#123; <span class="comment">// 参数不可能为 null</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : other.attributes.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.partialResult.attributes.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Map&lt;Integer, Integer&gt; <span class="title">terminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (partialResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.partialResult.attributes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Hive 脚本中的使用示例 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hql=<span class="string">"ADD jar <span class="variable">$&#123;jar_dir&#125;</span>/user_bhv_for_hive.jar;</span><br><span class="line">    CREATE TEMPORARY FUNCTION merge_int_to_int_map AS 'com.x.user_bhv.UDAFMergeIntToIntMap';</span><br><span class="line">    INSERT OVERWRITE TABLE <span class="variable">$&#123;table_user_buy_category&#125;</span></span><br><span class="line">    SELECT</span><br><span class="line">        mobile_number,</span><br><span class="line">        merge_int_to_int_map (level1_id_count_map)</span><br><span class="line">    FROM </span><br><span class="line">        ods_dm_e_coupon</span><br><span class="line">    GROUP BY mobile_number</span></span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol>
<li>重载 evaluate 函数.</li>
<li>UDF 函数中参数类型可以为Writable，也可为java中的基本数据对象.</li>
<li>UDF 支持变长的参数.</li>
<li>Hive 支持隐式类型转换.</li>
<li>客户端退出时，创建的临时函数自动销毁.</li>
<li>evaluate函数必须要返回类型值，空的话返回null，不能为void类型.</li>
<li>UDF 和 UDAF 都可以重载.</li>
<li>查看函数 SHOW FUNCTIONS.</li>
</ol>
<blockquote>
<p>UDAF: User Defined Aggregation Function</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://blog.csdn.net/liuj2511981/article/details/8523084" target="_blank" rel="external">Hive 中 UDF、UDAF 和 UDTF 使用</a></li>
<li><a href="https://github.com/blair101/bigdata/tree/master/hadoop/hive_udf_udaf" target="_blank" rel="external">bliar’s github hive udaf demo</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flexible Task Scheduling Framework]]></title>
      <url>http://iequa.com/2018/01/30/hadoop/hadoop-hive-bigdata-offline-demo/</url>
      <content type="html"><![CDATA[<p>本篇介绍一种 大数据离线开发模块的解决方案， 其实这是一个手写的适合离线调度的灵活小框架</p>
<p><a href="https://github.com/blair101/bigdata-tools/tree/master/bigdata-offline-demo" target="_blank" rel="external">blair’s github bigdata_offline_demo</a></p>
<a id="more"></a>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>提供一些 best practice</li>
<li>提高各模块结构及代码的一致性</li>
<li>降低开发新模块的成本</li>
<li>便于离线大数据分析</li>
<li>当然它也适用于对任何离线Job进行调度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个 hive 配合 shell 等其他语言写成的灵活调度框架.</span><br><span class="line">   该示例模块架 适用于离线分析，特别是每天跑的crontab任务，或者是每周、每月跑的任务</span><br></pre></td></tr></table></figure>
<h2 id="1-代码规范"><a href="#1-代码规范" class="headerlink" title="1. 代码规范"></a>1. 代码规范</h2><ul>
<li>对 Hive 表的操作，如基本SQL不能满足需求，则建议优先采用 Java UDF/UDAF 的方式</li>
<li>非 Hive 操作, 推荐优先采用python版 streaming 方式或者Java语言实现方式</li>
<li>每个模块建议给出准确的输入、输出格式定义注释说明.</li>
</ul>
<h2 id="2-结构规范"><a href="#2-结构规范" class="headerlink" title="2. 结构规范"></a>2. 结构规范</h2><h3 id="2-1-模块目录"><a href="#2-1-模块目录" class="headerlink" title="2.1 模块目录"></a>2.1 模块目录</h3><ul>
<li>每个模块为一个目录，模块名 一般与其中 主代码目录 名称一致</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/xgitlab/group-data/bigdata-offline-demo [master ✗ (0cdd403)] [14:43:10]</span></span><br><span class="line">➜ ll</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--   1 blair  staff   106B Dec 15 14:12 LICENSE</span><br><span class="line">-rw-r--r--@  1 blair  staff   4.9K Dec 15 14:43 README.md</span><br><span class="line">drwxr-xr-x  10 blair  staff   320B Dec 15 14:02 bigdata-offline-demo</span><br><span class="line">drwxr-xr-x   4 blair  staff   128B Dec 15 14:11 docs</span><br></pre></td></tr></table></figure>
<p><strong>目录功能说明</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bigdata-offline-demo</td>
<td style="text-align:center">主代码目录 名称</td>
</tr>
<tr>
<td style="text-align:center">README.md</td>
<td style="text-align:center">主要说明</td>
</tr>
<tr>
<td style="text-align:center">LICENSE</td>
<td style="text-align:center">许可说明</td>
</tr>
<tr>
<td style="text-align:center">docs</td>
<td style="text-align:center">详细文档</td>
</tr>
</tbody>
</table>
<h3 id="2-2-主代码目录"><a href="#2-2-主代码目录" class="headerlink" title="2.2 主代码目录"></a>2.2 主代码目录</h3><blockquote>
<p><strong>bigdata-offline-demo/bigdata-offline-demo/</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/xgitlab/group-data/bigdata-offline-demo/bigdata-offline-demo [master ✗ (0cdd403)] [14:44:28]</span></span><br><span class="line">drwxr-xr-x   5 blair  staff   160B Dec 15 14:02 alert</span><br><span class="line">drwxr-xr-x   6 blair  staff   192B Dec 15 14:02 conf</span><br><span class="line">drwxr-xr-x   3 blair  staff    96B Dec 15 14:02 create_table</span><br><span class="line">drwxr-xr-x   3 blair  staff    96B Dec 15 14:08 crontab_job</span><br><span class="line">drwxr-xr-x   3 blair  staff    96B Dec 15 14:02 flag</span><br><span class="line">drwxr-xr-x  40 blair  staff   1.3K Dec 15 14:02 <span class="built_in">log</span></span><br><span class="line">drwxr-xr-x   3 blair  staff    96B Dec 15 14:08 script</span><br><span class="line">drwxr-xr-x   8 blair  staff   256B Dec 15 14:04 util</span><br></pre></td></tr></table></figure>
<p><strong>主代码目录功能说明</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">目录</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">── alert</td>
<td style="text-align:left">报警封装</td>
</tr>
<tr>
<td style="text-align:left">── conf</td>
<td style="text-align:left">配置文件</td>
</tr>
<tr>
<td style="text-align:left">──create_table</td>
<td style="text-align:left">建表脚本</td>
</tr>
<tr>
<td style="text-align:left">── crontab_job</td>
<td style="text-align:left">crontab 任务脚本。(crontab任务脚本以crontab_job为前缀, 检测任务依赖关系, 调用主逻辑脚本等)</td>
</tr>
<tr>
<td style="text-align:left">── flag</td>
<td style="text-align:left">标记文件。(标志该模块已经开始运行，或者运行完毕)</td>
</tr>
<tr>
<td style="text-align:left">── log</td>
<td style="text-align:left">日志文件。 (如脚本失败可根据log追查定位失败原因)</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">── script</td>
<td style="text-align:left">主脚本文件</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">── util</td>
<td style="text-align:left">工具脚本。(主要包含写log脚本, hadoop file / local file / hive check 等封装, 初始化环境目录等)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">── jar</td>
<td style="text-align:left">jar包 (如无则不需要建立)</td>
</tr>
<tr>
<td style="text-align:left">── java</td>
<td style="text-align:left">java (udf udaf) 源代码。 (如无则不需要建立)</td>
</tr>
</tbody>
</table>
<ul>
<li>script目录 主要存放 shell 脚本，有需要也存放 python 脚本。</li>
<li>java 代码需要放入 java目录 </li>
<li><p>如果该模块，script目录脚本较多，􏰀可以在 script dir之下建立子目录􏰀如􏰂 :</p>
<pre><code>├── script
  ├── sub_module_1 子模块目录 
  ├── sub_module_2 子模块目录
</code></pre></li>
</ul>
<h3 id="2-2-项目模板"><a href="#2-2-项目模板" class="headerlink" title="2.2 项目模板"></a>2.2 项目模板</h3><ul>
<li>提供公共的项目模板. 􏰀统一shell脚本代码􏰄结构􏰄 日志􏰄配置规范􏰁 等</li>
<li><p>项目模板可仿照本模块􏰂 : </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://gitlab.***/data/bigdata-offline-demo.git</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>1). 变量命名􏰂</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自有变量采用小写􏰀. export出的环境变量采用大写􏰁</span><br><span class="line">  hive 表命名 : </span><br><span class="line">   1. 原始数据表，数据挖掘团队建立的 则 采用命名方式为 ods_dm (original data stream, data_mining)开头</span><br><span class="line">   2. 非原始数据表 数据挖掘团队建立的 则 采用命名方式为 mds_dm (modified data stream , data_mining)开头</span><br><span class="line">   3. 临时数据表 数据挖掘团队建立的 则 采用命名方式为 tmp_dm (temp data stream , data_mining)开头</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>2). 配置文件 (conf目录下)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default.conf􏰂 配置公共参数􏰂程序路径􏰄hadoop 用户等􏰁</span><br><span class="line">vars.conf    配置任务参数􏰂 hive表名􏰄参数设置, 以及其他变量等􏰁</span><br><span class="line">alert.conf􏰂   配置邮件报警接收人􏰁</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>3). 输入输出</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 如果存在输入源多种数据格式(rcfile+lzo+textfile)的情况􏰀推荐采用生成临时的统一格式的数据表的方式处理􏰁 </span><br><span class="line">2. hive 表 输出原则上均采用rcfile格式􏰁。</span><br><span class="line">      (当然现在存储便宜，所以很多时候为了操作方便，也可采用text格式存储，但仍然推荐ods层面表统一为rcfile格式)</span><br><span class="line">3. 非hive表 输出采用rcfile或者lzo格式均可􏰁</span><br></pre></td></tr></table></figure>
</li>
<li><p>4). hive 建表示例.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">table_name=<span class="string">"<span class="variable">$&#123;table_ods_e_coupon&#125;</span>"</span></span><br><span class="line">hql=<span class="string">"create external table if not exists <span class="variable">$&#123;table_name&#125;</span></span><br><span class="line">(</span><br><span class="line">    id bigint COMMENT '序号',</span><br><span class="line">    mobile_number varchar(16) COMMENT '领取电子券的手机号',</span><br><span class="line">    coupon_order_number varchar(32) COMMENT '购买电子券时的订单编号',</span><br><span class="line">    dt string</span><br><span class="line">) COMMENT '实际电子券'</span><br><span class="line">row format delimited fields terminated by '\001' collection items terminated by ',' map keys terminated by ':' lines terminated by '\n'</span><br><span class="line">stored as rcfile</span><br><span class="line">location '<span class="variable">$&#123;OSS_URL&#125;</span>/<span class="variable">$&#123;ods_hive_dir&#125;</span>/<span class="variable">$&#123;table_name&#125;</span>';</span><br><span class="line">"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$hql</span>"</span></span><br><span class="line"><span class="variable">$&#123;HIVE&#125;</span> <span class="_">-e</span> <span class="string">"<span class="variable">$hql</span>"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>  说明</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 推荐百万级以上记录的 hive 表建立时指定分区，一般string dt=yyyy-mm-dd  </span><br><span class="line">2. 数据量不大，又不是按照天增加很多数据量的表，则不需要指定分区   </span><br><span class="line">3. 分区 string dt 一般建议为 yyyy-MM-dd 格式  (dt 取自 : date, 默认意思为数据产生日期)</span><br><span class="line">4. hive 建表时指定格式，列与列之间分隔符</span><br><span class="line">5. $&#123;hive_dir&#125;, mds 表为 bucket_name/data_mining/dm/mds/ </span><br><span class="line">                  ods 表为 bucket_name/data_mining/dm/ods/</span><br><span class="line">                          bucket名称 + 部门或大项目组名称 + 团队名称 + 层级</span><br></pre></td></tr></table></figure>
<ul>
<li><p>5). 报警规范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">check_success 为封装好的，检测上一条语句执行执行成功，后自动发报警的函数。</span><br><span class="line">(发报警邮件标题以 模块名--任务脚本路径名--任务状态及原因-日期 来设置。便于快速定位问题)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-开发流程"><a href="#3-开发流程" class="headerlink" title="3. 开发流程"></a>3. 开发流程</h2><h3 id="3-1-拷贝模块-demo"><a href="#3-1-拷贝模块-demo" class="headerlink" title="3.1 拷贝模块 demo"></a>3.1 拷贝模块 demo</h3><ul>
<li>copy 本模块，并重命名模块名</li>
</ul>
<h3 id="3-2-修改配置-conf"><a href="#3-2-修改配置-conf" class="headerlink" title="3.2 修改配置 conf"></a>3.2 修改配置 conf</h3><ul>
<li>修改 conf/default.conf 中用不到的 rds 相关变量</li>
<li>修改 conf/vars.conf 中相关变量</li>
</ul>
<h3 id="3-3-建表语句"><a href="#3-3-建表语句" class="headerlink" title="3.3 建表语句"></a>3.3 建表语句</h3><p>根据 create_table/create_table_e_coupon.sh 样例建表脚本，编写属于你自己的建表脚本 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[data_mining@emr-gw bigdata-offline-demo]$ ll create_table/</span><br><span class="line">total 8</span><br><span class="line">-rwxr-xr-x 1 data_mining hadoop 7946 Dec 13 14:30 create_table_e_coupon.sh</span><br></pre></td></tr></table></figure>
<h3 id="3-4-主脚本"><a href="#3-4-主脚本" class="headerlink" title="3.4 主脚本"></a>3.4 主脚本</h3><ul>
<li>编写 script 下你的主脚本</li>
<li>根据 script/ods_dm_e_coupon.sh 样例脚本，编写属于你自己的主脚本 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[data_mining@emr-gw bigdata-offline-demo]$ ll script/</span><br><span class="line">total 144</span><br><span class="line">-rwxr-xr-x 1 data_mining hadoop   2753 Dec 15 16:58 ods_dm_e_coupon.sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不用拉取数据的，则不需要脚本开头的 source ${util_dir}/my_functions 这句代码。</p>
</blockquote>
<h3 id="3-5-调度脚本"><a href="#3-5-调度脚本" class="headerlink" title="3.5 调度脚本"></a>3.5 调度脚本</h3><ul>
<li>编写 crontab_job 下你的调度脚本</li>
<li>仿照 crontab_job_ods_e_coupon.sh 编写你主脚本对应的 调度脚本</li>
</ul>
<h3 id="3-6-定时任务"><a href="#3-6-定时任务" class="headerlink" title="3.6 定时任务"></a>3.6 定时任务</h3><p>在 linux crontab 中，增加需要定时启动的你的调度脚本 crontab_job_your_script.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[data_mining@emr-gw online]$ crontab -l</span><br><span class="line">10 02 * * * source /etc/bashrc; sh /home/data_mining/hero/online/bigdata-offline-demo/bigdata-offline-demo/crontab_job/crontab_job_ods_e_coupon.sh</span><br></pre></td></tr></table></figure>
<p>注 : 如有其他问题，再商议</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/blair101/bigdata-tools/tree/master/bigdata-offline-demo" target="_blank" rel="external">blair’s github bigdata_offline_demo</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MapReduce for Python]]></title>
      <url>http://iequa.com/2018/01/30/hadoop/hadoop-mr-for-python/</url>
      <content type="html"><![CDATA[<p>我们可以用 hadoop-streaming 的方式，通过 python 等其他语言来编写 MR 程序.</p>
<a id="more"></a>
<h2 id="Map阶段：mapper-py"><a href="#Map阶段：mapper-py" class="headerlink" title="Map阶段：mapper.py"></a>Map阶段：mapper.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    words = line.split()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        print(<span class="string">"%s"</span> % word)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 这里仅仅是一个例子，只输出了第一列</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了是脚本可执行，增加mapper.py的可执行权限</p>
</blockquote>
<p>当然，<code>Map</code>阶段， 你也可以不作处理原样输出: 只写一个 <code>cat</code></p>
<h2 id="Reduce阶段：reducer-py"><a href="#Reduce阶段：reducer-py" class="headerlink" title="Reduce阶段：reducer.py"></a>Reduce阶段：reducer.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Copyright 2013 x Inc. All Rights Reserved</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Blair Chan'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> constant</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> EsHelper <span class="keyword">import</span> EsHelper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_user_basic_consume_info</span><span class="params">(items,  esHelper)</span>:</span></span><br><span class="line"></span><br><span class="line">    basic_consume_info_doc = get_user_basic_consume_info_doc(items)</span><br><span class="line">    <span class="keyword">if</span> basic_consume_info_doc <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">    _id = basic_consume_info_doc[<span class="string">'mobile_number'</span>]</span><br><span class="line">    basic_consume_info_index = <span class="string">"basic_consume_info_index"</span></span><br><span class="line"></span><br><span class="line">    esHelper.index(index=basic_consume_info_index, doc_type=basic_consume_info_index, id=_id, data=basic_consume_info_doc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_basic_consume_info_doc</span><span class="params">(items)</span>:</span></span><br><span class="line">    doc = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = &#123;</span><br><span class="line">            <span class="string">"mobile_number"</span>: items[<span class="number">0</span>],</span><br><span class="line">            <span class="string">"first_consume_time"</span>: items[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"Exist Exception : %s About get_user_basic_consume_info_doc, mobile_number: %s"</span> % (str(e), mobile_number))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> doc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    esHelper = EsHelper(constant.ES_URL)</span><br><span class="line">    success_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line"></span><br><span class="line">        line = line.strip()</span><br><span class="line">        items = line.split(<span class="string">'\001'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(items) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        insert_user_basic_consume_info(items, esHelper)</span><br><span class="line">        success_sum = success_sum + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Success:%d"</span> % success_sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat data.txt | python mapper.py | sort | reducer.py</span><br></pre></td></tr></table></figure>
<h2 id="提交Hadoop"><a href="#提交Hadoop" class="headerlink" title="提交Hadoop"></a>提交Hadoop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`/.. &amp;&amp; wk_dir=`<span class="built_in">pwd</span>` &amp;&amp; <span class="built_in">cd</span> -</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$&#123;wk_dir&#125;</span>/util/env</span><br><span class="line"></span><br><span class="line">input_file=<span class="string">"<span class="variable">$&#123;OSS_URL&#125;</span>/<span class="variable">$&#123;mds_hive_dir&#125;</span>/<span class="variable">$&#123;table_user_basic_consume_info&#125;</span>/*"</span></span><br><span class="line">output_file=<span class="string">"<span class="variable">$&#123;OSS_URL&#125;</span>/<span class="variable">$&#123;tmp_hive_dir&#125;</span>/<span class="variable">$&#123;table_user_basic_consume_info&#125;</span>/dt=<span class="variable">$&#123;d1&#125;</span>"</span></span><br><span class="line">reducer=<span class="string">"reducer.py"</span></span><br><span class="line">reducer_depend1=<span class="string">"constant.py"</span></span><br><span class="line">reducer_depend2=<span class="string">"EsHelper.py"</span></span><br><span class="line">archive=<span class="string">"<span class="variable">$&#123;OSS_URL&#125;</span>/share/packages/elasticsearch-5.0.0.tar.gz#elasticsearch-5.0.0"</span> </span><br><span class="line"><span class="comment">## archive 表示的依赖包需要上传到 hdfs 上，#后面表示的是解压后的目录名</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;HADOOP&#125;</span> fs -rmr <span class="variable">$&#123;output_file&#125;</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">"<span class="variable">$&#123;HADOOP&#125;</span> jar <span class="variable">$&#123;hadoop_streaming_jar&#125;</span></span><br><span class="line">     -D mapred.map.tasks=100</span><br><span class="line">     -D mapred.reduce.tasks=100</span><br><span class="line">     -D stream.map.input.ignoreKey=true</span><br><span class="line">     -input <span class="variable">$&#123;input_file&#125;</span></span><br><span class="line">     -output <span class="variable">$&#123;output_file&#125;</span></span><br><span class="line">     -file <span class="variable">$&#123;reducer&#125;</span></span><br><span class="line">     -file <span class="variable">$&#123;reducer_depend1&#125;</span></span><br><span class="line">     -file <span class="variable">$&#123;reducer_depend2&#125;</span></span><br><span class="line">     -mapper cat</span><br><span class="line">     -reducer <span class="variable">$&#123;reducer&#125;</span></span><br><span class="line">     -cacheArchive <span class="variable">$&#123;archive&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>_ex <span class="string">"<span class="variable">$cmd</span>"</span></span><br><span class="line"><span class="variable">$cmd</span></span><br><span class="line">check_success</span><br></pre></td></tr></table></figure>
<blockquote>
<p>hadoop_streaming_jar=”/home/data_mining/share/packages/hadoop2/hadoop-streaming-2.7.2.jar”</p>
<p>以上仅仅是一个例子，虽然插入 ES 出现异常，但本篇仅仅说明如何用 python 写 mapreduce 程序</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.cnblogs.com/kaituorensheng/p/3826114.html" target="_blank" rel="external">用python写MapReduce函数——以WordCount为例</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python copy & deepcopy]]></title>
      <url>http://iequa.com/2018/01/24/python/py-language-13-copy/</url>
      <content type="html"><![CDATA[<p>对象的赋值，拷贝（深/浅拷贝）之间是有差异的，如果使用不当，可能产生意外的结果.</p>
<a id="more"></a>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>什么是<code>id</code>？一个对象的<code>id</code>值在<code>CPython</code>解释器里就代表它在内存中的`地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line"></span><br><span class="line">print(id(b))</span><br><span class="line"></span><br><span class="line">print(id(a)==id(b))    <span class="comment">#附值后，两者的id相同，为true。</span></span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>]=<span class="number">222222</span>  <span class="comment"># 此时，改变b的第一个值，也会导致a值改变。</span></span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure>
<pre><code>4449594888
4449594888
True
[222222, 2, 3] [222222, 2, 3]
</code></pre><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>当使用浅拷贝时，python 只是拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">c=copy.copy(a)  <span class="comment">#拷贝了a的外围对象本身,</span></span><br><span class="line">print(id(c))</span><br><span class="line"></span><br><span class="line">print(id(a)==id(c))  <span class="comment">#id 改变 为false</span></span><br><span class="line"></span><br><span class="line">c[<span class="number">1</span>]=<span class="number">22222</span>   <span class="comment">#此时，我去改变c的第二个值时，a不会被改变。</span></span><br><span class="line">print(a,c)</span><br><span class="line"><span class="comment"># [1, 2, 3] [1, 22222, 3] #a值不变,c的第二个值变了，这就是copy和‘==’的不同</span></span><br></pre></td></tr></table></figure>
<pre><code>4449594440
False
[1, 2, 3] [1, 22222, 3]
</code></pre><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p><code>deepcopy</code> 对外围和内部元素都进行了拷贝对象本身，而不是对象的引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#copy.copy()</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]  <span class="comment">#第三个值为列表[3,4],即内部元素</span></span><br><span class="line">d=copy.copy(a) <span class="comment">#浅拷贝a中的[3，4]内部元素的引用，非内部元素对象的本身</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)==id(d)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">2</span>])==id(d[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">3333</span>  <span class="comment">#改变a中内部原属列表中的第一个值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d             <span class="comment">#这时d中的列表元素也会被改变</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3333</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#copy.deepcopy()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=copy.deepcopy(a) <span class="comment">#e为深拷贝了a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">333</span> <span class="comment">#改变a中内部元素列表第一个的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3333</span>, <span class="number">4</span>]] <span class="comment">#因为时深拷贝，这时e中内部元素[]列表的值不会因为a中的值改变而改变</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python try … except … as …]]></title>
      <url>http://iequa.com/2018/01/24/python/py-language-12-try-exception/</url>
      <content type="html"><![CDATA[<p>try:, except … as …:</p>
<a id="more"></a>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>输出错误：<code>try:, except ... as ...</code>: 看如下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file=open(<span class="string">'eeee.txt'</span>,<span class="string">'r'</span>)  <span class="comment">#会报错的代码</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># 将报错存储在 e 中</span></span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>
<pre><code>[Errno 2] No such file or directory: &apos;eeee.txt&apos;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file=open(<span class="string">'eeee.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    response = input(<span class="string">'do you want to create a new file:'</span>)</span><br><span class="line">    <span class="keyword">if</span> response==<span class="string">'y'</span>:</span><br><span class="line">        file=open(<span class="string">'eeee.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.write(<span class="string">'ssss'</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<pre><code>[Errno 2] No such file or directory: &apos;eeee.txt&apos;
do you want to create a new file:y
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 函数式编程 zip、lambda、map...]]></title>
      <url>http://iequa.com/2018/01/24/python/py-language-11-zip-lambda-map/</url>
      <content type="html"><![CDATA[<p>zip、lambda、map…</p>
<a id="more"></a>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p><code>zip</code> 函数接受任意多个（包括0个和1个）序列作为参数，合并后返回一个tuple列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">ab=zip(a,b)</span><br><span class="line">print(list(ab))  <span class="comment">#需要加list来可视化这个功能</span></span><br></pre></td></tr></table></figure>
<pre><code>[(1, 4), (2, 5), (3, 6)]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">ab=zip(a,b)</span><br><span class="line"></span><br><span class="line">print(list(ab))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(a,b):</span><br><span class="line">     print(i/<span class="number">2</span>,j*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>[(1, 4), (2, 5), (3, 6)]
0.5 8
1.0 10
1.5 12
</code></pre><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p><code>lambda</code> 定义一个简单的函数，实现简化代码的功能，看代码会更好理解。</p>
<p><code>fun = lambda x,y : x+y</code>, 冒号前的<code>x</code>,<code>y</code>为自变量，冒号后<code>x+y</code>为具体运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fun= <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">x=int(input(<span class="string">'x='</span>))    <span class="comment">#这里要定义int整数，否则会默认为字符串</span></span><br><span class="line">y=int(input(<span class="string">'y='</span>))</span><br><span class="line">print(fun(x,y))</span><br></pre></td></tr></table></figure>
<pre><code>x=4
y=6
10
</code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map</code> 是把 <code>函数</code> 和 <code>参数</code> 绑定在一起.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> (x+y)</span><br><span class="line"></span><br><span class="line">print(list(map(fun,[<span class="number">1</span>],[<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line">list(map(fun,[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>[3]
[4, 6]
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Bar]]></title>
      <url>http://iequa.com/2018/01/24/python/py-matplotlib-9-bar/</url>
      <content type="html"><![CDATA[<p>上篇学习了如何 plot Scatter，今天我们讲述如何 plot <code>Bar</code></p>
<a id="more"></a>
<p>今日目标 : 柱状图分成上下两部分，每一个柱体上都有相应的数值标注，并且取消坐标轴的显示.</p>
<h2 id="生成基本图形"><a href="#生成基本图形" class="headerlink" title="生成基本图形"></a>生成基本图形</h2><p>向上向下生成<code>12个数据</code>，<code>X</code> 为 [0,11] 的整数 ，<code>Y</code>是均匀分布的随机数据。 使用的函数是<code>plt.bar</code>，参数为<code>X</code>和<code>Y</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">X = np.arange(n)</span><br><span class="line"></span><br><span class="line">Y1 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1)</span><br><span class="line">plt.bar(X, -Y2)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-.5</span>, n)</span><br><span class="line">plt.xticks(())</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">-1.25</span>, <span class="number">1.25</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-9-bar-1-output_1_0.png" height="100" width="550"><br></div>

<h2 id="加颜色和数据"><a href="#加颜色和数据" class="headerlink" title="加颜色和数据"></a>加颜色和数据</h2><p>用<code>facecolor</code>设置主体颜色，<code>edgecolor</code>设置边框颜色为白色，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'#9999ff'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'#ff9999'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-9-bar-2-output_3_0.png" height="100" width="550"><br></div>

<p>接下来我们用函数<code>plt.text</code>分别在柱体上方（下方）加上数值，用<code>%.2f</code>保留两位小数，横向居中对齐<code>ha=&#39;center&#39;</code>，纵向底部（顶部）对齐<code>va=&#39;bottom&#39;</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'#9999ff'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'#ff9999'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x + <span class="number">0.4</span>, y + <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x + <span class="number">0.4</span>, -y - <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-9-bar-3-output_5_0.png" height="100" width="550"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Scatter]]></title>
      <url>http://iequa.com/2018/01/24/python/py-matplotlib-8-scatter/</url>
      <content type="html"><![CDATA[<p>上篇学习了如何 plot 线，今天学习如何 plot <code>Scatter</code> 散点图</p>
<a id="more"></a>
<p>引入模块<code>numpy</code>用来产生一些随机数据。生成<code>1024</code>个呈标准正态分布的二维数据组 (平均数是<code>0</code>，方差为<code>1</code>) 作为一个数据集，并图像化这个数据集。每一个点的颜色值用<code>T</code>来表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span>    <span class="comment"># data size</span></span><br><span class="line"></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的X值</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的Y值</span></span><br><span class="line"></span><br><span class="line">T = np.arctan2(Y,X) <span class="comment"># for color value</span></span><br></pre></td></tr></table></figure>
<p>数据集生成完毕，现在来用 <code>scatter</code> <code>plot</code> 这个点集</p>
<p>输入<code>X</code>和<code>Y</code>作为location，<code>size=75</code>，颜色为<code>T</code>，<code>color map</code> 用默认值，透明度<code>alpha</code> 为 50%。 x轴显示范围定位(-1.5，1.5)，并用<code>xtick()</code> 函数来隐藏<code>x</code>坐标轴，<code>y</code>轴同理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.xticks(())  <span class="comment"># ignore xticks</span></span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.yticks(())  <span class="comment"># ignore yticks</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-8-scatter-1.png" height="100" width="700"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Tick bbox]]></title>
      <url>http://iequa.com/2018/01/23/python/py-matplotlib-7-tick/</url>
      <content type="html"><![CDATA[<p>图中的内容较多，可通过设置相关内容的<code>透明度</code>来使图片更易于观察，也即是本节中的<code>bbox</code>参数设置来调节图像信息.</p>
<a id="more"></a>
<h2 id="生成图形"><a href="#生成图形" class="headerlink" title="生成图形"></a>生成图形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">0.1</span>*x</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># 在 plt 2.0.2 或更高的版本中, 设置 zorder 给 plot 在 z 轴方向排序</span></span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">10</span>, zorder=<span class="number">1</span>)</span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-7-tick-output_1_0.png" height="100" width="700"><br></div>

<h2 id="调整坐标-bbox"><a href="#调整坐标-bbox" class="headerlink" title="调整坐标 bbox"></a>调整坐标 bbox</h2><p>然后对被遮挡的图像调节相关透明度，本例中设置 x轴 和 y轴 的刻度数字进行透明度设置</p>
<p>其中<code>label.set_fontsize(12)</code>重新调节字体大小，<code>bbox</code>设置目的内容的透明度相关参数，<code>facecolor</code>调节 <code>box</code> 前景色，<code>edgecolor</code> 设置边框， 本处设置边框为无，<code>alpha</code>设置透明度. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 在 plt 2.0.2 或更高的版本中, 设置 zorder 给 plot 在 z 轴方向排序</span></span><br><span class="line">    label.set_bbox(dict(facecolor=<span class="string">'white'</span>, edgecolor=<span class="string">'None'</span>, alpha=<span class="number">0.7</span>, zorder=<span class="number">2</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-7-tick-output_3_0.png" height="100" width="700"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Annotation]]></title>
      <url>http://iequa.com/2018/01/23/python/py-matplotlib-6-Annotation/</url>
      <content type="html"><![CDATA[<p>当图线中某些特殊地方需要标注时，我们可以使用 <code>annotation</code>.  </p>
<p>matplotlib 中的 <code>annotation</code> 有两种方法， 一种是用 plt 里面的 <code>annotate</code>，一种是直接用 plt 里面的 <code>text</code> 来写标注.</p>
<a id="more"></a>
<h2 id="画出基本图"><a href="#画出基本图" class="headerlink" title="画出基本图"></a>画出基本图</h2><p>首先，我们在坐标轴中绘制一条直线.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-6-annotation-output_1_0.png" height="100" width="500"><br></div>

<h2 id="移动坐标"><a href="#移动坐标" class="headerlink" title="移动坐标"></a>移动坐标</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动坐标</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-6-annotation-output_3_0.png" height="100" width="550"><br></div>

<p>然后标注出点<code>(x0, y0)</code>的位置信息. 用 <code>plt.plot([x0, x0,], [0, y0,], &#39;k--&#39;, linewidth=2.5)</code> 画出一条垂直于x轴的虚线.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动坐标</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">1</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###   plt.plot([x0, x0,], [0, y0,], 'k--', linewidth=2.5) 画出一条垂直于x轴的虚线.  ###</span></span><br><span class="line"></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-6-annotation-output_5_0.png" height="100" width="550"><br></div>

<h2 id="加注释-annotate"><a href="#加注释-annotate" class="headerlink" title="加注释 annotate"></a>加注释 annotate</h2><p>接下来我们就对<code>(x0, y0)</code>这个点进行标注.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动坐标</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">1</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############## 添加注释 annotate ###############</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0, xy=(x0, y0), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">30</span>, <span class="number">-30</span>),</span><br><span class="line">             textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-6-annotation-output_7_0.png" height="100" width="550"><br></div>

<p>其中参数 <code>xycoords=&#39;data&#39;</code> 是说基于数据的值来选位置, <code>xytext=(+30, -30)</code> 和 <code>textcoords=&#39;offset points&#39;</code> 对于标注位置的描述 和 <code>xy</code> 偏差值, <code>arrowprops</code>是对图中箭头类型的一些设置.</p>
<h2 id="加注释-text"><a href="#加注释-text" class="headerlink" title="加注释 text"></a>加注释 text</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.text(<span class="number">-3.7</span>, <span class="number">3</span>, <span class="string">r'$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$'</span>,</span><br><span class="line">         fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>: <span class="string">'r'</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>Text(-3.7,3,&apos;$This\\ is\\ the\\ some\\ text. \\mu\\ \\sigma_i\\ \\alpha_t$&apos;)
</code></pre><p>其中<code>-3.7, 3,</code>是选取text的位置, 空格需要用到转字符<code>\</code> ,<code>fontdict</code>设置文本字体.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动坐标</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">1</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############## 添加注释 annotate ###############</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0, xy=(x0, y0), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">30</span>, <span class="number">-30</span>),</span><br><span class="line">             textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############# 添加注释 text #################</span></span><br><span class="line"></span><br><span class="line">plt.text(<span class="number">-3.7</span>, <span class="number">3</span>, <span class="string">r'$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$'</span>,</span><br><span class="line">         fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>: <span class="string">'r'</span>&#125;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-6-annotation-output_11_0.png" height="100" width="500"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Legend]]></title>
      <url>http://iequa.com/2018/01/23/python/py-matplotlib-5-legend/</url>
      <content type="html"><![CDATA[<p>matplotlib 中的 <code>legend</code> 图例就是为了展示出每个数据对应的<code>图像名称</code>,可读性更好.</p>
<a id="more"></a>
<h2 id="添加图例-legend"><a href="#添加图例-legend" class="headerlink" title="添加图例 legend"></a>添加图例 legend</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment">#set x limits</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set new sticks</span></span><br><span class="line">new_sticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">plt.xticks(new_sticks)</span><br><span class="line"><span class="comment"># set tick labels</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],</span><br><span class="line">           [<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>([&lt;matplotlib.axis.YTick at 0x1195c3358&gt;,
  &lt;matplotlib.axis.YTick at 0x112681080&gt;,
  &lt;matplotlib.axis.YTick at 0x1195ce710&gt;,
  &lt;matplotlib.axis.YTick at 0x1195f5240&gt;,
  &lt;matplotlib.axis.YTick at 0x1195fc550&gt;],
 &lt;a list of 5 Text yticklabel objects&gt;)
</code></pre><p>对图中的两条线绘制图例，首先我们设置两条线的类型等信息（蓝色实线与红色虚线).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set line syles</span></span><br><span class="line">l1, = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br></pre></td></tr></table></figure>
<p>需要注意的是 <code>l1,</code> <code>l2,</code> 要以<code>逗号</code>结尾, 因为 <code>plt.plot()</code> 返回的是一个list.</p>
<p><code>legend</code> 将要显示的信息来自于上面代码中的 <code>label</code>. 所以我们只需要简单写一下代码, <code>plt</code> 就能自动的为我们添加图例.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-5-legend-1.png" height="100" width="650"><br></div>

<p>参数 <code>loc=&#39;upper right&#39;</code> 表示图例将添加在图中的右上角.</p>
<h2 id="调整位置和名称"><a href="#调整位置和名称" class="headerlink" title="调整位置和名称"></a>调整位置和名称</h2><p>如果我们想单独修改之前的 <code>label</code> 信息, 给不同类型的线条设置图例信息. 我们可以在 <code>plt.legend</code> 输入更多参数. 如果以下面这种形式添加 <code>legend</code>, 我们需要确保, 在上面的代码 <code>plt.plot(x, y2, label=&#39;linear line&#39;)</code> 和 <code>plt.plot(x, y1, label=&#39;square line&#39;)</code> 中有用变量 l1 和 l2 分别存储起来. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.legend(handles=[l1, l2], labels=[<span class="string">'up'</span>, <span class="string">'down'</span>],  loc=<span class="string">'best'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-5-legend-2.png" height="100" width="650"><br></div>

<p>这样我们就能分别重新设置线条对应的 <code>label</code> 了.</p>
<p>其中’loc’参数有多种，’best’表示自动分配最佳位置，其余的如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'best'</span> : <span class="number">0</span>,          </span><br><span class="line"><span class="string">'upper right'</span>  : <span class="number">1</span>,</span><br><span class="line"><span class="string">'upper left'</span>   : <span class="number">2</span>,</span><br><span class="line"><span class="string">'lower left'</span>   : <span class="number">3</span>,</span><br><span class="line"><span class="string">'lower right'</span>  : <span class="number">4</span>,</span><br><span class="line"><span class="string">'right'</span>        : <span class="number">5</span>,</span><br><span class="line"><span class="string">'center left'</span>  : <span class="number">6</span>,</span><br><span class="line"><span class="string">'center right'</span> : <span class="number">7</span>,</span><br><span class="line"><span class="string">'lower center'</span> : <span class="number">8</span>,</span><br><span class="line"><span class="string">'upper center'</span> : <span class="number">9</span>,</span><br><span class="line"><span class="string">'center'</span>       : <span class="number">10</span>,</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Coordinate axis]]></title>
      <url>http://iequa.com/2018/01/23/python/py-matplotlib-4-coordinate_axis/</url>
      <content type="html"><![CDATA[<p>如何移动 matplotlib 中 axis 坐标轴的位置.</p>
<a id="more"></a>
<h2 id="设置名字和位置"><a href="#设置名字和位置" class="headerlink" title="设置名字和位置"></a>设置名字和位置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>使用 <code>np.linspace</code> 定义 <code>x</code> ：范围是(-3,3);个数是50.<br>仿真一维数据组(<code>x</code> ,<code>y1</code>)表示曲线1.  仿真一维数据组(<code>x</code> ,<code>y2</code>)表示曲线2.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>使用<code>plt.figure</code>定义一个图像窗口. </p>
<p>使用<code>plt.plot</code>画(<code>x</code> ,<code>y2</code>)曲线. 使用<code>plt.plot</code>画(<code>x</code> ,<code>y1</code>)曲线，曲线的颜色属性(<code>color</code>)为红色; 曲线的宽度(<code>linewidth</code>) 为 1.0; 曲线的类型(<code>linestyle</code>)为虚线.   </p>
<p>使用<code>plt.xlim</code>设置<code>x</code>坐标轴范围: (-1, 2); 使用<code>plt.ylim</code>设置<code>y</code>坐标轴范围: (-2, 3);   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<pre><code>(-2, 3)
</code></pre><p>使用<code>np.linspace</code>定义范围以及个数：范围是(-1,2);个数是5. </p>
<p>使用<code>plt.xticks</code>设置<code>x</code>轴刻度：范围是(-1,2);个数是5.<br>使用<code>plt.yticks</code>设置<code>y</code>轴刻度以及名称: 刻度为[-2, -1.8, -1, 1.22, 3]; 对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’].</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">'$really\ bad$'</span>, <span class="string">'$bad$'</span>, <span class="string">'$normal$'</span>, <span class="string">'$good$'</span>, <span class="string">'$really\ good$'</span>])</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>function</th>
<th>desc</th>
<th>设置效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>plt.gca</code></td>
<td>获取当前坐标轴信息</td>
<td>-</td>
</tr>
<tr>
<td><code>.spines</code></td>
<td>设置边框</td>
<td>右侧边框 &amp; 上边框</td>
</tr>
<tr>
<td><code>.set_color</code></td>
<td>设置边框颜色</td>
<td>默认白色</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-4-ax-4_1.png" height="100" width="700"><br></div>

<h2 id="调整坐标轴"><a href="#调整坐标轴" class="headerlink" title="调整坐标轴"></a>调整坐标轴</h2><p>使用 <code>.xaxis.set_ticks_position</code>设置<code>x</code>坐标刻度数字或名称的位置：<code>bottom</code>.（所有位置：<code>top</code>，<code>bottom</code>，<code>both</code>，<code>default</code>，<code>none</code>）<br>使用 <code>.spines</code> 设置边框：<code>x</code>轴；<br>使用 <code>.set_position</code> 设置边框位置：<code>y=0</code> 的位置；（位置所有属性：<code>outward</code>，<code>axes</code>，<code>data</code>）  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-4-ax-4_2.png" height="100" width="700"><br></div>

<p>使用<code>.yaxis.set_ticks_position</code>设置<code>y</code>坐标刻度数字或名称的位置：<code>left</code>.（所有位置：<code>left</code>，<code>right</code>，<code>both</code>，<code>default</code>，<code>none</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure>
<p>使用<code>.spines</code>设置边框：<code>y</code>轴;<br>使用<code>.set_position</code>设置边框位置：<code>x=0</code>的位置；（位置所有属性：<code>outward</code>，<code>axes</code>，<code>data</code>）<br>使用<code>plt.show</code>显示图像.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-4-ax-4_3.png" height="100" width="700"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pickle]]></title>
      <url>http://iequa.com/2018/01/19/python/py-language-14-pickle/</url>
      <content type="html"><![CDATA[<p>Python 语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，可以使用json模块</p>
<a id="more"></a>
<p>pickle 是一个 python 中, 压缩/保存/提取 文件的模块. 最一般的使用方式非常简单. </p>
<h2 id="pickle-保存"><a href="#pickle-保存" class="headerlink" title="pickle 保存"></a>pickle 保存</h2><p>字典和列表都是能被保存的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">a_dict = &#123;<span class="string">'da'</span>: <span class="number">111</span>, <span class="number">2</span>: [<span class="number">23</span>,<span class="number">1</span>,<span class="number">4</span>], <span class="string">'23'</span>: &#123;<span class="number">1</span>:<span class="number">2</span>,<span class="string">'d'</span>:<span class="string">'sad'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle a variable to a file</span></span><br><span class="line">file = open(<span class="string">'pickle_example.pickle'</span>, <span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(a_dict, file)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>
<p><code>pickle.dump</code> 你要保存的东西去这个打开的 <code>file</code>. </p>
<p>最后关闭 <code>file</code> 你就会发现你的文件目录里多了一个 <code>pickle_example.pickle</code> 文件, 这就是那个字典了.</p>
<h2 id="pickle-提取"><a href="#pickle-提取" class="headerlink" title="pickle 提取"></a>pickle 提取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reload a file to a variable</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pickle_example.pickle'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    a_dict1 =pickle.load(file)</span><br><span class="line"></span><br><span class="line">print(a_dict1)</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;da&apos;: 111, 2: [23, 1, 4], &apos;23&apos;: {1: 2, &apos;d&apos;: &apos;sad&apos;}}
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Save Model]]></title>
      <url>http://iequa.com/2018/01/10/python/py-sklearn-7-save-model/</url>
      <content type="html"><![CDATA[<p>我们训练好了一个 <code>Model</code> 以后总需要保存和再次预测, 所以保存和读取我们的sklearn model也是同样重要的一步。<br>这次主要介绍两种保存Model的模块 <code>pickle</code> 与 <code>joblib</code></p>
<a id="more"></a>
<h2 id="pickle-保存"><a href="#pickle-保存" class="headerlink" title="pickle 保存"></a>pickle 保存</h2><p>首先简单建立与训练一个 <code>SVC</code> Model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">clf = svm.SVC()</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X, y = iris.data, iris.target</span><br><span class="line">clf.fit(X,y)</span><br></pre></td></tr></table></figure>
<pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
  decision_function_shape=&apos;ovr&apos;, degree=3, gamma=&apos;auto&apos;, kernel=&apos;rbf&apos;,
  max_iter=-1, probability=False, random_state=None, shrinking=True,
  tol=0.001, verbose=False)
</code></pre><p>使用 <code>pickle</code> 来保存与读取训练好的 <code>Model</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle <span class="comment">#pickle模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存Model(注:save文件夹要预先建立，否则会报错)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'save/clf.pickle'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(clf, f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取Model</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'save/clf.pickle'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    clf2 = pickle.load(f)</span><br><span class="line">    <span class="comment">#测试读取后的Model</span></span><br><span class="line">    print(clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0]</span></span><br></pre></td></tr></table></figure>
<pre><code>[0]
</code></pre><h2 id="joblib-保存"><a href="#joblib-保存" class="headerlink" title="joblib 保存"></a>joblib 保存</h2><p><code>joblib</code> 是 sklearn的外部模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib <span class="comment">#jbolib模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存Model(注:save文件夹要预先建立，否则会报错)</span></span><br><span class="line">joblib.dump(clf, <span class="string">'save/clf.pkl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取Model</span></span><br><span class="line">clf3 = joblib.load(<span class="string">'save/clf.pkl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试读取后的Model</span></span><br><span class="line">print(clf3.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0]</span></span><br></pre></td></tr></table></figure>
<pre><code>[0]
</code></pre><p><code>joblib</code> 在使用上比较容易，读取速度也相对<code>pickle</code>快</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Cross-validation 3]]></title>
      <url>http://iequa.com/2018/01/09/python/py-sklearn-6-cross-validation-3/</url>
      <content type="html"><![CDATA[<p>交叉验证(cross validation)让我们知道在机器学习中验证是有多么的重要, 这一次的 sklearn 中我们用到了<code>sklearn.learning_curve</code>当中的另外一种, 叫做<code>validation_curve</code>,用这一种曲线我们就能更加直观看出改变模型中的参数的时候有没有过拟合(overfitting)的问题了. 这也是可以让我们更好的选择参数的方法.</p>
<a id="more"></a>
<h2 id="validation-curve-检视过拟合"><a href="#validation-curve-检视过拟合" class="headerlink" title="validation_curve 检视过拟合"></a>validation_curve 检视过拟合</h2><p>验证<code>SVC</code>中的一个参数 <code>gamma</code> 在什么范围内能使 <code>model</code> 产生好的结果. 以及过拟合和 <code>gamma</code> 取值的关系.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.learning_curve <span class="keyword">import</span> validation_curve <span class="comment">#validation_curve模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits </span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#digits数据集</span></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立参数测试集</span></span><br><span class="line">param_range = np.logspace(<span class="number">-6</span>, <span class="number">-2.3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用validation_curve快速找出参数对模型的影响</span></span><br><span class="line">train_loss, test_loss = validation_curve(</span><br><span class="line">    SVC(), X, y, param_name=<span class="string">'gamma'</span>, param_range=param_range, cv=<span class="number">10</span>, scoring=<span class="string">'mean_squared_error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#平均每一轮的平均方差</span></span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化图形</span></span><br><span class="line">plt.plot(param_range, train_loss_mean, <span class="string">'o-'</span>, color=<span class="string">"r"</span>,</span><br><span class="line">         label=<span class="string">"Training"</span>)</span><br><span class="line">plt.plot(param_range, test_loss_mean, <span class="string">'o-'</span>, color=<span class="string">"g"</span>,</span><br><span class="line">        label=<span class="string">"Cross-validation"</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"gamma"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loss"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"best"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-6-cross-validation-3-output_1_1.png" width="400"><br></div>

<p>由图中可以明显看到 <code>gamma</code> 值大于 <code>0.001</code>，模型就会有过拟合(<code>Overfitting</code>)的问题。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Cross-validation 2]]></title>
      <url>http://iequa.com/2018/01/09/python/py-sklearn-6-cross-validation-2/</url>
      <content type="html"><![CDATA[<p>Sklearn 中的 <code>learning curve</code> 可以很直观的看出我们的 <code>model</code> 学习的进度, 对比发现有没有 <code>overfitting</code> 的问题. 然后我们可以对我们的 <code>model</code> 进行调整, 克服 <code>overfitting</code> 的问题.</p>
<a id="more"></a>
<h2 id="Learning-curve-检视过拟合"><a href="#Learning-curve-检视过拟合" class="headerlink" title="Learning curve 检视过拟合"></a>Learning curve 检视过拟合</h2><p>加载对应模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.learning_curve <span class="keyword">import</span> learning_curve <span class="comment">#学习曲线模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits <span class="comment">#digits数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC <span class="comment">#Support Vector Classifier</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#可视化模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>加载digits数据集，其包含的是手写体的数字，从0到9。<br>数据集总共有1797个样本，每个样本由64个特征组成， 分别为其手写体对应的8×8像素表示，每个特征取值0~16。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(X[0]))</span></span><br></pre></td></tr></table></figure>
<p>观察样本由小到大的学习曲线变化, 采用K折交叉验证 <code>cv=10</code>, 选择平均方差检视模型效能 <code>scoring=&#39;mean_squared_error&#39;</code>, 样本由小到大分成5轮检视学习曲线(<code>10%</code>, <code>25%</code>, <code>50%</code>, <code>75%</code>, <code>100%</code>):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_sizes, train_loss, test_loss = learning_curve(</span><br><span class="line">    SVC(gamma=<span class="number">0.001</span>), X, y, cv=<span class="number">10</span>, scoring=<span class="string">'mean_squared_error'</span>,</span><br><span class="line">    train_sizes=[<span class="number">0.1</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#平均每一轮所得到的平均方差(共5轮，分别为样本10%、25%、50%、75%、100%)</span></span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>可视化图形:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(train_sizes, train_loss_mean, <span class="string">'o-'</span>, color=<span class="string">"r"</span>,</span><br><span class="line">         label=<span class="string">"Training"</span>)</span><br><span class="line">plt.plot(train_sizes, test_loss_mean, <span class="string">'o-'</span>, color=<span class="string">"g"</span>,</span><br><span class="line">        label=<span class="string">"Cross-validation"</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"Training examples"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loss"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"best"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-6-cross-validation-2-output_7_0.png" width="400"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Cross-validation 1]]></title>
      <url>http://iequa.com/2018/01/08/python/py-sklearn-6-cross-validation-1/</url>
      <content type="html"><![CDATA[<p>Sklearn 中的 <code>Cross-validation</code> 对于我们选择正确的 <code>Model</code> 和 <code>Model 的参数</code>是非常有用， 有了它我们能直观的看出不同 Model 或者参数对结构准确度的影响。</p>
<a id="more"></a>
<h2 id="Model-基础验证法"><a href="#Model-基础验证法" class="headerlink" title="Model 基础验证法"></a>Model 基础验证法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris <span class="comment"># iris数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="comment"># 分割数据模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier <span class="comment"># K最近邻(kNN，k-NearestNeighbor)分类算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载iris数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#分割数据并</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立模型</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将准确率打印出</span></span><br><span class="line">print(knn.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<pre><code>0.973684210526
</code></pre><p>可以看到基础验证的准确率为 <code>0.973684210526</code></p>
<h2 id="Model-Cross-Validation"><a href="#Model-Cross-Validation" class="headerlink" title="Model Cross Validation"></a>Model Cross Validation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> cross_val_score <span class="comment"># K折交叉验证模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用K折交叉验证模块</span></span><br><span class="line">scores = cross_val_score(knn, X, y, cv=<span class="number">5</span>, scoring=<span class="string">'accuracy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将5次的预测准确率打印出</span></span><br><span class="line">print(scores)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将5次的预测准确平均率打印出</span></span><br><span class="line">print(scores.mean())</span><br></pre></td></tr></table></figure>
<pre><code>[ 0.96666667  1.          0.93333333  0.96666667  1.        ]
0.973333333333
</code></pre><p>可以看到交叉验证的准确平均率为 <code>0.973333333333</code></p>
<h2 id="Aaccuracy-准确率判断"><a href="#Aaccuracy-准确率判断" class="headerlink" title="Aaccuracy 准确率判断"></a>Aaccuracy 准确率判断</h2><p>一般来说 <code>准确率(accuracy)</code> 会用于判断分类(Classification)模型的好坏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#可视化模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立测试参数集</span></span><br><span class="line">k_range = range(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line">k_scores = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#藉由迭代的方式来计算不同参数对模型的影响，并返回交叉验证后的平均准确率</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">    scores = cross_val_score(knn, X, y, cv=<span class="number">10</span>, scoring=<span class="string">'accuracy'</span>)</span><br><span class="line">    k_scores.append(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化数据</span></span><br><span class="line">plt.plot(k_range, k_scores)</span><br><span class="line">plt.xlabel(<span class="string">'Value of K for KNN'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cross-Validated Accuracy'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-6-cross-validation-1-output_6_0.png" width="400"><br></div>

<p>从图中得知，选择 <code>12~18</code> 的 <code>k</code> 值最好。高过 <code>18</code> 之后，准确率开始下降则是因为过拟合(<code>Over fitting</code>)的问题。</p>
<h2 id="Mean-squared-error"><a href="#Mean-squared-error" class="headerlink" title="Mean squared error"></a>Mean squared error</h2><p>一般来说平均方差(<code>Mean squared error</code>)会用于判断回归(<code>Regression</code>)模型的好坏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">k_range = range(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line">k_scores = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">    loss = -cross_val_score(knn, X, y, cv=<span class="number">10</span>, scoring=<span class="string">'mean_squared_error'</span>)</span><br><span class="line">    k_scores.append(loss.mean())</span><br><span class="line"></span><br><span class="line">plt.plot(k_range, k_scores)</span><br><span class="line">plt.xlabel(<span class="string">'Value of K for KNN'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cross-Validated MSE'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-6-cross-validation-1-output_8_1.png" width="400"><br></div>

<p>由图可以得知，平均方差越低越好，因此选择<code>13~18</code>左右的<code>K</code>值会最好</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Normalization]]></title>
      <url>http://iequa.com/2018/01/06/python/py-sklearn-5-normalization/</url>
      <content type="html"><![CDATA[<p>Data Normalization 可以提升机器学习的成效</p>
<a id="more"></a>
<h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="comment">#标准化数据模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立Array</span></span><br><span class="line">a = np.array([[<span class="number">10</span>, <span class="number">2.7</span>, <span class="number">3.6</span>],</span><br><span class="line">              [<span class="number">-100</span>, <span class="number">5</span>, <span class="number">-2</span>],</span><br><span class="line">              [<span class="number">120</span>, <span class="number">20</span>, <span class="number">40</span>]], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将normalized后的a打印出</span></span><br><span class="line">print(preprocessing.scale(a))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0.         -0.85170713 -0.55138018]
 [-1.22474487 -0.55187146 -0.852133  ]
 [ 1.22474487  1.40357859  1.40351318]]
</code></pre><h2 id="Normalization-对结果的影响"><a href="#Normalization-对结果的影响" class="headerlink" title="Normalization 对结果的影响"></a>Normalization 对结果的影响</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准化数据模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将资料分割成train与test的模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成适合做classification资料的模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification </span><br><span class="line"></span><br><span class="line"><span class="comment"># Support Vector Machine中的Support Vector Classifier</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化数据的模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h3 id="生成适合做-Classification-数据"><a href="#生成适合做-Classification-数据" class="headerlink" title="生成适合做 Classification 数据"></a>生成适合做 Classification 数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成具有2种属性的300笔数据</span></span><br><span class="line">X, y = make_classification(</span><br><span class="line">    n_samples=<span class="number">300</span>, n_features=<span class="number">2</span>,</span><br><span class="line">    n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>, </span><br><span class="line">    random_state=<span class="number">22</span>, n_clusters_per_class=<span class="number">1</span>, </span><br><span class="line">    scale=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_features 特征个数 = n_informative（） + n_redundant + n_repeated</span></span><br><span class="line"><span class="comment"># n_informative 多信息特征的个数</span></span><br><span class="line"><span class="comment"># n_redundant 冗余信息，informative 特征的随机线性组合</span></span><br><span class="line"><span class="comment"># n_classes 分类类别</span></span><br><span class="line"><span class="comment"># n_clusters_per_class 某一个类别是由几个 cluster 构成的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化数据</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-5-normalization-output_5_0.png" width="400"><br></div>

<h3 id="data-normalization-before"><a href="#data-normalization-before" class="headerlink" title="data normalization before"></a>data normalization before</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<pre><code>0.477777777778
</code></pre><h3 id="data-normalization-after"><a href="#data-normalization-after" class="headerlink" title="data normalization after"></a>data normalization after</h3><p>数据的单位发生了变化, <code>X</code> 数据也被压缩到差不多大小范围.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = preprocessing.scale(X)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br><span class="line"><span class="comment"># 0.9</span></span><br></pre></td></tr></table></figure>
<pre><code>0.933333333333
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn General Learning Model]]></title>
      <url>http://iequa.com/2018/01/05/python/py-sklearn-2-general-learning-model/</url>
      <content type="html"><![CDATA[<p>Sklearn 把所有机器学习的模式整合统一起来了，学会了一个模式就可以通吃其他不同类型的学习模式</p>
<a id="more"></a>
<h2 id="使用分类器"><a href="#使用分类器" class="headerlink" title="使用分类器"></a>使用分类器</h2><p>Sklearn 本身就有很多数据库，可以用来练习。 以 Iris 的数据为例，这种花有四个属性，花瓣的长宽，茎的长宽，根据这些属性把花分为三类。</p>
<p>我们要用 分类器 去把四种类型的花分开。</p>
<p><img src="/images/python/sklearn-2-general-learning-model.png" alt=""></p>
<p>今天用 <code>KNN classifier</code>，就是选择几个临近点，综合它们做个平均来作为预测值</p>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure>
<h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><p>加载 <code>iris</code> 的数据，把属性存在 <code>X</code>，类别标签存在 <code>y</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iris = datasets.load_iris()</span><br><span class="line"></span><br><span class="line">iris_X = iris.data</span><br><span class="line">iris_y = iris.target</span><br></pre></td></tr></table></figure>
<p>观察一下数据集，<code>X</code> 有四个属性，<code>y</code> 有 <code>0</code>，<code>1</code>，<code>2</code> 三类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(iris_X[:<span class="number">2</span>, :])</span><br><span class="line">print(iris_y)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]
</code></pre><p>把数据集分为训练集和测试集，其中 <code>test_size=0.3</code>，即测试集占总数据的 30%：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到分开后的数据集，顺序也被打乱，这样更有利于学习模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(y_train)</span><br></pre></td></tr></table></figure>
<pre><code>[0 0 2 2 1 0 2 0 1 1 0 2 1 2 2 0 0 1 0 1 0 2 1 1 1 2 2 1 0 0 2 2 2 2 2 1 0
 0 0 0 1 2 1 2 1 0 2 1 2 2 2 1 0 1 2 1 0 0 2 1 1 0 2 2 0 2 1 0 0 2 0 0 0 1
 2 0 1 1 2 2 0 1 0 2 2 0 1 0 0 1 2 1 1 2 2 1 1 0 0 2 0 0 1 1 0]
</code></pre><h2 id="建立模型－训练－预测"><a href="#建立模型－训练－预测" class="headerlink" title="建立模型－训练－预测"></a>建立模型－训练－预测</h2><p>定义模块方式 <code>KNeighborsClassifier()</code>， 用 <code>fit</code> 来训练 <code>training data</code>，这一步就完成了训练的所有步骤， 后面的 <code>knn</code> 就已经是训练好的模型，可以直接用来 <code>predict</code> 测试集的数据， 对比用模型预测的值与真实的值，可以看到大概模拟出了数据，但是有误差，是不会完完全全预测正确的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">print(knn.predict(X_test))</span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure>
<pre><code>[1 0 1 0 1 2 0 1 0 1 2 1 1 1 2 2 1 2 0 1 2 0 0 2 1 2 1 1 0 1 1 0 2 2 2 0 1
 0 2 0 2 0 1 2 1]
[1 0 1 0 1 2 0 1 0 1 2 1 1 1 2 2 1 2 0 1 2 0 0 2 1 2 1 1 0 1 1 0 2 2 2 0 1
 0 2 0 2 0 2 2 1]
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Common Attributes and Functions]]></title>
      <url>http://iequa.com/2018/01/05/python/py-sklearn-4-common-attributes/</url>
      <content type="html"><![CDATA[<p>今天来看 <code>Model</code> 的属性和功能, 这里以 <code>LinearRegressor</code> 为例，所以先导入包，数据，还有模型</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"></span><br><span class="line">data_X = loaded_data.data</span><br><span class="line">data_y = loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br></pre></td></tr></table></figure>
<h2 id="训练和预测"><a href="#训练和预测" class="headerlink" title="训练和预测"></a>训练和预测</h2><p>接下来 <code>model.fit</code> 和 <code>model.predict</code> 就属于 <code>Model</code> 的功能，用来训练模型，用训练好的模型预测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br></pre></td></tr></table></figure>
<pre><code>[ 30.00821269  25.0298606   30.5702317   28.60814055]
</code></pre><h2 id="参数和分数"><a href="#参数和分数" class="headerlink" title="参数和分数"></a>参数和分数</h2><p><code>model.coef_</code> 和 <code>model.intercept_</code> 属于 <code>Model</code> 的属性， 例如对于 <code>LinearRegressor</code> 这个模型，这两个属性分别输出模型的斜率和截距（与y轴的交点）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(model.coef_)</span><br><span class="line">print(model.intercept_)</span><br></pre></td></tr></table></figure>
<pre><code>[ -1.07170557e-01   4.63952195e-02   2.08602395e-02   2.68856140e+00
  -1.77957587e+01   3.80475246e+00   7.51061703e-04  -1.47575880e+00
   3.05655038e-01  -1.23293463e-02  -9.53463555e-01   9.39251272e-03
  -5.25466633e-01]
36.4911032804
</code></pre><p><code>model.get_params()</code> 也是功能，它可以取出之前定义的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(model.get_params())</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;copy_X&apos;: True, &apos;fit_intercept&apos;: True, &apos;n_jobs&apos;: 1, &apos;normalize&apos;: False}
</code></pre><p><code>model.score(data_X, data_y)</code> 它可以对 <code>Model</code> 用 <code>R^2</code> 的方式进行打分，输出精确度。<br>关于 <code>R^2 coefficient of determination</code> 可以查看 <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination" target="_blank" rel="external">Coefficient_of_determination</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(model.score(data_X, data_y)) <span class="comment"># R^2 coefficient of determination</span></span><br></pre></td></tr></table></figure>
<pre><code>0.740607742865
</code></pre><blockquote>
<p>按标准的来说, 是要将数据分成训练数据和测试数据, 这里不是一个完整的测试, 只是展示 model 里面的一些属性. 正确率很少能真正100%, 取决于拟合度怎么样. 拟合度好, 正确率高</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">scikit-learn morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn DataSets]]></title>
      <url>http://iequa.com/2018/01/03/python/py-sklearn-3-database/</url>
      <content type="html"><![CDATA[<p>Sklearn 中的 <a href="http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets" target="_blank" rel="external">data sets</a>，很多而且有用，可以用来学习算法模型</p>
<a id="more"></a>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>eg: boston 房价, 糖尿病, 数字, Iris 花。</p>
<p>也可以生成虚拟的数据，例如用来训练线性回归模型的数据，可以用函数来生成</p>
<div class="limg1"><br><img src="/images/python/sklearn-3-datasets-1.png" width="400"><br></div><br><!--![][img-1]--><br><br>例如，点击进入 boston 房价的数据，可以看到 <code>sample</code> 的总数，属性，以及 <code>label</code> 等信息<br><br><div class="limg1"><br><img src="/images/python/sklearn-3-datasets-2.png" width="650"><br></div>

<p>如果是自己生成数据，按照函数的形式，输入 <code>sample</code>，<code>feature</code>，<code>target</code> 的个数等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">100</span>, n_informative=<span class="number">10</span>, n_targets=<span class="number">1</span>, bias=<span class="number">0.0</span>, effective_rank=<span class="keyword">None</span>, tail_strength=<span class="number">0.5</span>, noise=<span class="number">0.0</span>, shuffle=<span class="keyword">True</span>, coef=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>)[source]</span><br></pre></td></tr></table></figure>
<p>接下来用代码练习…</p>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>导入 <code>datasets</code> 包，以 Linear Regression 为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h2 id="导入数据－训练模型"><a href="#导入数据－训练模型" class="headerlink" title="导入数据－训练模型"></a>导入数据－训练模型</h2><p>用 <code>datasets.load_boston()</code> 的形式加载数据，并给 <code>X</code> 和 <code>y</code> 赋值，这种形式在 Sklearn 中都是高度统一的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"></span><br><span class="line">data_X = loaded_data.data</span><br><span class="line">data_y = loaded_data.target</span><br><span class="line"></span><br><span class="line">print(data_X[:<span class="number">4</span>, <span class="number">0</span>]) <span class="comment"># == print(data_X[:4][0])</span></span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[ 0.00632  0.02731  0.02729  0.03237]
[ 24.   21.6  34.7  33.4]
</code></pre><p>定义模型</p>
<p>可以直接用默认值去建立 <code>model</code>，默认值也不错，也可以自己改变参数使模型更好。 然后用 <code>training data</code> 训练模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br></pre></td></tr></table></figure>
<pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
</code></pre><p>再打印出预测值，这里用 <code>X</code> 的前 4 个来预测，同时打印真实值，作为对比，可以看到是有些误差的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[ 30.00821269  25.0298606   30.5702317   28.60814055]
[ 24.   21.6  34.7  33.4]
</code></pre><p>为了提高准确度，可以通过尝试不同的 <code>model</code>，不同的参数，不同的预处理等方法，入门的话可以直接用默认值</p>
<h2 id="创建虚拟数据－可视化"><a href="#创建虚拟数据－可视化" class="headerlink" title="创建虚拟数据－可视化"></a>创建虚拟数据－可视化</h2><p>下面是创造数据的例子。</p>
<p>用函数来建立 100 个 <code>sample</code>，有一个 <code>feature</code>，和一个 <code>target</code>，这样比较方便可视化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y = datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">1</span>, n_targets=<span class="number">1</span>, noise=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>用 scatter 的形式来输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-3-datasets-output_11_0.png"><br></div>

<p>可以看到用函数生成的 <code>Linear Regression</code> 用的数据。</p>
<p><code>noise</code> 越大的话，点就会越来越离散，例如 <code>noise</code> 由 10 变为 50.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y = datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">1</span>, n_targets=<span class="number">1</span>, noise=<span class="number">50</span>)</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/sklearn-3-datasets-output_13_0.png"><br></div>

<!--![output_13_0][img-4]-->
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets" target="_blank" rel="external">scikit-learn machine_learning_map</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Choosing The Right Estimator]]></title>
      <url>http://iequa.com/2018/01/03/python/py-sklearn-1-choosing-estimator/</url>
      <content type="html"><![CDATA[<p>Sciki-learn 选择学习方法，选择模型 <a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="external">流程图</a></p>
<a id="more"></a>
<p>Sklearn 官网提供了一个流程图，蓝色圆圈内是判断条件，绿色方框内是可以选择的算法：<a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="external">详情</a></p>
<p><img src="/images/python/sklearn-1-model-choosing.png" alt="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html]"></p>
<p>从 START 开始，首先看数据的样本是否 <code>&gt;50</code>，小于则需要收集更多的数据。</p>
<p>由图中，可以看到算法有四类，<code>分类</code>，<code>回归</code>，<code>聚类</code>，<code>降维</code>。</p>
<table>
<thead>
<tr>
<th>algorithm</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>分类</td>
<td>监督式学习，即每个数据对应一个 label </td>
</tr>
<tr>
<td>回归</td>
<td>监督式学习，即每个数据对应一个 label </td>
</tr>
<tr>
<td>聚类</td>
<td>非监督式学习，即没有 label。 </td>
</tr>
<tr>
<td>降维</td>
<td>当数据集有很多很多属性的时候，可以通过 降维 算法把属性归纳起来。<br><br> 例如 20 个属性只变成 2 个，注意，这不是挑出 2 个，而是压缩成为 2 个，<br>它们集合了 20 个属性的所有特征，相当于把重要的信息提取的更好，不重要的信息就不要了</td>
</tr>
</tbody>
</table>
<p>然后看问题属于哪一类问题，是分类还是回归，还是聚类，就选择相应的算法。 当然还要考虑数据的大小，例如 <code>100K</code> 是一个阈值。</p>
<p>可以发现有些方法是既可以作为分类，也可以作为回归，例如 <code>SGD</code>。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="external">scikit-learn machine_learning_map</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sklearn Why ?]]></title>
      <url>http://iequa.com/2018/01/03/python/py-sklearn-0-why/</url>
      <content type="html"><![CDATA[<p>Scikit learn 也简称 sklearn, 是机器学习领域当中最知名的 python 模块之一.</p>
<a id="more"></a>
<p>Sklearn 包含了很多种机器学习的方式:</p>
<ul>
<li>Classification 分类</li>
<li>Regression 回归</li>
<li>Clustering 非监督分类</li>
<li>Dimensionality reduction 数据降维</li>
<li>Model Selection 模型选择</li>
<li>Preprocessing 数据预处理</li>
</ul>
<p>我们总能够从这些方法中挑选出一个适合于自己问题的, 然后解决自己的问题.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn.org</a></li>
<li><a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html" target="_blank" rel="external">scikit-learn docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Figure]]></title>
      <url>http://iequa.com/2018/01/01/python/py-matplotlib-3-figure-image/</url>
      <content type="html"><![CDATA[<p>matplotlib 的 figure 就是一个 单独的 figure 小窗口, 小窗口里面还可以有更多的小图片</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>使用<code>np.linspace</code>定义<code>x</code>：范围是(-3,3);个数是50. 仿真一维数据组(<code>x</code> ,<code>y1</code>)表示曲线1. 仿真一维数据组(<code>x</code> ,<code>y2</code>)表示曲线2.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>使用<code>plt.figure</code>定义一个图像窗口. 使用<code>plt.plot</code>画(<code>x</code> ,<code>y1</code>)曲线.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-2-figure-1.png" height="100" width="450"><br></div>

<p>使用<code>plt.figure</code>定义一个图像窗口：编号为3；大小为(8, 5). </p>
<p>使用<code>plt.plot</code>画(<code>x</code> ,<code>y2</code>)曲线.<br>使用<code>plt.plot</code>画(<code>x</code> ,<code>y1</code>)曲线，曲线的颜色属性(<code>color</code>)为红色;曲线的宽度(<code>linewidth</code>)为1.0；曲线的类型(<code>linestyle</code>)为虚线. 使用<code>plt.show</code>显示图像.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-2-figure-2.png" height="100" width="450"><br></div>

<h2 id="Set-Coordinate-axis"><a href="#Set-Coordinate-axis" class="headerlink" title="Set Coordinate axis"></a>Set Coordinate axis</h2><p>使用<code>plt.xlim</code>设置x坐标轴范围：(-1, 2)； 使用<code>plt.ylim</code>设置y坐标轴范围：(-2, 3)；<br>使用<code>plt.xlabel</code>设置x坐标轴名称：’I am x’； 使用<code>plt.ylabel</code>设置y坐标轴名称：’I am y’；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line">plt.xlabel(<span class="string">'I am x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'I am y'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/matplotlib-2-figure-3-output_9_0.png" alt="output_9_0.png"></p>
<p>使用 <code>np.linspace</code> 定义范围以及个数：范围是(-1,2);个数是5.<br>使用 <code>print</code> 打印出新定义的范围.<br>使用 <code>plt.xticks</code> 设置x轴刻度：范围是(-1,2);个数是5.   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line">plt.xlabel(<span class="string">'I am x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'I am y'</span>)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br></pre></td></tr></table></figure>
<pre><code>[-1.   -0.25  0.5   1.25  2.  ]

([&lt;matplotlib.axis.XTick at 0x11dd68ba8&gt;,
  &lt;matplotlib.axis.XTick at 0x11dd68a58&gt;,
  &lt;matplotlib.axis.XTick at 0x11dd7d5c0&gt;,
  &lt;matplotlib.axis.XTick at 0x11e04af28&gt;,
  &lt;matplotlib.axis.XTick at 0x11e0515c0&gt;],
 &lt;a list of 5 Text xticklabel objects&gt;)
</code></pre><p>使用<code>plt.yticks</code>设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 使用plt.show显示图像.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/matplotlib-2-figure-4-output_13_0.png" alt="output_13_0.png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Basic Use]]></title>
      <url>http://iequa.com/2018/01/01/python/py-matplotlib-2-basic-use/</url>
      <content type="html"><![CDATA[<p>Matplotlib 最基本的使用介绍</p>
<a id="more"></a>
<h2 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h2><p>使用<code>import</code>导入模块<code>matplotlib.pyplot</code>，并简写成<code>plt</code> 使用<code>import</code>导入模块<code>numpy</code>，并简写成<code>np</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([-1.        , -0.95918367, -0.91836735, -0.87755102, -0.83673469,
       -0.79591837, -0.75510204, -0.71428571, -0.67346939, -0.63265306,
       -0.59183673, -0.55102041, -0.51020408, -0.46938776, -0.42857143,
       -0.3877551 , -0.34693878, -0.30612245, -0.26530612, -0.2244898 ,
       -0.18367347, -0.14285714, -0.10204082, -0.06122449, -0.02040816,
        0.02040816,  0.06122449,  0.10204082,  0.14285714,  0.18367347,
        0.2244898 ,  0.26530612,  0.30612245,  0.34693878,  0.3877551 ,
        0.42857143,  0.46938776,  0.51020408,  0.55102041,  0.59183673,
        0.63265306,  0.67346939,  0.71428571,  0.75510204,  0.79591837,
        0.83673469,  0.87755102,  0.91836735,  0.95918367,  1.        ])
</code></pre><p>使用 <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.linspace.html" target="_blank" rel="external">np.linspace</a> 定义<code>x</code>：范围是(-1,1); 个数是50. 仿真一维数据组(<code>x</code> ,<code>y</code>)表示曲线1.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>使用<code>plt.figure</code>定义一个图像窗口. 使用<code>plt.plot</code>画(<code>x</code> ,<code>y</code>)曲线. 使用<code>plt.show</code>显示图像.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="limg1"><br><img src="/images/python/matplotlib-1-basic-use-1.png" height="100" width="450"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib Why ?]]></title>
      <url>http://iequa.com/2018/01/01/python/py-matplotlib-1-why/</url>
      <content type="html"><![CDATA[<p>Matplotlib 是一个非常强大的 Python 画图工具</p>
<a id="more"></a>
<p>Matplotlib 它能帮你画出美丽的:</p>
<ul>
<li>线图;</li>
<li>散点图;</li>
<li>等高线图;</li>
<li>条形图;</li>
<li>柱状图;</li>
<li>3D 图形,</li>
<li>甚至是图形动画等等.</li>
</ul>
<p>下面是一些例图:</p>
<div class="limg1"><br><img src="/images/python/matplotlib-0-why-1.png" height="100" width="650"><br></div>

<div class="limg1"><br><img src="/images/python/matplotlib-0-why-3.png" height="100" width="650"><br></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://matplotlib.org/" target="_blank" rel="external">matplotlib.org</a></li>
<li><a href="https://matplotlib.org/contents.html" target="_blank" rel="external">matplotlib docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Matplotlib Intro]]></title>
      <url>http://iequa.com/2017/12/31/python/py-pandas-8-matplotlib/</url>
      <content type="html"><![CDATA[<p>matplotlib 将数据可视化. 仅仅是用来 show 图片的, 即 plt.show()</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h2 id="创建一个Series"><a href="#创建一个Series" class="headerlink" title="创建一个Series"></a>创建一个Series</h2><p>这是一个线性的数据，我们随机生成1000个数据，<code>Series</code> 默认的 <code>index</code> 就是从0开始的整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机生成1000个数据</span></span><br><span class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>),index=np.arange(<span class="number">1000</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># pandas 数据可以直接观看其可视化形式</span></span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/pandas-output_3_0.png" alt="png"></p>
<p>可以使用 <code>plt.plot(x=, y=)</code>，把<code>x</code>,<code>y</code>的数据作为参数存进去，但是<code>data</code>本来就是一个数据，所以我们可以直接<code>plot</code></p>
<h2 id="Dataframe-可视化"><a href="#Dataframe-可视化" class="headerlink" title="Dataframe 可视化"></a>Dataframe 可视化</h2><p>我们生成一个 1000*4 的 <code>DataFrame</code>，并对他们累加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">1000</span>,<span class="number">4</span>),</span><br><span class="line">    index=np.arange(<span class="number">1000</span>),</span><br><span class="line">    columns=list(<span class="string">"ABCD"</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="comment">#data.cumsum()</span></span><br><span class="line">print(data)</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<pre><code>            A         B         C         D
0    1.163604 -0.689103  1.958018  0.241444
1    0.595765  0.816026  1.573164 -0.443003
2   -0.101446  0.768321 -0.203069 -0.638841
3   -0.439233 -0.161273  0.398774  1.309622
4   -0.524647 -0.180073 -1.499978  0.628436
5   -0.305683  0.668840  0.243668 -1.386839
..        ...       ...       ...       ...
998 -0.243955 -0.190122 -0.299633  3.350200
999 -0.055184  0.936187  0.146156  0.604271

[1000 rows x 4 columns]
</code></pre><p><img src="/images/python/pandas-output_5_1.png" alt="png"></p>
<p>这个就是我们刚刚生成的4个<code>column</code>的数据，因为有4组数据，所以4组数据会分别<code>plot</code>出来。</p>
<p>plot 可以指定很多参数，具体参见<a href="http://pandas.pydata.org/pandas-docs/version/0.18.1/visualization.html" target="_blank" rel="external">官方文档</a></p>
<p>除了plot，我经常会用到还有scatter，这个会显示散点图，首先说一下在 pandas 中有多少种方法</p>
<ul>
<li>bar</li>
<li>hist</li>
<li>box</li>
<li>kde</li>
<li>area</li>
<li>scatter</li>
<li>hexbin</li>
</ul>
<p>主要说一下 <code>plot</code> 和 <code>scatter</code>. 因为 <code>scatter</code> 只有 <code>x</code>，<code>y</code> 两个属性，可以分别给 <code>x</code>, <code>y</code> 指定数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax = data.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'B'</span>,color=<span class="string">'DarkBlue'</span>,label=<span class="string">'Class1'</span>)</span><br></pre></td></tr></table></figure>
<p>然后我们在可以再画一个在同一个<code>ax</code>上面，选择不一样的数据列，不同的 <code>color</code> 和 <code>label</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将之下这个 data 画在上一个 ax 上面</span></span><br><span class="line">data.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'C'</span>,color=<span class="string">'LightGreen'</span>,label=<span class="string">'Class2'</span>,ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/python/pandas-output_9_0.png" alt="png"></p>
<p>两种呈现方式，一种是<strong>线性的方式</strong>，一种是<strong>散点图</strong></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Merge]]></title>
      <url>http://iequa.com/2017/12/31/python/py-pandas-7-merge/</url>
      <content type="html"><![CDATA[<p><code>pandas</code>中的<code>merge</code>和<code>concat</code>类似,但主要是用于两组有<strong>key column</strong>的数据,统一索引的数据.</p>
<a id="more"></a>
<h2 id="依据一组key合并"><a href="#依据一组key合并" class="headerlink" title="依据一组key合并"></a>依据一组key合并</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                             <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                             <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                              <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                              <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(left)</span></span><br><span class="line"><span class="comment">#    A   B key</span></span><br><span class="line"><span class="comment"># 0  A0  B0  K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(right)</span></span><br><span class="line"><span class="comment">#    C   D key</span></span><br><span class="line"><span class="comment"># 0  C0  D0  K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1  K1</span></span><br><span class="line"><span class="comment"># 2  C2  D2  K2</span></span><br><span class="line"><span class="comment"># 3  C3  D3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key column合并，并打印出</span></span><br><span class="line">res = pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>    A   B key   C   D
0  A0  B0  K0  C0  D0
1  A1  B1  K1  C1  D1
2  A2  B2  K2  C2  D2
3  A3  B3  K3  C3  D3
</code></pre><h2 id="依据两组key合并"><a href="#依据两组key合并" class="headerlink" title="依据两组key合并"></a>依据两组key合并</h2><p>合并时有4种方法<code>how = [&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</code>，预设值<code>how=&#39;inner&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                      <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>],</span><br><span class="line">                      <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                      <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                       <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>],</span><br><span class="line">                       <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                       <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#    A   B key1 key2</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  A3  B3   K2   K1</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#    C   D key1 key2</span></span><br><span class="line"><span class="comment"># 0  C0  D0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1   K1   K0</span></span><br><span class="line"><span class="comment"># 2  C2  D2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  C3  D3   K2   K0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key1与key2 columns进行合并，并打印出四种结果['left', 'right', 'outer', 'inner']</span></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A2  B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0  C2  D2</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1   A1   B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3   A2   B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4   A3   B3   K2   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN  NaN   K2   K0   C3   D3</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'left'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3  A2  B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4  A3  B3   K2   K1  NaN  NaN</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'right'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1   A2   B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0  C2  D2</span></span><br><span class="line"><span class="comment"># 3  NaN  NaN   K2   K0  C3  D3</span></span><br></pre></td></tr></table></figure>
<h2 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h2><p><code>indicator=True</code>会将合并的记录放在新的一列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">0</span>,<span class="number">1</span>], <span class="string">'col_left'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">'col_right'</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line"><span class="comment">#   col1 col_left</span></span><br><span class="line"><span class="comment"># 0     0        a</span></span><br><span class="line"><span class="comment"># 1     1        b</span></span><br><span class="line"></span><br><span class="line">print(df2)</span><br><span class="line"><span class="comment">#   col1  col_right</span></span><br><span class="line"><span class="comment"># 0     1          2</span></span><br><span class="line"><span class="comment"># 1     2          2</span></span><br><span class="line"><span class="comment"># 2     2          2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据col1进行合并，并启用indicator=True，最后打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right      _merge</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN   left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0        both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0  right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0  right_only</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定indicator column的名称，并打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="string">'indicator_column'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right indicator_column</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN        left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0             both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0       right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0       right_only</span></span><br></pre></td></tr></table></figure>
<pre><code>   col1 col_left
0     0        a
1     1        b
   col1  col_right
0     1          2
1     2          2
2     2          2
   col1 col_left  col_right      _merge
0     0        a        NaN   left_only
1     1        b        2.0        both
2     2      NaN        2.0  right_only
3     2      NaN        2.0  right_only
   col1 col_left  col_right indicator_column
0     0        a        NaN        left_only
1     1        b        2.0             both
2     2      NaN        2.0       right_only
3     2      NaN        2.0       right_only
</code></pre><h2 id="依据index合并"><a href="#依据index合并" class="headerlink" title="依据index合并"></a>依据index合并</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                      <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">'K0'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>])</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#     A   B</span></span><br><span class="line"><span class="comment"># K0  A0  B0</span></span><br><span class="line"><span class="comment"># K1  A1  B1</span></span><br><span class="line"><span class="comment"># K2  A2  B2</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#     C   D</span></span><br><span class="line"><span class="comment"># K0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  C2  D2</span></span><br><span class="line"><span class="comment"># K3  C3  D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how='outer',并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="keyword">True</span>, right_index=<span class="keyword">True</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#      A    B    C    D</span></span><br><span class="line"><span class="comment"># K0   A0   B0   C0   D0</span></span><br><span class="line"><span class="comment"># K1   A1   B1  NaN  NaN</span></span><br><span class="line"><span class="comment"># K2   A2   B2   C2   D2</span></span><br><span class="line"><span class="comment"># K3  NaN  NaN   C3   D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how='inner',并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="keyword">True</span>, right_index=<span class="keyword">True</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A   B   C   D</span></span><br><span class="line"><span class="comment"># K0  A0  B0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  A2  B2  C2  D2</span></span><br></pre></td></tr></table></figure>
<pre><code>     A   B
K0  A0  B0
K1  A1  B1
K2  A2  B2
     C   D
K0  C0  D0
K2  C2  D2
K3  C3  D3
      A    B    C    D
K0   A0   B0   C0   D0
K1   A1   B1  NaN  NaN
K2   A2   B2   C2   D2
K3  NaN  NaN   C3   D3
     A   B   C   D
K0  A0  B0  C0  D0
K2  A2  B2  C2  D2
</code></pre><h2 id="解决overlapping的问题"><a href="#解决overlapping的问题" class="headerlink" title="解决overlapping的问题"></a>解决overlapping的问题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">boys = pd.DataFrame(&#123;<span class="string">'k'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>], <span class="string">'age'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">'k'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K3'</span>], <span class="string">'age'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(boys)</span><br><span class="line"></span><br><span class="line">print(girls)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用suffixes解决overlapping的问题</span></span><br><span class="line">res = pd.merge(boys, girls, on=<span class="string">'k'</span>, suffixes=[<span class="string">'_boy'</span>, <span class="string">'_girl'</span>], how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>   age   k
0    1  K0
1    2  K1
2    3  K2
   age   k
0    4  K0
1    5  K0
2    6  K3
   age_boy   k  age_girl
0        1  K0         4
1        1  K0         5
</code></pre><p>pandas 也有 <code>join</code> 和 <code>merge</code> 是类似的，如需要使用，请参考官方文档</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Concat、Join、join_axes、append]]></title>
      <url>http://iequa.com/2017/12/31/python/py-pandas-6-concat-join-append/</url>
      <content type="html"><![CDATA[<p><code>pandas</code> 处理多组数据的时候往往会要用到数据的合并处理,使用 <code>concat</code> 是一种基本的合并方式.而且 <code>concat</code> 中有很多参数可以调整,合并成你想要的数据形式.</p>
<a id="more"></a>
<h2 id="axis-合并方向"><a href="#axis-合并方向" class="headerlink" title="axis (合并方向)"></a>axis (合并方向)</h2><p><code>axis=0</code> 是预设值，因此未设定任何参数时，默认axis=0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#concat纵向合并</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
0  1.0  1.0  1.0  1.0
1  1.0  1.0  1.0  1.0
2  1.0  1.0  1.0  1.0
0  2.0  2.0  2.0  2.0
1  2.0  2.0  2.0  2.0
2  2.0  2.0  2.0  2.0
</code></pre><p>仔细观察会发现结果的<code>index</code>是0, 1, 2, 0, 1, 2, 0, 1, 2，若要将<code>index</code>重置，请看例子二。</p>
<h2 id="ignore-index-重置-index"><a href="#ignore-index-重置-index" class="headerlink" title="ignore_index (重置 index)"></a>ignore_index (重置 index)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#承上一个例子，并将index_ignore设定为True</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  1.0  1.0  1.0
4  1.0  1.0  1.0  1.0
5  1.0  1.0  1.0  1.0
6  2.0  2.0  2.0  2.0
7  2.0  2.0  2.0  2.0
8  2.0  2.0  2.0  2.0
</code></pre><p>结果的<code>index</code>变 0, 1, 2, 3, 4, 5, 6, 7, 8</p>
<h2 id="join-合并方式"><a href="#join-合并方式" class="headerlink" title="join (合并方式)"></a>join (合并方式)</h2><p><code>join=&#39;outer&#39;</code> 为预设值，未设定任何参数时，函数默认 <code>join=&#39;outer&#39;</code>。此方式是依照<code>column</code>来做纵向合并，有相同的<code>column</code>上下合并在一起，其他独自的<code>column</code>个自成列，原本没有值的位置皆以<code>NaN</code>填充。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向"外"合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>     a    b    c    d    e
1  0.0  0.0  0.0  0.0  NaN
2  0.0  0.0  0.0  0.0  NaN
3  0.0  0.0  0.0  0.0  NaN
2  NaN  1.0  1.0  1.0  1.0
3  NaN  1.0  1.0  1.0  1.0
4  NaN  1.0  1.0  1.0  1.0
</code></pre><p>只有相同的<code>column</code>合并在一起，其他的会被抛弃</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#承上一个例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向"内"合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'inner'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重置index并打印结果</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'inner'</span>, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>     b    c    d
0  0.0  0.0  0.0
1  0.0  0.0  0.0
2  0.0  0.0  0.0
3  1.0  1.0  1.0
4  1.0  1.0  1.0
5  1.0  1.0  1.0
</code></pre><h2 id="join-axes-依照-axes-合并"><a href="#join-axes-依照-axes-合并" class="headerlink" title="join_axes (依照 axes 合并)"></a>join_axes (依照 axes 合并)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#依照`df1.index`进行横向合并</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">1</span>, join_axes=[df1.index])</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移除join_axes，并打印结果</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">1</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<pre><code>     a    b    c    d    b    c    d    e
1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN
2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
     a    b    c    d    b    c    d    e
1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN
2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
4  NaN  NaN  NaN  NaN  1.0  1.0  1.0  1.0
</code></pre><h2 id="append-添加数据"><a href="#append-添加数据" class="headerlink" title="append (添加数据)"></a>append (添加数据)</h2><p><code>append</code>只有纵向合并，没有横向合并</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#将df2合并到df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(df2, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并多个df，将df2与df3合并至df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append([df2, df3], ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 6  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 7  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 8  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并series，将s1合并至df1，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(s1, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  2.0  3.0  4.0</span></span><br></pre></td></tr></table></figure>
<pre><code>     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  1.0  1.0  1.0
4  1.0  1.0  1.0  1.0
5  1.0  1.0  1.0  1.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  1.0  1.0  1.0
4  1.0  1.0  1.0  1.0
5  1.0  1.0  1.0  1.0
6  1.0  1.0  1.0  1.0
7  1.0  1.0  1.0  1.0
8  1.0  1.0  1.0  1.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  2.0  3.0  4.0
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas IO]]></title>
      <url>http://iequa.com/2017/12/30/python/py-pandas-5-import-output/</url>
      <content type="html"><![CDATA[<p><code>pandas</code> 可以读取与存取的资料格式有很多种，像 <code>csv</code>、<code>excel</code>、<code>json</code>、<code>html</code> 与 <code>pickle</code> 等…</p>
<p>详细请看<a href="http://pandas.pydata.org/pandas-docs/stable/io.html" target="_blank" rel="external">官方文档</a></p>
<a id="more"></a>
<h2 id="读取csv"><a href="#读取csv" class="headerlink" title="读取csv"></a>读取csv</h2><p>示范档案下载 - student.csv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取csv</span></span><br><span class="line">data = pd.read_csv(<span class="string">'students.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印出data</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<pre><code>    Student ID  name   age  gender
0         1100  Kelly   22  Female
1         1101    Clo   21  Female
2         1102  Tilly   22  Female
3         1103   Tony   24    Male
4         1104  David   20    Male
5         1105  Catty   22  Female
6         1106      M    3  Female
7         1107      N   43    Male
8         1108      A   13    Male
9         1109      S   12    Male
10        1110  David   33    Male
11        1111     Dw    3  Female
12        1112      Q   23    Male
13        1113      W   21  Female
</code></pre><h2 id="将资料存取成pickle"><a href="#将资料存取成pickle" class="headerlink" title="将资料存取成pickle"></a>将资料存取成pickle</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.to_pickle(<span class="string">'student.pickle'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/io.html" target="_blank" rel="external">pandas IO Tools</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Deal NaN Value]]></title>
      <url>http://iequa.com/2017/12/30/python/py-pandas-4-deal-NaN-value/</url>
      <content type="html"><![CDATA[<p>处理 <code>NaN</code> 数据, 一些 空 或者 <code>NaN</code> 数据, 如何删除或者填补这些 <code>NaN</code> 数据.</p>
<a id="more"></a>
<h2 id="创建含-NaN-的矩阵"><a href="#创建含-NaN-的矩阵" class="headerlink" title="创建含 NaN 的矩阵"></a>创建含 NaN 的矩阵</h2><p>建立了一个6X4的矩阵数据并且把两个位置置为空.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>] = np.nan</span><br><span class="line">df.iloc[<span class="number">1</span>,<span class="number">2</span>] = np.nan</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D
2013-01-01   0   NaN   2.0   3
2013-01-02   4   5.0   NaN   7
2013-01-03   8   9.0  10.0  11
2013-01-04  12  13.0  14.0  15
2013-01-05  16  17.0  18.0  19
2013-01-06  20  21.0  22.0  23
</code></pre><h2 id="pd-dropna"><a href="#pd-dropna" class="headerlink" title="pd.dropna()"></a>pd.dropna()</h2><p>如果想直接去掉有 <code>NaN</code> 的行或列, 可以使用 <code>dropna</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df.dropna(</span><br><span class="line">    axis=<span class="number">0</span>,     <span class="comment"># 0: 对行进行操作; 1: 对列进行操作</span></span><br><span class="line">    how=<span class="string">'any'</span>   <span class="comment"># 'any': 只要存在 NaN 就 drop 掉; 'all': 必须全部是 NaN 才 drop </span></span><br><span class="line">    ) </span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D
2013-01-03   8   9.0  10.0  11
2013-01-04  12  13.0  14.0  15
2013-01-05  16  17.0  18.0  19
2013-01-06  20  21.0  22.0  23
</code></pre><h2 id="pd-fillna"><a href="#pd-fillna" class="headerlink" title="pd.fillna()"></a>pd.fillna()</h2><p>如果是将 <code>NaN</code> 的值用其他值代替, 比如代替成 <code>0</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = df.fillna(value=<span class="number">0</span>)</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D
2013-01-01   0   0.0   2.0   3
2013-01-02   4   5.0   0.0   7
2013-01-03   8   9.0  10.0  11
2013-01-04  12  13.0  14.0  15
2013-01-05  16  17.0  18.0  19
2013-01-06  20  21.0  22.0  23
</code></pre><h2 id="pd-isnull"><a href="#pd-isnull" class="headerlink" title="pd.isnull()"></a>pd.isnull()</h2><p>判断是否有缺失数据 <code>NaN</code>, 为 <code>True</code> 表示缺失数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.isnull())</span><br></pre></td></tr></table></figure>
<pre><code>                A      B      C      D
2013-01-01  False   True  False  False
2013-01-02  False  False   True  False
2013-01-03  False  False  False  False
2013-01-04  False  False  False  False
2013-01-05  False  False  False  False
2013-01-06  False  False  False  False
</code></pre><p>检测在数据中是否存在 <code>NaN</code>, 如果存在就返回 <code>True</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.any(df.isnull()) == <span class="keyword">True</span>  </span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<pre><code>True
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Set Value]]></title>
      <url>http://iequa.com/2017/12/30/python/py-pandas-3-set-value/</url>
      <content type="html"><![CDATA[<p>我们可以根据自己的需求, 用 pandas 进行更改数据里面的值, 或者加上一些空的,或者有数值的列.</p>
<a id="more"></a>
<h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><p>首先建立了一个 6X4 的矩阵数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>) <span class="comment"># 2013-01-01 结果一样</span></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A   B   C   D
2013-01-01   0   1   2   3
2013-01-02   4   5   6   7
2013-01-03   8   9  10  11
2013-01-04  12  13  14  15
2013-01-05  16  17  18  19
2013-01-06  20  21  22  23
</code></pre><h2 id="设置-loc-和-iloc"><a href="#设置-loc-和-iloc" class="headerlink" title="设置 loc 和 iloc"></a>设置 loc 和 iloc</h2><p>我们可以利用索引或者标签确定需要修改值的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">1111</span></span><br><span class="line">df.loc[<span class="string">'2013-01-01'</span>,<span class="string">'B'</span>] = <span class="number">2222</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D
2013-01-01   0  2222     2   3
2013-01-02   4     5     6   7
2013-01-03   8     0  1111  11
2013-01-04  12     0    14  15
2013-01-05  16     0    18  19
2013-01-06  20     0    22  23
</code></pre><h2 id="根据条件设置"><a href="#根据条件设置" class="headerlink" title="根据条件设置"></a>根据条件设置</h2><p>如果现在的判断条件是这样, 我们想要更改B中的数, 而更改的位置是取决于 A 的. 对于A大于4的位置. 更改B在相应位置上的数为0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.B[df.A&gt;<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D
2013-01-01   0  2222     2   3
2013-01-02   4     5     6   7
2013-01-03   8     0  1111  11
2013-01-04  12     0    14  15
2013-01-05  16     0    18  19
2013-01-06  20     0    22  23
</code></pre><h2 id="按行或列设置"><a href="#按行或列设置" class="headerlink" title="按行或列设置"></a>按行或列设置</h2><p>如果对整列做批处理, 加上一列 ‘F’, 并将 F 列全改为 NaN, 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'F'</span>] = np.nan</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D   F
2013-01-01   0  2222     2   3 NaN
2013-01-02   4     5     6   7 NaN
2013-01-03   8     0  1111  11 NaN
2013-01-04  12     0    14  15 NaN
2013-01-05  16     0    18  19 NaN
2013-01-06  20     0    22  23 NaN
</code></pre><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>用上面的方法也可以加上 Series 序列（但是长度必须对齐）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'E'</span>] = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">'20130101'</span>,periods=<span class="number">6</span>)) </span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A     B     C   D   F  E
2013-01-01   0  2222     2   3 NaN  1
2013-01-02   4     5     6   7 NaN  2
2013-01-03   8     0  1111  11 NaN  3
2013-01-04  12     0    14  15 NaN  4
2013-01-05  16     0    18  19 NaN  5
2013-01-06  20     0    22  23 NaN  6
</code></pre><p>这样我们大概学会了如何对 <code>DataFrame</code> 中在自己想要的地方赋值或者增加数据。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Select Data]]></title>
      <url>http://iequa.com/2017/12/28/python/py-pandas-2-select-data/</url>
      <content type="html"><![CDATA[<p>pandas 选择数据, 首先我们建立了一个 6X4 的矩阵数据</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>             A   B   C   D
2013-01-01   0   1   2   3
2013-01-02   4   5   6   7
2013-01-03   8   9  10  11
2013-01-04  12  13  14  15
2013-01-05  16  17  18  19
2013-01-06  20  21  22  23
</code></pre><h2 id="简单的筛选"><a href="#简单的筛选" class="headerlink" title="简单的筛选"></a>简单的筛选</h2><p>如果我们想选取 DataFrame 中的数据，下面描述了两种途径, 他们都能达到同一个目的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[<span class="string">'A'</span>])</span><br><span class="line">print(df.A)</span><br></pre></td></tr></table></figure>
<pre><code>2013-01-01     0
2013-01-02     4
2013-01-03     8
2013-01-04    12
2013-01-05    16
2013-01-06    20
Freq: D, Name: A, dtype: int64

2013-01-01     0
2013-01-02     4
2013-01-03     8
2013-01-04    12
2013-01-05    16
2013-01-06    20
Freq: D, Name: A, dtype: int64
</code></pre><p>让选择跨越多行或多列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>            A  B   C   D
2013-01-01  0  1   2   3
2013-01-02  4  5   6   7
2013-01-03  8  9  10  11
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[<span class="number">3</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>Empty DataFrame
Columns: [A, B, C, D]
Index: []
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>             A   B   C   D
2013-01-02   4   5   6   7
2013-01-03   8   9  10  11
2013-01-04  12  13  14  15
</code></pre><p>如果 <code>df[3:3]</code> 将会是一个空对象。后者选择 <code>20130102</code> 到 <code>20130104</code> 标签之间的数据，并且包括这两个标签</p>
<h2 id="根据标签-loc"><a href="#根据标签-loc" class="headerlink" title="根据标签 loc"></a>根据标签 loc</h2><p>可以使用标签来选择数据 <code>loc</code>, 本例子主要通过标签名字选择某一行数据， 或者通过选择某行或者所有行（<code>:</code>代表所有行）然后选其中某一列或几列数据 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.loc[<span class="string">'20130102'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>A    4
B    5
C    6
D    7
Name: 2013-01-02 00:00:00, dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.loc[:,[<span class="string">'A'</span>,<span class="string">'B'</span>]])</span><br></pre></td></tr></table></figure>
<pre><code>             A   B
2013-01-01   0   1
2013-01-02   4   5
2013-01-03   8   9
2013-01-04  12  13
2013-01-05  16  17
2013-01-06  20  21
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.loc[<span class="string">'20130102'</span>,[<span class="string">'A'</span>,<span class="string">'B'</span>]])</span><br></pre></td></tr></table></figure>
<pre><code>A    4
B    5
Name: 2013-01-02 00:00:00, dtype: int64
</code></pre><h2 id="根据序列-iloc"><a href="#根据序列-iloc" class="headerlink" title="根据序列 iloc"></a>根据序列 iloc</h2><p>可以采用位置进行选择 <code>iloc</code>, 在这里我们可以通过位置选择在不同情况下所需要的数据例如选某一个，连续选或者跨行选等操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.iloc[<span class="number">3</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>13
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.iloc[<span class="number">3</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>             B   C
2013-01-04  13  14
2013-01-05  17  18
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.iloc[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>             B   C
2013-01-02   5   6
2013-01-04  13  14
2013-01-06  21  22
</code></pre><p>在这里我们可以通过位置选择在不同情况下所需要的数据, 例如选某一个，连续选或者跨行选等操作。</p>
<h2 id="根据混合两种-ix"><a href="#根据混合两种-ix" class="headerlink" title="根据混合两种 ix"></a>根据混合两种 ix</h2><p>当然我们可以采用混合选择 <code>ix</code>, 其中选择’A’和’C’的两列，并选择前三行的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.ix[:<span class="number">3</span>,[<span class="string">'A'</span>,<span class="string">'C'</span>]])</span><br></pre></td></tr></table></figure>
<pre><code>            A   C
2013-01-01  0   2
2013-01-02  4   6
2013-01-03  8  10


/Users/blair/.pyenv/versions/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: DeprecationWarning: 
.ix is deprecated. Please use
.loc for label based indexing or
.iloc for positional indexing

See the documentation here:
http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated
  &quot;&quot;&quot;Entry point for launching an IPython kernel.
</code></pre><h2 id="通过判断的筛选"><a href="#通过判断的筛选" class="headerlink" title="通过判断的筛选"></a>通过判断的筛选</h2><p>最后我们可以采用判断指令 (Boolean indexing) 进行选择. 我们可以约束某项条件然后选择出当前所有数据.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[df.A&gt;<span class="number">8</span>])</span><br><span class="line">df.A&gt;<span class="number">8</span></span><br></pre></td></tr></table></figure>
<pre><code>             A   B   C   D
2013-01-04  12  13  14  15
2013-01-05  16  17  18  19
2013-01-06  20  21  22  23

2013-01-01    False
2013-01-02    False
2013-01-03    False
2013-01-04     True
2013-01-05     True
2013-01-06     True
Freq: D, Name: A, dtype: bool
</code></pre><p>下节我们将会讲到Pandas中如何设置值。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Basic Intro]]></title>
      <url>http://iequa.com/2017/12/27/python/py-pandas-1-intro/</url>
      <content type="html"><![CDATA[<p>如果用列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式</p>
<a id="more"></a>
<p>Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p>
<p>要使用pandas，首先需要了解他主要两个数据结构：Series 和 DataFrame。</p>
<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>
<pre><code>0     1.0
1     3.0
2     6.0
3     NaN
4    44.0
5     1.0
dtype: float64
</code></pre><p><code>Series</code> 的字符串表现形式为：索引在左边，值在右边。<br>由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p>
<h2 id="DataFrame-矩阵创建"><a href="#DataFrame-矩阵创建" class="headerlink" title="DataFrame 矩阵创建"></a>DataFrame 矩阵创建</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20160101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>                   a         b         c         d
2016-01-01 -0.186992  0.228857  0.572464 -0.842974
2016-01-02 -0.689623 -1.491299  0.647805  0.819846
2016-01-03 -1.294425  0.138935  1.729793 -1.270880
2016-01-04  0.088744  0.745256  0.380425  0.048070
2016-01-05  0.003135 -2.240388  0.188038 -0.069044
2016-01-06 -1.358217 -0.820133  1.606467 -1.622589
</code></pre><p><code>DataFrame</code> 是一个表格型的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。<br><code>DataFrame</code> 既有行索引也有列索引， 它可以被看做由 <code>Series</code> 组成的大字典。</p>
<p>我们可以根据每一个不同的索引来挑选数据, 比如挑选 <code>b</code> 的元素:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df[<span class="string">'b'</span>])</span><br></pre></td></tr></table></figure>
<pre><code>2016-01-01    0.228857
2016-01-02   -1.491299
2016-01-03    0.138935
2016-01-04    0.745256
2016-01-05   -2.240388
2016-01-06   -0.820133
Freq: D, Name: b, dtype: float64
</code></pre><p>我们在创建一组没有给定行标签和列标签的数据 <code>df1</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure>
<pre><code>   0  1   2   3
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11
</code></pre><p>这样,他就会采取默认的从0开始 index.</p>
<h2 id="DataFrame-字典创建"><a href="#DataFrame-字典创建" class="headerlink" title="DataFrame 字典创建"></a>DataFrame 字典创建</h2><p>还有一种生成 <code>df</code> 的方法, 如下 <code>df2</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span> : [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>],</span><br><span class="line">                    <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</span><br><span class="line">                    <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                    <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                    <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                    <span class="string">'F'</span> : <span class="string">'foo'</span>&#125;)</span><br><span class="line">                    </span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure>
<pre><code>   A          B    C  D      E    F
0  1 2013-01-02  1.0  3   test  foo
1  3 2013-01-02  1.0  3  train  foo
2  7 2013-01-02  1.0  3   test  foo
3  5 2013-01-02  1.0  3  train  foo
</code></pre><p>这种方法能对每一列的数据进行特殊对待. 如果想要查看数据中的类型, 我们可以用 <code>dtype</code> 这个属性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.dtypes)</span><br></pre></td></tr></table></figure>
<pre><code>A             int64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object
</code></pre><p>如果想看对列的序号:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.index)</span><br></pre></td></tr></table></figure>
<pre><code>Int64Index([0, 1, 2, 3], dtype=&apos;int64&apos;)
</code></pre><p>同样, 每种数据的名称也能看到:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.columns)</span><br></pre></td></tr></table></figure>
<pre><code>Index([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;], dtype=&apos;object&apos;)
</code></pre><p>如果只想看所有 <code>df2</code> 的值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.values)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;]
 [3 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;]
 [7 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;]
 [5 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;]]
</code></pre><p>想知道数据的总结, 可以用 <code>describe()</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2.describe()</span><br></pre></td></tr></table></figure>
<pre><code>    A    C    D
count    4.000000    4.0    4.0
mean    4.000000    1.0    3.0
std    2.581989    0.0    0.0
min    1.000000    1.0    3.0
25%    2.500000    1.0    3.0
50%    4.000000    1.0    3.0
75%    5.500000    1.0    3.0
max    7.000000    1.0    3.0
</code></pre><p>如果想翻转数据, <code>transpose</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.T)</span><br></pre></td></tr></table></figure>
<pre><code>                     0                    1                    2  \
A                    1                    3                    7   
B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   
C                    1                    1                    1   
D                    3                    3                    3   
E                 test                train                 test   
F                  foo                  foo                  foo   

                     3  
A                    5  
B  2013-01-02 00:00:00  
C                    1  
D                    3  
E                train  
F                  foo  
</code></pre><p>如果想对数据的 <code>index</code> 进行排序并输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)) <span class="comment"># 对列名称进行排序，索引名，倒排序</span></span><br><span class="line"></span><br><span class="line">print(df2.sort_index(axis=<span class="number">0</span>, ascending=<span class="keyword">False</span>)) <span class="comment"># 对列名称进行排序，索引名，倒排序</span></span><br></pre></td></tr></table></figure>
<pre><code>     F      E  D    C          B  A
0  foo   test  3  1.0 2013-01-02  1
1  foo  train  3  1.0 2013-01-02  3
2  foo   test  3  1.0 2013-01-02  7
3  foo  train  3  1.0 2013-01-02  5
   A          B    C  D      E    F
3  5 2013-01-02  1.0  3  train  foo
2  7 2013-01-02  1.0  3   test  foo
1  3 2013-01-02  1.0  3  train  foo
0  1 2013-01-02  1.0  3   test  foo
</code></pre><p>如果是对数据 值 排序输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df2.sort_values(by=<span class="string">'E'</span>))</span><br></pre></td></tr></table></figure>
<pre><code>   A          B    C  D      E    F
0  1 2013-01-02  1.0  3   test  foo
2  7 2013-01-02  1.0  3   test  foo
1  3 2013-01-02  1.0  3  train  foo
3  5 2013-01-02  1.0  3  train  foo
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="external">pandas.pydata.org</a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.21/" target="_blank" rel="external">pandas docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy copy & deep copy]]></title>
      <url>http://iequa.com/2017/12/27/python/py-numpy-8-copy-deep-copy/</url>
      <content type="html"><![CDATA[<p>numpy copy &amp; deep copy</p>
<a id="more"></a>
<h2 id="的赋值方式会带有关联性"><a href="#的赋值方式会带有关联性" class="headerlink" title="= 的赋值方式会带有关联性"></a>= 的赋值方式会带有关联性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line"></span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">d = b</span><br></pre></td></tr></table></figure>
<p>改变<code>a</code>的第一个值，<code>b</code>、<code>c</code>、<code>d</code>的第一个值也会同时改变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([11,  1,  2,  3])</span></span><br></pre></td></tr></table></figure>
<pre><code>[11  1  2  3]
</code></pre><p>确认<code>b</code>、<code>c</code>、<code>d</code>是否与<code>a</code>相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">d <span class="keyword">is</span> a  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<h2 id="copy-的赋值方式没有关联性"><a href="#copy-的赋值方式没有关联性" class="headerlink" title="copy() 的赋值方式没有关联性"></a>copy() 的赋值方式没有关联性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a.copy()    <span class="comment"># deep copy</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line">print(a)        <span class="comment"># array([11, 22, 33, 44])</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br></pre></td></tr></table></figure>
<pre><code>[11  1  2  3]
[11  1  2 44]
[11  1  2  3]
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Array Split]]></title>
      <url>http://iequa.com/2017/12/27/python/py-numpy-7-Split/</url>
      <content type="html"><![CDATA[<p>Numpy array 横向分割、纵向分割、等量分割、非等量分割</p>
<a id="more"></a>
<h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">    [ 4,  5,  6,  7],</span><br><span class="line">    [ 8,  9, 10, 11]])</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
</code></pre><h2 id="纵向分割"><a href="#纵向分割" class="headerlink" title="纵向分割"></a>纵向分割</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span><br><span class="line">[array([[0, 1],</span><br><span class="line">        [4, 5],</span><br><span class="line">        [8, 9]]), array([[ 2,  3],</span><br><span class="line">        [ 6,  7],</span><br><span class="line">        [10, 11]])]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<h2 id="横向分割"><a href="#横向分割" class="headerlink" title="横向分割"></a>横向分割</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br></pre></td></tr></table></figure>
<h2 id="不等量的分割"><a href="#不等量的分割" class="headerlink" title="不等量的分割"></a>不等量的分割</h2><p>在机器学习时经常会需要将数据做不等量的分割，因此解决办法为<code>np.array_split()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.array_split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span><br><span class="line">[array([[0, 1],</span><br><span class="line">        [4, 5],</span><br><span class="line">        [8, 9]]), array([[ 2],</span><br><span class="line">        [ 6],</span><br><span class="line">        [10]]), array([[ 3],</span><br><span class="line">        [ 7],</span><br><span class="line">        [11]])]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<p>成功将Array不等量分割!</p>
<h2 id="其他的分割方式"><a href="#其他的分割方式" class="headerlink" title="其他的分割方式"></a>其他的分割方式</h2><p>在Numpy里还有<code>np.vsplit()</code>与横<code>np.hsplit()</code>方式可用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.vsplit(A, <span class="number">3</span>)) <span class="comment">#等于 print(np.split(A, 3, axis=0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(np.hsplit(A, <span class="number">2</span>)) <span class="comment">#等于 print(np.split(A, 2, axis=1))</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">[array([[0, 1],</span><br><span class="line">       [4, 5],</span><br><span class="line">       [8, 9]]), array([[ 2,  3],</span><br><span class="line">        [ 6,  7],</span><br><span class="line">        [10, 11]])]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Array Merge]]></title>
      <url>http://iequa.com/2017/12/26/python/py-numpy-6-Array-Merge/</url>
      <content type="html"><![CDATA[<p>对于一个<code>array</code>的合并，我们可以想到按行、按列等多种方式进行合并</p>
<a id="more"></a>
<h2 id="np-vstack"><a href="#np-vstack" class="headerlink" title="np.vstack()"></a>np.vstack()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">         </span><br><span class="line">print(np.vstack((A,B)))    <span class="comment"># vertical stack</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">[[1,1,1]</span><br><span class="line"> [2,2,2]]</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">np.vstack((A,B))</span><br></pre></td></tr></table></figure>
<pre><code>[[1 1 1]
 [2 2 2]]

array([[1, 1, 1],
       [2, 2, 2]])
</code></pre><p>vertical stack 本身属于一种上下合并，即对括号中的两个整体进行对应操作。此时我们对组合而成的矩阵进行属性探究：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = np.vstack((A,B))      </span><br><span class="line">print(A.shape,C.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3,) (2,3) # A 是序列, 序列合并后 C 为矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>(3,) (2, 3)
</code></pre><p>利用shape函数可以让我们很容易地知道A和C的属性，从打印出的结果来看，A仅仅是一个拥有3项元素的数组（数列），而合并后得到的C是一个2行3列的矩阵。</p>
<h2 id="np-hstack-左右合并："><a href="#np-hstack-左右合并：" class="headerlink" title="np.hstack() 左右合并："></a>np.hstack() 左右合并：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = np.hstack((A,B))       <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="comment"># [1,1,1,2,2,2]</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (6,)</span></span><br></pre></td></tr></table></figure>
<pre><code>[1 1 1 2 2 2]
(3,) (6,)
</code></pre><p>不能用 A.T 这样的方法，将一个序列变为矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A.T)</span><br><span class="line">print(A.T.shape)</span><br></pre></td></tr></table></figure>
<pre><code>[1 1 1]
(3,)
</code></pre><p>通过打印出的结果可以看出：D本身来源于A，B两个数列的左右合并，而且新生成的D本身也是一个含有6项元素的序列。</p>
<h2 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis()"></a>np.newaxis()</h2><p>如果面对如同前文所述的A序列， 转置操作便很有可能无法对其进行转置（因为A并不是矩阵的属性），此时就需要我们借助其他的函数操作进行转置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"></span><br><span class="line">print(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">"""</span><br><span class="line">[[1]</span><br><span class="line">[1]</span><br><span class="line">[1]]</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis].shape)</span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 1 1]]
(1, 3)
[[1]
 [1]
 [1]]
(3, 1)
</code></pre><p>此时我们便将具有3个元素的<code>array</code>转换为了1行3列以及3行1列的矩阵了。</p>
<h2 id="综合总结"><a href="#综合总结" class="headerlink" title="综合总结"></a>综合总结</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])[:,np.newaxis]</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])[:,np.newaxis]</span><br><span class="line">         </span><br><span class="line">C = np.vstack((A,B))   <span class="comment"># vertical stack</span></span><br><span class="line">D = np.hstack((A,B))   <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span><br><span class="line">[[1 2]</span><br><span class="line">[1 2]</span><br><span class="line">[1 2]]</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,1) (3,2)</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 2]
 [1 2]
 [1 2]]
(3, 1) (3, 2)
</code></pre><h2 id="np-concatenate"><a href="#np-concatenate" class="headerlink" title="np.concatenate()"></a>np.concatenate()</h2><p>当你的合并操作需要针对多个矩阵或序列时，借助concatenate函数可能会让你使用起来比前述的函数更加方便：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(C)</span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[1],</span><br><span class="line">       [1],</span><br><span class="line">       [1],</span><br><span class="line">       [2],</span><br><span class="line">       [2],</span><br><span class="line">       [2],</span><br><span class="line">       [2],</span><br><span class="line">       [2],</span><br><span class="line">       [2],</span><br><span class="line">       [1],</span><br><span class="line">       [1],</span><br><span class="line">       [1]])</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[1, 2, 2, 1],</span><br><span class="line">       [1, 2, 2, 1],</span><br><span class="line">       [1, 2, 2, 1]])</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 2 2 1]
 [1 2 2 1]
 [1 2 2 1]]
</code></pre><p><code>axis</code> 参数很好的控制了矩阵的纵向或是横向打印，相比较 <code>vstack</code> 和 <code>hstack</code> 函数显得更加方便。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Index]]></title>
      <url>http://iequa.com/2017/12/26/python/py-numpy-5-Index/</url>
      <content type="html"><![CDATA[<p>在元素列表或者数组中，我们可以用如同 <code>a[2]</code> 一样的表示方法，同样的，Numpy中也有相应的表示方法</p>
<a id="more"></a>
<h2 id="一维索引"><a href="#一维索引" class="headerlink" title="一维索引"></a>一维索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line">         </span><br><span class="line">print(A[<span class="number">3</span>])    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>
<pre><code>6
</code></pre><p>让我们将矩阵转换为二维的，此时进行同样的操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[ 3,  4,  5,  6]</span><br><span class="line">       [ 7,  8,  9, 10]</span><br><span class="line">       [11, 12, 13, 14]])</span><br><span class="line">"""</span></span><br><span class="line">         </span><br><span class="line">print(A[<span class="number">2</span>])         </span><br><span class="line"><span class="comment"># [11 12 13 14]</span></span><br></pre></td></tr></table></figure>
<pre><code>[11 12 13 14]
</code></pre><p>实际上这时的 <code>A[2]</code> 对应的就是 矩阵A 中第三行(从0开始算第一行)的所有元素。</p>
<h2 id="二维索引"><a href="#二维索引" class="headerlink" title="二维索引"></a>二维索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A[<span class="number">1</span>][<span class="number">1</span>])      <span class="comment"># 8</span></span><br><span class="line">print(A[<span class="number">1</span>, <span class="number">1</span>])      <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>
<pre><code>8
8
</code></pre><p>在Python的 list 中，我们可以利用:对一定范围内的元素进行切片操作，在Numpy中我们依然可以给出相应的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A[<span class="number">1</span>, <span class="number">1</span>:<span class="number">3</span>])    <span class="comment"># [8 9]</span></span><br></pre></td></tr></table></figure>
<pre><code>[8 9]
</code></pre><p>这一表示形式即针对第二行中第2到第4列元素进行切片输出（不包含第4列）。 此时我们适当的利用for函数进行打印：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A:</span><br><span class="line">    print(row)</span><br><span class="line"><span class="string">"""    </span><br><span class="line">[ 3,  4,  5, 6]</span><br><span class="line">[ 7,  8,  9, 10]</span><br><span class="line">[11, 12, 13, 14]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<p>此时它会逐行进行打印操作。如果想进行逐列打印，就需要稍稍变化一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> A.T:</span><br><span class="line">    print(column)</span><br><span class="line"><span class="string">"""  </span><br><span class="line">[ 3,  7,  11]</span><br><span class="line">[ 4,  8,  12]</span><br><span class="line">[ 5,  9,  13]</span><br><span class="line">[ 6, 10,  14]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<p>说一些关于迭代输出的问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">         </span><br><span class="line">print(A.flatten())   </span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># ……</span></span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure>
<pre><code>[ 3  4  5  6  7  8  9 10 11 12 13 14]
3
4
5
6
7
8
9
10
11
12
13
14
</code></pre><p>这一脚本中的flatten是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而flat是一个迭代器，本身是一个object属性。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Basic Operation 2]]></title>
      <url>http://iequa.com/2017/12/25/python/py-numpy-4-basic-operation-2/</url>
      <content type="html"><![CDATA[<p>numpy 矩阵的基本操作，argmin/argmax、mean/average、cumsum、sort、transpose/A.T、clip</p>
<a id="more"></a>
<h2 id="argmin-amp-argmax"><a href="#argmin-amp-argmax" class="headerlink" title="argmin &amp; argmax"></a>argmin &amp; argmax</h2><p>矩阵对应元素的索引也是非常重要的</p>
<p>其中的 <code>argmin()</code> 和 <code>argmax()</code> 两个函数分别对应着求矩阵中最小元素和最大元素的索引。相应的，在矩阵的12个元素中，最小值即2，对应索引0，最大值为13，对应索引为11。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">2</span>,<span class="number">14</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[ 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">#        [ 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">#        [10,11,12,13]])</span></span><br><span class="line">         </span><br><span class="line">print(np.argmin(A))    <span class="comment"># 0</span></span><br><span class="line">print(np.argmax(A))    <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>
<pre><code>0
11
</code></pre><h2 id="mean-amp-average"><a href="#mean-amp-average" class="headerlink" title="mean &amp; average"></a>mean &amp; average</h2><p>统计中的均值，可以利用下面的方式，将整个矩阵的均值求出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.mean(A))        <span class="comment"># 7.5</span></span><br><span class="line">print(np.average(A))     <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure>
<pre><code>7.5
7.5
</code></pre><p>仿照着前一节中dot() 的使用法则，mean()函数还有另外一种写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A.mean())          <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure>
<pre><code>7.5
</code></pre><h2 id="cumsum"><a href="#cumsum" class="headerlink" title="cumsum"></a>cumsum</h2><p>和matlab中的cumsum()累加函数类似，Numpy中也具有cumsum()函数，其用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.cumsum(A)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 5 9 14 20 27 35 44 54 65 77 90]</span></span><br></pre></td></tr></table></figure>
<pre><code>[ 2  5  9 14 20 27 35 44 54 65 77 90]
</code></pre><p>在cumsum()函数中：生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和。比如元素9，在cumsum()生成的矩阵中序号为3，即原矩阵中2，3，4三个元素的和。</p>
<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>相应的有累差运算函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.diff(A))    </span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]]</span></span><br></pre></td></tr></table></figure>
<pre><code>[[1 1 1]
 [1 1 1]
 [1 1 1]]
</code></pre><p>该函数计算的便是每一行中后一项与前一项之差。故一个3行4列矩阵通过函数计算得到的矩阵便是3行3列的矩阵。</p>
<blockquote>
<p><code>nonzero()</code> 函数, 觉得用处不大未学。</p>
</blockquote>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">14</span>,<span class="number">2</span>, <span class="number">-1</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[14, 13, 12, 11],</span></span><br><span class="line"><span class="comment">#       [10,  9,  8,  7],</span></span><br><span class="line"><span class="comment">#       [ 6,  5,  4,  3]])</span></span><br><span class="line"></span><br><span class="line">print(np.sort(A))    </span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[11,12,13,14]</span></span><br><span class="line"><span class="comment">#        [ 7, 8, 9,10]</span></span><br><span class="line"><span class="comment">#        [ 3, 4, 5, 6]])</span></span><br></pre></td></tr></table></figure>
<pre><code>[[11 12 13 14]
 [ 7  8  9 10]
 [ 3  4  5  6]]
</code></pre><h2 id="transpose-amp-A-T"><a href="#transpose-amp-A-T" class="headerlink" title="transpose &amp; A.T"></a>transpose &amp; A.T</h2><p>矩阵的转置有两种表示方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.transpose(A))    </span><br><span class="line">print(A.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[14,10, 6]</span></span><br><span class="line"><span class="comment">#        [13, 9, 5]</span></span><br><span class="line"><span class="comment">#        [12, 8, 4]</span></span><br><span class="line"><span class="comment">#        [11, 7, 3]])</span></span><br><span class="line"><span class="comment"># array([[14,10, 6]</span></span><br><span class="line"><span class="comment">#        [13, 9, 5]</span></span><br><span class="line"><span class="comment">#        [12, 8, 4]</span></span><br><span class="line"><span class="comment">#        [11, 7, 3]])</span></span><br></pre></td></tr></table></figure>
<pre><code>[[14 10  6]
 [13  9  5]
 [12  8  4]
 [11  7  3]]
[[14 10  6]
 [13  9  5]
 [12  8  4]
 [11  7  3]]
</code></pre><h2 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h2><p>特别的，在Numpy中具有clip()函数，例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A)</span><br><span class="line"><span class="comment"># array([[14,13,12,11]</span></span><br><span class="line"><span class="comment">#        [10, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 4, 3]])</span></span><br><span class="line"></span><br><span class="line">print(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))    </span><br><span class="line"><span class="comment"># array([[ 9, 9, 9, 9]</span></span><br><span class="line"><span class="comment">#        [ 9, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 5, 5]])</span></span><br></pre></td></tr></table></figure>
<pre><code>[[14 13 12 11]
 [10  9  8  7]
 [ 6  5  4  3]]
[[9 9 9 9]
 [9 9 8 7]
 [6 5 5 5]]
</code></pre><p>这个函数的格式是clip(Array,Array_min,Array_max)，顾名思义，Array指的是将要被执行用的矩阵，而后面的最小值最大值则用于让函数判断矩阵中元素是否有比最小值小的或者比最大值大的元素，并将这些指定的元素转换为最小值或者最大值。</p>
<p>实际上每一个Numpy中大多数函数均具有很多变量可以操作，你可以指定行、列甚至某一范围中的元素。更多具体的使用细节请记得查阅Numpy官方文档。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Basic Operation 1]]></title>
      <url>http://iequa.com/2017/12/25/python/py-numpy-3-basic-operation-1/</url>
      <content type="html"><![CDATA[<p>numpy 矩阵的基本运算，加减乘除、数学函数、最大最小值、axis 查找 等</p>
<a id="more"></a>
<h2 id="numpy-生成矩阵"><a href="#numpy-生成矩阵" class="headerlink" title="numpy 生成矩阵"></a>numpy 生成矩阵</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])   <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b=np.arange(<span class="number">4</span>)              <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2, 3])
</code></pre><h2 id="numpy-加减乘除"><a href="#numpy-加减乘除" class="headerlink" title="numpy 加减乘除"></a>numpy 加减乘除</h2><p>上述代码中的 <code>a</code> 和 <code>b</code> 是两个属性为 array 也就是矩阵的变量，而且二者都是1行4列的矩阵， 其中b矩阵中的元素分别是从0到3。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=a-b  <span class="comment"># array([10, 19, 28, 37])</span></span><br><span class="line">print(c)</span><br><span class="line">c=a+b   <span class="comment"># array([10, 21, 32, 43])</span></span><br><span class="line">print(c)</span><br><span class="line">c=a*b   <span class="comment"># array([  0,  20,  60, 120])</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">c=b**<span class="number">2</span>  <span class="comment"># array([0, 1, 4, 9])</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<pre><code>[10 19 28 37]
[10 21 32 43]
[  0  20  60 120]
[0 1 4 9]
</code></pre><h2 id="numpy-数学函数"><a href="#numpy-数学函数" class="headerlink" title="numpy 数学函数"></a>numpy 数学函数</h2><p>numpy 三角函数等，当我们需要对矩阵中每一项元素进行函数运算时，可以很简便的调用它们（以sin函数为例）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="number">10</span>*np.sin(a)  </span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<pre><code>[-5.44021111  9.12945251 -9.88031624  7.4511316 ]
</code></pre><h2 id="print-函数进行逻辑判断"><a href="#print-函数进行逻辑判断" class="headerlink" title="print 函数进行逻辑判断"></a>print 函数进行逻辑判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(b&lt;<span class="number">3</span>)  </span><br><span class="line"><span class="comment"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure>
<pre><code>[ True  True  True False]
</code></pre><p>上述运算均是建立在一维矩阵，即只有一行的矩阵上面的计算，如果我们想要对多行多维度的矩阵进行操作，需要对开始的脚本进行一些修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([[1, 1],</span></span><br><span class="line"><span class="comment">#       [0, 1]])</span></span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line"></span><br><span class="line">print(b &gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 1]
 [0 1]]
[[0 1]
 [2 3]]
[[False False]
 [False  True]]
</code></pre><h2 id="numpy-两种矩阵乘法"><a href="#numpy-两种矩阵乘法" class="headerlink" title="numpy 两种矩阵乘法"></a>numpy 两种矩阵乘法</h2><p>此时构造出来的矩阵a和b便是2行2列的，其中 reshape 操作是对矩阵的形状进行重构， 其重构的形状便是括号中给出的数字。 稍显不同的是，Numpy 中的矩阵乘法分为两种， 其一是前文中的对应元素相乘，其二是标准的矩阵乘法运算，即对应行乘对应列得到相应元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c_dot = np.dot(a,b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line">print(<span class="string">"========"</span>)</span><br><span class="line">print(c_dot)</span><br></pre></td></tr></table></figure>
<pre><code>[[1 1]
 [0 1]]
[[0 1]
 [2 3]]
========
[[2 4]
 [2 3]]
</code></pre><p>除此之外还有另外的一种关于<code>dot</code>的表示方法，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c_dot_2 = a.dot(b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure>
<h2 id="sum-min-max"><a href="#sum-min-max" class="headerlink" title="sum(), min(), max()"></a>sum(), min(), max()</h2><p>下面我们将重新定义一个脚本, 来看看关于 <code>sum()</code>, <code>min()</code>, <code>max()</code> 的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],</span></span><br><span class="line"><span class="comment">#       [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])</span></span><br></pre></td></tr></table></figure>
<pre><code>[[ 0.38281924  0.40654978  0.69744113  0.90707595]
 [ 0.40572074  0.652105    0.24226191  0.95931459]]
</code></pre><p>因为是随机生成数字, 所以你的结果可能会不一样. 在第二行中对a的操作是令a中生成一个2行4列的矩阵，且每一元素均是来自从0到1的随机数。 在这个随机生成的矩阵中，我们可以对元素进行求和以及寻找极值的操作，具体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sum(a)   <span class="comment"># 4.6532883360785817</span></span><br><span class="line">np.min(a)   <span class="comment"># 0.24226191007863129</span></span><br><span class="line">np.max(a)   <span class="comment"># 0.95931458707579575</span></span><br></pre></td></tr></table></figure>
<pre><code>0.95931458707579575
</code></pre><h2 id="axis-进行赋值"><a href="#axis-进行赋值" class="headerlink" title="axis 进行赋值"></a>axis 进行赋值</h2><p>对应的便是对矩阵中所有元素进行求和，寻找最小值，寻找最大值的操作。 可以通过print()函数对相应值进行打印检验。</p>
<p>如果你需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 </p>
<p>当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。</p>
<p>为了更加清晰，在刚才的例子中我们继续进行查找：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"a ="</span>,a)</span><br><span class="line"><span class="comment"># a = [[ 0.23651224  0.41900661  0.84869417  0.46456022]</span></span><br><span class="line"><span class="comment"># [ 0.60771087  0.9043845   0.36603285  0.55746074]]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"sum ="</span>,np.sum(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># sum = [ 1.96877324  2.43558896]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"min ="</span>,np.min(a,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># min = [ 0.23651224  0.41900661  0.36603285  0.46456022]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"max ="</span>,np.max(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># max = [ 0.84869417  0.9043845 ]</span></span><br></pre></td></tr></table></figure>
<pre><code>a = [[ 0.38281924  0.40654978  0.69744113  0.90707595]
 [ 0.40572074  0.652105    0.24226191  0.95931459]]
sum = [ 2.3938861   2.25940224]
min = [ 0.38281924  0.40654978  0.24226191  0.90707595]
max = [ 0.90707595  0.95931459]
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Array]]></title>
      <url>http://iequa.com/2017/12/22/python/py-numpy-2-array/</url>
      <content type="html"><![CDATA[<p>创建 array 有很多 形式</p>
<a id="more"></a>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li><code>array</code>：创建数组</li>
<li><code>dtype</code>：指定数据类型</li>
<li><code>zeros</code>：数据全为0</li>
<li><code>ones</code>：数据全为1</li>
<li><code>arrange</code>：按指定范围创建数据</li>
<li><code>linspace</code>：创建线段</li>
</ul>
<blockquote>
<p>与 List 区别之一 : 没有逗号分隔</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>])</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [ 2 23  4]</span></span><br></pre></td></tr></table></figure>
<pre><code>[ 2 23  4]
int64
</code></pre><h2 id="指定数据"><a href="#指定数据" class="headerlink" title="指定数据"></a>指定数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>], dtype=np.int) <span class="comment"># 默认 int 为 int64</span></span><br><span class="line">print(a.dtype) </span><br><span class="line"><span class="comment">#int64</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.int32)</span><br><span class="line">print(a.dtype)</span><br><span class="line"><span class="comment"># int32</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23.1</span>,<span class="number">4.0</span>], dtype=np.float) <span class="comment"># 默认 float 为 float64</span></span><br><span class="line">print(a)</span><br><span class="line">print(a.dtype)</span><br><span class="line"><span class="comment"># float64</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],dtype=np.float32)</span><br><span class="line">print(a.dtype)</span><br><span class="line"><span class="comment"># float32</span></span><br></pre></td></tr></table></figure>
<pre><code>int64
int32
[  2.   23.1   4. ]
float64
float32
</code></pre><h2 id="创建特定数据"><a href="#创建特定数据" class="headerlink" title="创建特定数据"></a>创建特定数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">23</span>,<span class="number">4</span>]</span><br><span class="line">    ]</span><br><span class="line">)  <span class="comment"># 2d 矩阵 2行3列</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">[[ 2 23  4]</span><br><span class="line"> [ 2 32  4]]</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="全零数组"><a href="#全零数组" class="headerlink" title="全零数组"></a>全零数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建全零数组</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>,<span class="number">4</span>))  <span class="comment"># 数据全为0，3行4列</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[ 0.,  0.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.]])</span><br><span class="line">"""</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<h3 id="全一数组"><a href="#全一数组" class="headerlink" title="全一数组"></a>全一数组</h3><blockquote>
<p>同时也能指定这些特定数据的 <code>dtype</code>:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype = np.int)   <span class="comment"># 数据为1，3行4列</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[1, 1, 1, 1],</span><br><span class="line">       [1, 1, 1, 1],</span><br><span class="line">       [1, 1, 1, 1]])</span><br><span class="line">"""</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<h3 id="全空数组"><a href="#全空数组" class="headerlink" title="全空数组"></a>全空数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty( (<span class="number">2</span>,<span class="number">3</span>) ) <span class="comment"># 这个方法最大的好处就是速度快，因为少了初始化空间的操作</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[  9.88131292e-324,   1.13635099e-322,   1.97626258e-323],
       [  9.88131292e-324,   1.13635099e-322,   1.97626258e-323]])
</code></pre><h3 id="连续数组arange"><a href="#连续数组arange" class="headerlink" title="连续数组arange"></a>连续数组<code>arange</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>) <span class="comment"># 10-19 的数据，2步长</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([10, 12, 14, 16, 18])</span><br><span class="line">"""</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = np.arange(<span class="number">12</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>[10 12 14 16 18]
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
</code></pre><h3 id="改变数据的形状reshape"><a href="#改变数据的形状reshape" class="headerlink" title="改变数据的形状reshape"></a>改变数据的形状<code>reshape</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))    <span class="comment"># 3行4列，0到11</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br><span class="line">"""</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<h3 id="线段型数据linspace"><a href="#线段型数据linspace" class="headerlink" title="线段型数据linspace"></a>线段型数据<code>linspace</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>)    <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([  1.        ,   1.47368421,   1.94736842,   2.42105263,</span><br><span class="line">         2.89473684,   3.36842105,   3.84210526,   4.31578947,</span><br><span class="line">         4.78947368,   5.26315789,   5.73684211,   6.21052632,</span><br><span class="line">         6.68421053,   7.15789474,   7.63157895,   8.10526316,</span><br><span class="line">         8.57894737,   9.05263158,   9.52631579,  10.        ])</span><br><span class="line">"""</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<p>也能进行 <code>reshape</code> 工作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>).reshape((<span class="number">5</span>,<span class="number">4</span>)) <span class="comment"># 更改shape</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">array([[  1.        ,   1.47368421,   1.94736842,   2.42105263],</span><br><span class="line">       [  2.89473684,   3.36842105,   3.84210526,   4.31578947],</span><br><span class="line">       [  4.78947368,   5.26315789,   5.73684211,   6.21052632],</span><br><span class="line">       [  6.68421053,   7.15789474,   7.63157895,   8.10526316],</span><br><span class="line">       [  8.57894737,   9.05263158,   9.52631579,  10.        ]])</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/2-2-np-array/" target="_blank" rel="external">morvanzhou</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numpy Attribute]]></title>
      <url>http://iequa.com/2017/12/21/python/py-numpy-1-attribute/</url>
      <content type="html"><![CDATA[<p>numpy 的几种属性 维度、行列个数、元素个数</p>
<a id="more"></a>
<ul>
<li><code>ndim</code>：维度</li>
<li><code>shape</code>：行数和列数</li>
<li><code>size</code>：元素个数</li>
</ul>
<p>列表转化为矩阵：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array1 = np.array(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">print(array1)</span><br><span class="line">print(<span class="string">'number of dim:'</span>, array1.ndim)</span><br><span class="line">print(<span class="string">'shape:'</span>, array1.shape)</span><br><span class="line">print(<span class="string">'size:'</span>, array1.size)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">    [[1 2 3]</span><br><span class="line">     [2 3 4]]</span><br><span class="line">    number of dim: 2</span><br><span class="line">    shape: (2, 3)</span><br><span class="line">    size: 6</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">numpy.org</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">numpy docs</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pyenv Install Anaconda3]]></title>
      <url>http://iequa.com/2017/12/07/ops/ops-pyenv-Anaconda3-note/</url>
      <content type="html"><![CDATA[<p>pyenv install anaconda3-5.0.0 无法下载包的情况下使用的，因为网速实在太慢了T T</p>
<a id="more"></a>
<h2 id="Anaconda3"><a href="#Anaconda3" class="headerlink" title="Anaconda3"></a>Anaconda3</h2><p><a href="https://repo.continuum.io/archive/Anaconda3-5.0.1-MacOSX-x86_64.sh" target="_blank" rel="external">官网</a> 下载了.sh文件，在该.sh文件目录使用下面的命令安装该文件</p>
<p>Anaconda3-5.0.1-MacOSX-x86_64.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  mv Anaconda3-5.0.1-MacOSX-x86_64.sh ~/.pyenv/cache/</span><br><span class="line">➜  cache git:(master) sh Anaconda3-5.0.1-MacOSX-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>安装过程需要操作的地方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Please, press ENTER to continue</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">...</span><br><span class="line">Do you accept the license terms? [yes|no]</span><br><span class="line">[no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Anaconda3 will now be installed into this location:</span><br><span class="line">/Users/blair/anaconda3	</span><br><span class="line">- Press ENTER to confirm the location</span><br><span class="line">- Press CTRL-C to abort the installation</span><br><span class="line">- Or specify a different location below</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[/Users/blair/anaconda3] 改为 /Users/blair/.pyenv/versions/anaconda3</p>
<p>输入需要安装的目录，因为要添加到pyenv管理器中，所以与其他以安装的Python版本放在同一目录下。</p>
</blockquote>
<p>开始输出安装信息，会安装许多包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[/Users/blair/anaconda3] &gt;&gt;&gt; /Users/blair/.pyenv/versions/anaconda3</span><br><span class="line">PREFIX=/Users/blair/.pyenv/versions/anaconda3</span><br><span class="line">installing: python-3.6.3-h6804ab2_0 ...</span><br><span class="line">Python 3.6.3 :: Anaconda, Inc.</span><br><span class="line">installing: bzip2-1.0.6-h92991f9_1 ...</span><br><span class="line">installing: ca-certificates-2017.08.26-ha1e5d58_0 ...</span><br><span class="line">installing: conda-env-2.6.0-h36134e3_0 ...</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>然后出现提示，输入yes即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">installation finished.</span><br><span class="line">Do you wish the installer to prepend the Anaconda3 install location</span><br><span class="line">to PATH in your /Users/blair/.bash_profile ? [yes|no]</span><br><span class="line">[yes] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure>
<p>安装成功！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  2.7.14</span><br><span class="line">  2.7.14/envs/vpy2</span><br><span class="line">  3.5.4</span><br><span class="line">  3.5.4/envs/vpy3.5</span><br><span class="line">* anaconda3 (<span class="built_in">set</span> by /Users/blair/.pyenv/version)</span><br><span class="line">  anaconda3/envs/vconda3</span><br><span class="line">  vconda3</span><br><span class="line">  vpy2</span><br><span class="line">  vpy3.5</span><br><span class="line">(anaconda3)</span><br><span class="line"><span class="comment"># ~/ghome [10:34:54]</span></span><br></pre></td></tr></table></figure>
<p>为anaconda3创建虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  cache git:(master) pyenv virtualenv vconda3</span><br></pre></td></tr></table></figure>
<p>可能会装一些更新包，会有提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># To activate this environment, use:</span><br><span class="line"># &gt; source activate vconda3</span><br><span class="line">#</span><br><span class="line"># To deactivate an active environment, use:</span><br><span class="line"># &gt; source deactivate</span><br></pre></td></tr></table></figure>
<p>根据提示激活：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  cache git:(master) source activate vconda3</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac 安装 mysql 与 常用命令]]></title>
      <url>http://iequa.com/2017/12/03/ops/ops-mac-mysql/</url>
      <content type="html"><![CDATA[<p>介绍 Mac 安装 Mysql 与 mysql 在 mac 在的命令</p>
<a id="more"></a>
<h2 id="1-brew-install"><a href="#1-brew-install" class="headerlink" title="1. brew install"></a>1. brew install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
<p><strong>在mac下使用 brew 安装 mysql，之前没有使用过，今天启动的时候发现启动不了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/bin [9:31:54]</span></span><br><span class="line">➜ mysql</span><br><span class="line">ERROR 2002 (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/tmp/mysql.sock<span class="string">' (2)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ brew info mysql</span><br><span class="line">mysql: stable 8.0.12 (bottled)</span><br></pre></td></tr></table></figure>
<h2 id="2-启动mysql"><a href="#2-启动mysql" class="headerlink" title="2. 启动mysql"></a>2. 启动mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ mysql.server start</span><br></pre></td></tr></table></figure>
<h2 id="3-设置密码"><a href="#3-设置密码" class="headerlink" title="3. 设置密码"></a>3. 设置密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h2 id="4-进入mysql"><a href="#4-进入mysql" class="headerlink" title="4. 进入mysql"></a>4. 进入mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5. 常用命令"></a>5. 常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql.server start</span><br><span class="line">$ mysql.server restart</span><br><span class="line">$ mysql.server stop</span><br><span class="line">$ mysql.server status</span><br><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/plpldog/article/details/80761646" target="_blank" rel="external">mac用brew安装mysql,设置初始密码</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搬瓦工VPS 配置 SSH 与 OpenVpn]]></title>
      <url>http://iequa.com/2017/11/12/ops/ops-bandwagonhost-ssh-openvpn/</url>
      <content type="html"><![CDATA[<p>搬瓦工VPS 配置 ssh 登录 与 iphone 配置使用 openvpn</p>
<a id="more"></a>
<h2 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h2><blockquote>
<p>ssh 登录搬瓦工机器</p>
<ol>
<li>stop server @Main controls</li>
<li>Root password modification</li>
<li>start Server</li>
<li>Root shell - interactive</li>
<li><p>vi /etc/ssh/sshd_config, add </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/init.d/sshd restart</p>
</li>
<li>ssh root@ip</li>
</ol>
</blockquote>
<h2 id="OpenVpn-配置"><a href="#OpenVpn-配置" class="headerlink" title="OpenVpn 配置"></a>OpenVpn 配置</h2><blockquote>
<ol>
<li>在iOS设备上打开app store，搜索openvpn，install</li>
<li>打开 <a href="https://bandwagonhost.com/clientarea.php?action=products" target="_blank" rel="external">bandwagon my service pandel</a><br><code>My Service Pandel</code> -&gt; <code>KiwiVM Control Pandel</code> -&gt; <code>OpenVPN Server</code> -&gt; <code>install OpenVPN</code> -&gt; <code>Download Key Files</code></li>
<li><p>把 ca.crt、client1.crt、client1.key 证书放入 .ovpn 配置文件</p>
<p>在 .ovpn 文件尾部中新增 标签 <code>&lt;ca&gt;、&lt;cert&gt;、&lt;key&gt;</code> 标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca.crt 文件内容复制到 &lt;ca&gt;和&lt;/ca&gt; 的中间，</span><br><span class="line">client1.crt 文件内容复制到 &lt;cert&gt;和&lt;/cert&gt; 的中间，</span><br><span class="line">client1.key 文件内容复制到 &lt;key&gt;和&lt;/key&gt; 的中间，</span><br><span class="line"></span><br><span class="line">修改完成后删除 .ovpn 配置文件中类似</span><br><span class="line"></span><br><span class="line">ca ca.crt</span><br><span class="line">cert client1.crt</span><br><span class="line">key client1.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>.ovpn 通过 Airdrop 传到 iphone 手机里</p>
</li>
<li>打开OpenVPN，点那些绿色加号，将配置文件导入</li>
<li>向右滑动最下面那个白色滑块至蓝色，连接服务器。</li>
<li>连接成功。如果显示 Connected，表示连接成功了。</li>
</ol>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.yuntionly.com/" target="_blank" rel="external">www.yuntionly.com</a></li>
<li><a href="https://www.wisevpn.net/" target="_blank" rel="external">www.wisevpn.net</a></li>
<li><a href="https://www.banwago.com/797.html" target="_blank" rel="external">www.banwago.com</a></li>
<li><a href="https://www.godaddy.com/" target="_blank" rel="external">www.godaddy.com</a></li>
<li><a href="https://www.cnbanwagong.com/4.html" target="_blank" rel="external">搬瓦工中文网</a></li>
<li><a href="https://bwh1.net/" target="_blank" rel="external">搬瓦工购买页面</a></li>
<li><a href="http://ulis.me/archives/5909" target="_blank" rel="external">搬瓦工VPS续费的那些事</a></li>
<li><a href="https://www.igfw.net/archives/13042" target="_blank" rel="external">OpenVPN支持iOS啦</a></li>
<li><a href="https://www.igfw.net/archives/1974" target="_blank" rel="external">绿色便携汉化可保存密码的OpenVPN客户端</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 结构化您的工程 (not finish)]]></title>
      <url>http://iequa.com/2017/11/04/python/py-language-structure-project/</url>
      <content type="html"><![CDATA[<p>如何利用Python的特性来创造简洁、高效的代码。 “<strong>结构化</strong>” 意味着通过编写简洁的代码，使逻辑和依赖清晰.</p>
<a id="more"></a>
<h2 id="仓库的结构"><a href="#仓库的结构" class="headerlink" title="仓库的结构"></a>仓库的结构</h2><p>在一个健康的开发周期中，代码风格，API设计和自动化是非常关键的。同样的，对于工程的 架构 ,仓库的结构也是关键的一部分。</p>
<p>当一个潜在的用户和贡献者登录到您的仓库页面时，他们会看到这些:</p>
<ul>
<li>工程的名字</li>
<li>工程的描述</li>
<li>一系列的文件</li>
</ul>
<blockquote>
<p>拥有良好的布局，事半功倍。</p>
</blockquote>
<h2 id="仓库样例"><a href="#仓库样例" class="headerlink" title="仓库样例"></a>仓库样例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">README.rst</span><br><span class="line">LICENSE</span><br><span class="line">setup.py</span><br><span class="line">requirements.txt</span><br><span class="line">sample/__init__.py</span><br><span class="line">sample/core.py</span><br><span class="line">sample/helpers.py</span><br><span class="line">docs/conf.py</span><br><span class="line">docs/index.rst</span><br><span class="line">tests/<span class="built_in">test</span>_basic.py</span><br><span class="line">tests/<span class="built_in">test</span>_advanced.py</span><br></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>除了源代码本身以外，这个毫无疑问是您仓库最重要的一部分。在这个文件中要有完整的许可说明和授权。</p>
<p>如果您不太清楚您应该使用哪种许可方式，请查看 choosealicense.com.</p>
<h2 id="Setup-py"><a href="#Setup-py" class="headerlink" title="Setup.py"></a>Setup.py</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html" target="_blank" rel="external">结构化你的工程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Search Cmd]]></title>
      <url>http://iequa.com/2017/10/24/ops/ops-linux-cmd-file-search/</url>
      <content type="html"><![CDATA[<p>which，whereis，locate，find，find exec，find xargs，find…</p>
<a id="more"></a>
<p>which   查看可执行文件的位置。<br>whereis 查看文件的位置。<br>locate  配合数据库查看文件位置。<br>find    实际搜寻硬盘查询文件名称。  </p>
<h2 id="1-which"><a href="#1-which" class="headerlink" title="1. which"></a>1. which</h2><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which pwd</span></span><br><span class="line">/bin/<span class="built_in">pwd</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  which adduser</span></span><br><span class="line">/usr/sbin/adduser</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>cd 是bash 内建的命令！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">which</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">cd</span>: shell built-in <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>which 默认是找 PATH 内所规范的目录，所以当然一定找不到的！</p>
</blockquote>
<h2 id="2-whereis"><a href="#2-whereis" class="headerlink" title="2. whereis"></a>2. whereis</h2><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>
<p>和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通 过遍历硬盘来查找，效率自然会很高。 </p>
<p>但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>
<h2 id="3-locate"><a href="#3-locate" class="headerlink" title="3. locate"></a>3. locate</h2><p>locate命令可以在搜寻数据库时快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性建立的，locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc/crontab)</p>
<p>locate指定用在搜寻符合条件的档案，它会去储存档案与目录名称的数据库内，寻找合乎范本样式条件的档案或目录录，可以使用特殊字元（如”<em>” 或”?”等）来指定范本样式，如指定范本为kcpa</em>ner, locate会找出所有起始字串为kcpa且结尾为ner的档案或目录，如名称为kcpartner若目录录名称为kcpa_ner则会列出该目录下包括 子目录在内的所有档案。</p>
<p>locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</p>
<blockquote>
<p>mac 默认没启动 locate</p>
</blockquote>
<h2 id="4-find"><a href="#4-find" class="headerlink" title="4. find"></a>4. find</h2><h3 id="4-1-查找指定时间内修改过的文件"><a href="#4-1-查找指定时间内修改过的文件" class="headerlink" title="4.1 查找指定时间内修改过的文件"></a>4.1 查找指定时间内修改过的文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@peidachang ~]<span class="comment"># find -atime -2</span></span><br><span class="line">.</span><br><span class="line">./logs/monitor</span><br><span class="line">./.bashrc</span><br><span class="line">./.bash_profile</span><br><span class="line">./.bash_<span class="built_in">history</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：超找48小时内修改过的文件 </p>
</blockquote>
<h3 id="4-2-根据关键字查找"><a href="#4-2-根据关键字查找" class="headerlink" title="4.2 根据关键字查找"></a>4.2 根据关键字查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*.log"</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-查找当前所有目录并排序"><a href="#4-3-查找当前所有目录并排序" class="headerlink" title="4.3 查找当前所有目录并排序"></a>4.3 查找当前所有目录并排序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -type d | sort</span><br></pre></td></tr></table></figure>
<h3 id="4-4-按类型查找"><a href="#4-4-按类型查找" class="headerlink" title="4.4 按类型查找"></a>4.4 按类型查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -type f -name <span class="string">"*.log"</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-查找当前所有目录并排序"><a href="#4-5-查找当前所有目录并排序" class="headerlink" title="4.5 查找当前所有目录并排序"></a>4.5 查找当前所有目录并排序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -type d | sort</span><br></pre></td></tr></table></figure>
<h3 id="4-6-按大小查找文件"><a href="#4-6-按大小查找文件" class="headerlink" title="4.6 按大小查找文件"></a>4.6 按大小查找文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -size +1000c -print</span><br></pre></td></tr></table></figure>
<h2 id="5-find命令之exec"><a href="#5-find命令之exec" class="headerlink" title="5. find命令之exec"></a>5. find命令之exec</h2><p>find是我们很常用的一个Linux命令，但是我们一般查找出来的并不仅仅是看看而已，还会有进一步的操作，这个时候exec的作用就显现出来了。 </p>
<p><strong>exec解释：</strong></p>
<p>-exec  参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。  </p>
<p>{}   花括号代表前面find查找出来的文件名。  </p>
<p>使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找，很方便的。在有些操作系统中只允许-exec选项执行诸如l s或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件。 exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。</p>
<h3 id="5-1-ls-l命令放find命令的-exec"><a href="#5-1-ls-l命令放find命令的-exec" class="headerlink" title="5.1 ls -l命令放find命令的-exec"></a>5.1 ls -l命令放find命令的-exec</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/github/test [15:45:03]</span></span><br><span class="line">➜ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:44 <span class="built_in">log</span>1</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>2</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>3</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>4</span><br><span class="line">(vpy2)</span><br><span class="line"><span class="comment"># ~/ghome/github/test [15:45:03]</span></span><br><span class="line">➜ find . -type f -exec ls <span class="_">-l</span> &#123;&#125; \;</span><br><span class="line">-rw-r--r--  1 blair  staff  0 Oct 28 15:45 ./<span class="built_in">log</span>4</span><br><span class="line">-rw-r--r--  1 blair  staff  0 Oct 28 15:45 ./<span class="built_in">log</span>3</span><br><span class="line">-rw-r--r--  1 blair  staff  0 Oct 28 15:45 ./<span class="built_in">log</span>2</span><br><span class="line">-rw-r--r--  1 blair  staff  0 Oct 28 15:44 ./<span class="built_in">log</span>1</span><br><span class="line">(vpy2)</span><br><span class="line"><span class="comment"># ~/ghome/github/test [15:45:04]</span></span><br><span class="line">➜</span><br></pre></td></tr></table></figure>
<h3 id="5-2-更改时间在n日以前的文件并删除"><a href="#5-2-更改时间在n日以前的文件并删除" class="headerlink" title="5.2 更改时间在n日以前的文件并删除"></a>5.2 更改时间在n日以前的文件并删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -mtime +14 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-更改时间在n日前文件并提示删除"><a href="#5-3-更改时间在n日前文件并提示删除" class="headerlink" title="5.3 更改时间在n日前文件并提示删除"></a>5.3 更改时间在n日前文件并提示删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~/ghome/github/test [15:47:35]</span><br><span class="line">➜ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:44 log1</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 log2</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 log3</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 log4</span><br><span class="line">(vpy2)</span><br><span class="line"># ~/ghome/github/test [15:47:38]</span><br><span class="line">➜ find . -name &quot;*log*&quot; -mtime -1 -ok rm &#123;&#125; \;</span><br><span class="line">&quot;rm ./log4&quot;?</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示</p>
</blockquote>
<h3 id="5-4-exec中使用grep命令"><a href="#5-4-exec中使用grep命令" class="headerlink" title="5.4 -exec中使用grep命令"></a>5.4 -exec中使用grep命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /etc -name <span class="string">"passwd*"</span> -exec grep <span class="string">"root"</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-查找文件移动到指定目录"><a href="#5-5-查找文件移动到指定目录" class="headerlink" title="5.5 查找文件移动到指定目录"></a>5.5 查找文件移动到指定目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*.log"</span> -exec mv &#123;&#125; .. \;</span><br></pre></td></tr></table></figure>
<h3 id="5-6-exec选项执行cp命令"><a href="#5-6-exec选项执行cp命令" class="headerlink" title="5.6 exec选项执行cp命令"></a>5.6 exec选项执行cp命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.log&quot; -exec cp &#123;&#125; test3 \;</span><br></pre></td></tr></table></figure>
<h2 id="6-find命令之xargs"><a href="#6-find命令之xargs" class="headerlink" title="6. find命令之xargs"></a>6. find命令之xargs</h2><p>在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。  </p>
<p>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。  </p>
<p>在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p>
<h3 id="6-1-find-type-f-print-xargs-file"><a href="#6-1-find-type-f-print-xargs-file" class="headerlink" title="6.1 find . -type f -print | xargs file"></a>6.1 find . -type f -print | xargs file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/github/test [7:41:40]</span></span><br><span class="line">➜ find . -type f -print | xargs file</span><br><span class="line">./<span class="built_in">log</span>4: empty</span><br><span class="line">./<span class="built_in">log</span>3: empty</span><br><span class="line">./<span class="built_in">log</span>2: empty</span><br><span class="line">./<span class="built_in">log</span>1: ASCII text</span><br><span class="line">(vpy2)</span><br></pre></td></tr></table></figure>
<h3 id="6-2-用户具有读、写和执行权限的文件，并收回相应的写权限"><a href="#6-2-用户具有读、写和执行权限的文件，并收回相应的写权限" class="headerlink" title="6.2 用户具有读、写和执行权限的文件，并收回相应的写权限"></a>6.2 用户具有读、写和执行权限的文件，并收回相应的写权限</h3><p>find . -perm -7 -print | xargs chmod o-w</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/github/test [7:44:26]</span></span><br><span class="line">➜ find . -perm -7 -print</span><br><span class="line">./<span class="built_in">log</span>3</span><br><span class="line">(vpy2)</span><br><span class="line"><span class="comment"># ~/ghome/github/test [7:44:27]</span></span><br><span class="line">➜ find . -perm -7 -print | xargs chmod o-w</span><br><span class="line">(vpy2)</span><br><span class="line"><span class="comment"># ~/ghome/github/test [7:44:49]</span></span><br><span class="line">➜ ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 blair  staff    32B Oct 28 15:54 <span class="built_in">log</span>1</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>2</span><br><span class="line">-rwxrwxr-x  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>3</span><br><span class="line">-rw-r--r--  1 blair  staff     0B Oct 28 15:45 <span class="built_in">log</span>4</span><br><span class="line">(vpy2)</span><br><span class="line"><span class="comment"># ~/ghome/github/test [7:44:50]</span></span><br></pre></td></tr></table></figure>
<h3 id="6-3-grep命令在所有的普通文件中搜索hostname这个词"><a href="#6-3-grep命令在所有的普通文件中搜索hostname这个词" class="headerlink" title="6.3 grep命令在所有的普通文件中搜索hostname这个词"></a>6.3 grep命令在所有的普通文件中搜索hostname这个词</h3><p>find . -type f -print | xargs grep “hostname”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># find . -type f -print | xargs grep "hostname"</span></span><br><span class="line">./<span class="built_in">log</span>2013.log:hostnamebaidu=baidu.com</span><br><span class="line">./<span class="built_in">log</span>2013.log:hostnamesina=sina.com</span><br><span class="line">./<span class="built_in">log</span>2013.log:hostnames=<span class="literal">true</span>[root@localhost <span class="built_in">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="6-4-使用xargs执行mv"><a href="#6-4-使用xargs执行mv" class="headerlink" title="6.4 使用xargs执行mv"></a>6.4 使用xargs执行mv</h3><p>find . -name “*.log” | xargs -i mv {} test4</p>
<blockquote>
<p>使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符</p>
</blockquote>
<h3 id="6-5-xargs的-p参数的使用"><a href="#6-5-xargs的-p参数的使用" class="headerlink" title="6.5 xargs的-p参数的使用"></a>6.5 xargs的-p参数的使用</h3><p>find . -name “*.log” | xargs -p -i mv {} ..</p>
<blockquote>
<p>-p参数会提示让你确认是否执行后面的命令,y执行，n不执行。</p>
</blockquote>
<h2 id="7-find-命令的参数详解"><a href="#7-find-命令的参数详解" class="headerlink" title="7. find 命令的参数详解"></a>7. <a href="http://www.cnblogs.com/peida/archive/2012/11/16/2773289.html" target="_blank" rel="external">find 命令的参数详解</a></h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/05/2803591.html" target="_blank" rel="external">每天一个linux命令目录</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux File Basic Cmd]]></title>
      <url>http://iequa.com/2017/10/23/ops/ops-linux-cmd-1-file-directory-operation/</url>
      <content type="html"><![CDATA[<p>ls, cd, pwd, mkdir, rm, rmdir, mv, cp, touch, cat, nl, more, less, head, tail</p>
<a id="more"></a>
<h2 id="1-ls"><a href="#1-ls" class="headerlink" title="1. ls"></a>1. ls</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l -R /home/blair/ghome</span><br><span class="line">ls -ctrl s*</span><br></pre></td></tr></table></figure>
<p>列出 /opt/soft 文件下面的子目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -F /opt/soft |grep /$</span><br></pre></td></tr></table></figure>
<p>目录于名称后加”/“, 可执行档于名称后加”*” </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -AFl</span><br></pre></td></tr></table></figure>
<p>列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="variable">$PWD</span> -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure>
<p>递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="variable">$PWD</span> | xargs ls -ld</span><br></pre></td></tr></table></figure>
<h2 id="2-cd"><a href="#2-cd" class="headerlink" title="2. cd"></a>2. cd</h2><blockquote>
<p><code>cd -</code> or <code>cd</code> or <code>cd ~</code></p>
</blockquote>
<h2 id="3-pwd"><a href="#3-pwd" class="headerlink" title="3. pwd"></a>3. pwd</h2><p><code>pwd -P</code> 显示出实际路径，而非使用连接（link）路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /usr/local/xsoft/software/scala [22:17:59]</span><br><span class="line">➜ pwd</span><br><span class="line">/usr/local/xsoft/software/scala</span><br><span class="line">(vpy3)</span><br><span class="line"># /usr/local/xsoft/software/scala [22:17:59]</span><br><span class="line">➜ pwd -P</span><br><span class="line">/usr/local/xsoft/deploy/scala-2.11.7</span><br><span class="line">(vpy3)</span><br><span class="line"># /usr/local/xsoft/software/scala [22:18:02]</span><br><span class="line">➜</span><br></pre></td></tr></table></figure>
<h2 id="4-mkdir"><a href="#4-mkdir" class="headerlink" title="4. mkdir"></a>4. mkdir</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span>1</span><br><span class="line">mkdir -p <span class="built_in">test</span>2/<span class="built_in">test</span>22</span><br><span class="line">mkdir -m 777 <span class="built_in">test</span>3</span><br><span class="line">mkdir -v <span class="built_in">test</span>4</span><br></pre></td></tr></table></figure>
<p>一个命令创建项目的目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/seek/test2 [22:23:06]</span></span><br><span class="line">➜ mkdir -vp scf/&#123;lib/,bin/,doc/&#123;info,product&#125;,logs/&#123;info,product&#125;,service/deploy/&#123;info,product&#125;&#125;</span><br><span class="line">(vpy3)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~/ghome/seek/test2 [22:23:08]</span><br><span class="line">➜ tree</span><br><span class="line">.</span><br><span class="line">└── scf</span><br><span class="line">    ├── bin</span><br><span class="line">    ├── doc</span><br><span class="line">    │   ├── info</span><br><span class="line">    │   └── product</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── logs</span><br><span class="line">    │   ├── info</span><br><span class="line">    │   └── product</span><br><span class="line">    └── service</span><br><span class="line">        └── deploy</span><br><span class="line">            ├── info</span><br><span class="line">            └── product</span><br><span class="line"></span><br><span class="line">13 directories, 0 files</span><br><span class="line">(vpy3)</span><br><span class="line"># ~/ghome/seek/test2 [22:23:10]</span><br></pre></td></tr></table></figure>
<h2 id="5-rm"><a href="#5-rm" class="headerlink" title="5. rm"></a>5. rm</h2><p>-f, –force    忽略不存在的文件，从不给出提示。<br>-i, –interactive 进行交互式删除<br>-r, -R, –recursive   指示rm将参数中列出的全部目录和子目录均递归地删除。<br>-v, –verbose    详细显示进行的步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/ghome/seek/test2 [22:29:28]</span></span><br><span class="line">➜ rm -i f1</span><br><span class="line">remove f1?</span><br></pre></td></tr></table></figure>
<p><strong>自定义回收站功能</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myrm</span></span>()&#123; D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p <span class="variable">$D</span>; mv <span class="string">"<span class="variable">$@</span>"</span> <span class="variable">$D</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"moved to <span class="variable">$D</span> ok"</span>; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>for example</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# myrm()&#123; D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D; mv &quot;$@&quot; $D &amp;&amp; echo &quot;moved to $D ok&quot;; &#125;</span><br><span class="line">[root@localhost test]# alias rm=&apos;myrm&apos;</span><br><span class="line">[root@localhost test]# touch 1.log 2.log 3.log</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">总计 16</span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 1.log</span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 2.log</span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 3.log</span><br><span class="line">drwxr-xr-x 7 root root 4096 10-25 18:07 scf</span><br><span class="line">drwxrwxrwx 2 root root 4096 10-25 17:46 test3</span><br><span class="line">drwxr-xr-x 2 root root 4096 10-25 17:56 test4</span><br><span class="line">drwxr-xr-x 3 root root 4096 10-25 17:56 test5</span><br><span class="line">[root@localhost test]# rm [123].log</span><br><span class="line">moved to /tmp/20121026150901 ok</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">总计 16drwxr-xr-x 7 root root 4096 10-25 18:07 scf</span><br><span class="line">drwxrwxrwx 2 root root 4096 10-25 17:46 test3</span><br><span class="line">drwxr-xr-x 2 root root 4096 10-25 17:56 test4</span><br><span class="line">drwxr-xr-x 3 root root 4096 10-25 17:56 test5</span><br><span class="line">[root@localhost test]# ls /tmp/20121026150901/</span><br><span class="line">1.log  2.log  3.log</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Reference: </strong> <a href="http://www.cnblogs.com/peida/archive/2012/10/26/2740521.html" target="_blank" rel="external">每天一个linux命令（5）：rm 命令</a></p>
</blockquote>
<h2 id="6-rmdir"><a href="#6-rmdir" class="headerlink" title="6. rmdir"></a>6. rmdir</h2><blockquote>
<p>删除空目录</p>
<p>rmdir -p 当子目录被删除后使它也成为空目录的话，则顺便一并删除 </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost scf]<span class="comment"># rmdir -p logs</span></span><br><span class="line">rmdir: logs: 目录非空</span><br><span class="line"></span><br><span class="line">[root@localhost scf]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">|-- bin</span><br><span class="line">|-- doc</span><br><span class="line">|-- lib</span><br><span class="line">|-- logs</span><br><span class="line">|   `-- product</span><br><span class="line">`-- service</span><br><span class="line">    `-- deploy</span><br><span class="line">        |-- info</span><br><span class="line">        `-- product</span><br><span class="line"> </span><br><span class="line">9 directories, 0 files</span><br></pre></td></tr></table></figure>
<p>[root@localhost scf]# rmdir -p logs/product</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost scf]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">|-- bin</span><br><span class="line">|-- doc</span><br><span class="line">|-- lib</span><br><span class="line">`-- service</span><br><span class="line">`-- deploy</span><br><span class="line">        |-- info</span><br><span class="line">        `-- product</span><br></pre></td></tr></table></figure>
<h2 id="7-mv"><a href="#7-mv" class="headerlink" title="7. mv"></a>7. mv</h2><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！<br>-t  ： –target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</p>
<h2 id="8-cp"><a href="#8-cp" class="headerlink" title="8. cp"></a>8. cp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -a test3 test4</span><br><span class="line">cp -s log.log log_link.log</span><br></pre></td></tr></table></figure>
<h2 id="9-touch"><a href="#9-touch" class="headerlink" title="9. touch"></a>9. touch</h2><p>设定文件的时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch -t 201211142234.50 log.log</span><br></pre></td></tr></table></figure>
<p>更新 log2012.log 的时间和 log.log 时间戳相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch -r log.log log2012.log</span><br></pre></td></tr></table></figure>
<h2 id="10-cat"><a href="#10-cat" class="headerlink" title="10. cat"></a>10. cat</h2><ol>
<li>一次显示整个文件:cat filename</li>
<li>从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</li>
<li>将几个文件合并为一个文件:cat file1 file2 &gt; file</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ cat -n log.log <span class="built_in">log</span>2012.log</span><br><span class="line">     1	asd</span><br><span class="line">     2</span><br><span class="line">     3	asd</span><br><span class="line">     1	k1</span><br><span class="line">     2	k2</span><br><span class="line">     3</span><br><span class="line">     4	k3</span><br><span class="line">(vpy3)</span><br><span class="line"><span class="comment"># ~/ghome/seek/test2 [23:02:19]</span></span><br><span class="line">➜</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tac (反向列示).<br>tac log.txt</p>
</blockquote>
<h2 id="11-nl"><a href="#11-nl" class="headerlink" title="11. nl"></a>11. nl</h2><p>nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！</p>
<p>命令参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-b  ：指定行号指定的方式，主要有两种：</span><br><span class="line">-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；</span><br><span class="line">-b t ：如果有空行，空的那一行不要列出行号(默认值)；</span><br><span class="line">-n  ：列出行号表示的方法，主要有三种：</span><br><span class="line">-n ln ：行号在萤幕的最左方显示；</span><br><span class="line">-n rn ：行号在自己栏位的最右方显示，且不加 0 ；</span><br><span class="line">-n rz ：行号在自己栏位的最右方显示，且加 0 ；</span><br><span class="line">-w  ：行号栏位的占用的位数。</span><br><span class="line">-p 在逻辑定界符处不重新开始计算。</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># nl log2012.log </span></span><br><span class="line">     1  2012-01</span><br><span class="line">     2  2012-02</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">     3  ======[root@localhost <span class="built_in">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# nl -b a log2012.log </span><br><span class="line">     1  2012-01</span><br><span class="line">     2  2012-02</span><br><span class="line">     3</span><br><span class="line">     4</span><br><span class="line">     5  ======[root@localhost test]#</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># nl -b a -n rz log2014.log </span></span><br><span class="line">000001  2014-01</span><br><span class="line">000002  2014-02</span><br><span class="line">000003  2014-03</span><br><span class="line">000004  2014-04</span><br><span class="line">000005  2014-05</span><br><span class="line">000006  2014-06</span><br><span class="line">000007  2014-07</span><br><span class="line">000008  2014-08</span><br><span class="line">000009  2014-09</span><br><span class="line">000010  2014-10</span><br><span class="line">000011  2014-11</span><br><span class="line">000012  2014-12</span><br><span class="line">000013  =======</span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># nl -b a -n rz -w 3 log2014.log </span></span><br><span class="line">001     2014-01</span><br><span class="line">002     2014-02</span><br><span class="line">003     2014-03</span><br><span class="line">004     2014-04</span><br><span class="line">005     2014-05</span><br><span class="line">006     2014-06</span><br><span class="line">007     2014-07</span><br><span class="line">008     2014-08</span><br><span class="line">009     2014-09</span><br><span class="line">010     2014-10</span><br><span class="line">011     2014-11</span><br><span class="line">012     2014-12</span><br><span class="line">013     =======</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明： nl -b a -n rz 命令行号默认为六位，要调整位数可以加上参数 -w 3 调整为3位。</p>
</blockquote>
<h2 id="12-more"><a href="#12-more" class="headerlink" title="12. more"></a>12. more</h2><p>命令参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+n       从笫n行开始显示</span><br><span class="line">-n       定义屏幕大小为n行</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# cat log2012.log </span><br><span class="line">2012-01</span><br><span class="line">2012-02</span><br><span class="line">2012-03</span><br><span class="line">2012-04-day1</span><br><span class="line">2012-04-day2</span><br><span class="line">2012-04-day3</span><br><span class="line">======[root@localhost test]# more +3 log2012.log </span><br><span class="line">2012-03</span><br><span class="line">2012-04-day1</span><br><span class="line">2012-04-day2</span><br><span class="line">2012-04-day3</span><br><span class="line">======[root@localhost test]#</span><br></pre></td></tr></table></figure>
<p>设定每屏显示行数   more -5 log2012.log. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># more -5 log2012.log </span></span><br><span class="line">2012-01</span><br><span class="line">2012-02</span><br><span class="line">2012-03</span><br><span class="line">2012-04-day1</span><br><span class="line">2012-04-day2</span><br></pre></td></tr></table></figure>
<p>列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls <span class="_">-l</span>  | more -5</span><br></pre></td></tr></table></figure>
<h2 id="13-less"><a href="#13-less" class="headerlink" title="13. less"></a>13. less</h2><p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。</p>
<p>less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！</p>
<p>在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">less <span class="built_in">log</span>2013.log</span><br><span class="line"></span><br><span class="line">ps -ef |less</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> | less</span><br></pre></td></tr></table></figure>
<p>输出文件除了最后n行的全部内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head -n -6 <span class="built_in">log</span>2014.log</span><br></pre></td></tr></table></figure>
<h2 id="14-head"><a href="#14-head" class="headerlink" title="14. head"></a>14. head</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# head -n 5 log2014.log </span><br><span class="line">2014-01</span><br><span class="line">2014-02</span><br><span class="line">2014-03</span><br><span class="line">2014-04</span><br><span class="line">2014-05[root@localhost test]#</span><br></pre></td></tr></table></figure>
<p>显示文件前n个字节  head -c 20 log2014.log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># head -c 20 log2014.log</span></span><br><span class="line">2014-01</span><br><span class="line">2014-02</span><br><span class="line">2014</span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>输出文件除了最后n行的全部内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -n -6 log2014.log</span><br></pre></td></tr></table></figure>
<h2 id="15-tail"><a href="#15-tail" class="headerlink" title="15. tail"></a>15. tail</h2><p>显示文件末尾内容. tail -n 5 log2014.log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># tail -n 5 log2014.log </span></span><br><span class="line">2014-09</span><br><span class="line">2014-10</span><br><span class="line">2014-11</span><br><span class="line">2014-12</span><br><span class="line">==============================[root@localhost <span class="built_in">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>循环查看文件内容 tail -f test.log</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.cnblogs.com/peida/tag/每日一linux命令/" target="_blank" rel="external">每日一linux命令</a></li>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/05/2803591.html" target="_blank" rel="external">每天一个linux命令目录</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[My Zsh Config Files]]></title>
      <url>http://iequa.com/2017/10/21/ops/ops-zsh-config/</url>
      <content type="html"><![CDATA[<p><strong>~/.zprofile</strong> and <strong>~/.zshrc</strong> custom config</p>
<a id="more"></a>
<h2 id="zprofile"><a href="#zprofile" class="headerlink" title=".zprofile"></a>.zprofile</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">###################################################</span></span><br><span class="line"><span class="comment">###       blair custom config @2017.10.21       ###</span></span><br><span class="line"><span class="comment">###################################################</span></span><br><span class="line"></span><br><span class="line">MS=/usr/<span class="built_in">local</span>/xsoft/software</span><br><span class="line"></span><br><span class="line"><span class="comment">### JAVA ###</span></span><br><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/Contents/Home</span><br><span class="line">JAVA_BIN=<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JAVA_BIN PATH CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment">### Maven ###</span></span><br><span class="line">M2_HOME=/usr/<span class="built_in">local</span>/xsoft/software/apache-maven</span><br><span class="line">MAVEN_HOME=<span class="variable">$M2_HOME</span></span><br><span class="line">M3_HOME=<span class="variable">$M2_HOME</span></span><br><span class="line">PATH=<span class="variable">$M3_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#MAVEN_OPTS="-Xms128m -Xmx512m"</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME M2_HOME PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">### Tomcat ###</span></span><br><span class="line">CATALINA_HOME=/usr/<span class="built_in">local</span>/xsoft/software/apache-tomcat</span><br><span class="line">PATH=<span class="variable">$CATALINA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">### Scala ###</span></span><br><span class="line"><span class="comment">#export SCALA_HOME=/usr/local/xsoft/software/scala</span></span><br><span class="line"><span class="comment">#export SCALA_HOME=/usr/local/Cellar/scala/2.11.5</span></span><br><span class="line"><span class="comment">#export PATH=$&#123;SCALA_HOME&#125;/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Spark ###</span></span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/xsoft/software/spark</span><br><span class="line"></span><br><span class="line"><span class="comment">### IPython ###</span></span><br><span class="line"><span class="built_in">alias</span> ipython=<span class="string">'python -m IPython'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Pyenv ###</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/Users/blair/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">alias</span> pyenv_init=<span class="string">'eval "$(pyenv init -)" &amp;&amp; eval "$(pyenv virtualenv-init -)"'</span></span><br><span class="line">pyenv_init</span><br><span class="line"><span class="comment">#export PYENV_VIRTUALENV_DISABLE_PROMPT=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Node.js ###</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line"><span class="comment">#[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm</span></span><br><span class="line"><span class="comment">#[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### LANG ###</span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment">### Fast Function ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show ip</span></span><br><span class="line"><span class="built_in">alias</span> ip=<span class="string">'ipconfig getifaddr en0'</span></span><br><span class="line"><span class="built_in">alias</span> ip0=<span class="string">'ipconfig getifaddr en0'</span></span><br><span class="line"><span class="built_in">alias</span> ip1=<span class="string">'ipconfig getifaddr en1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shutdown</span></span><br><span class="line"><span class="built_in">alias</span> shuth=<span class="string">'sudo shutdown -h now'</span></span><br><span class="line"><span class="built_in">alias</span> shutr=<span class="string">'sudo shutdown -r now'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip list</span></span><br><span class="line"><span class="built_in">alias</span> pipl=<span class="string">'pip list --format=columns'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsof -i:port</span></span><br><span class="line"><span class="built_in">alias</span> lsofi=<span class="string">'lsof -i:'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http_proxy</span></span><br><span class="line"><span class="built_in">alias</span> hp=<span class="string">"http_proxy=http://localhost:8123"</span></span><br><span class="line"><span class="built_in">alias</span> hps=<span class="string">"https_proxy=http://localhost:8123"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo</span></span><br><span class="line"><span class="built_in">alias</span> hx=<span class="string">'source ~/.nvm/nvm.sh'</span></span><br><span class="line"><span class="built_in">alias</span> hs=<span class="string">'hx &amp;&amp; cd ~/ghome/blog &amp;&amp; hexo s'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy blog</span></span><br><span class="line"><span class="built_in">alias</span> db=<span class="string">'hx &amp;&amp; cd ~/ghome/blog &amp;&amp; hexo clean &amp;&amp; sh dp.sh'</span></span><br><span class="line"><span class="built_in">alias</span> dg=<span class="string">'cd ~/ghome/blog &amp;&amp; hexo clean &amp;&amp; sh dp.sh'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pyenv</span></span><br><span class="line"><span class="built_in">alias</span> pyenv_install_python_pre=<span class="string">'source $MS/custom-machine/pyenv-install.sh'</span></span><br><span class="line"><span class="built_in">alias</span> py2=<span class="string">'pyenv_init &amp;&amp; pyenv activate vpy2 &amp;&amp; clear &amp;&amp; python -V'</span></span><br><span class="line"><span class="built_in">alias</span> py3=<span class="string">'pyenv_init &amp;&amp; pyenv activate vpy3 &amp;&amp; clear &amp;&amp; python -V'</span></span><br><span class="line"><span class="built_in">alias</span> pyde=<span class="string">'pyenv deactivate'</span></span><br><span class="line"><span class="built_in">alias</span> pys=<span class="string">'pyenv activate vpy3 &amp;&amp; pyenv global system &amp;&amp; pyde &amp;&amp; python -V'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zshrc</span></span><br><span class="line"><span class="built_in">alias</span> vzp=<span class="string">'vim ~/.zprofile'</span></span><br><span class="line"><span class="built_in">alias</span> szp=<span class="string">'source ~/.zprofile'</span></span><br></pre></td></tr></table></figure>
<h2 id="zshrc"><a href="#zshrc" class="headerlink" title=".zshrc"></a>.zshrc</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you come from bash you might have to change your $PATH.</span></span><br><span class="line"><span class="comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your oh-my-zsh installation.</span></span><br><span class="line"><span class="built_in">export</span> ZSH=/Users/blair/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set name of the theme to load. Optionally, if you set this to "random"</span></span><br><span class="line"><span class="comment"># it'll load a random theme each time that oh-my-zsh is loaded.</span></span><br><span class="line"><span class="comment"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span></span><br><span class="line">ZSH_THEME=<span class="string">"robbyrussell"</span></span><br><span class="line"><span class="comment"># by blair add @2017-10-10</span></span><br><span class="line"><span class="comment">#ZSH_THEME="ys" </span></span><br><span class="line">ZSH_THEME=<span class="string">"astro"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use hyphen-insensitive completion. Case</span></span><br><span class="line"><span class="comment"># sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class="line"><span class="comment"># export UPDATE_ZSH_DAYS=13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable colors in ls.</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable command auto-correction.</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class="line"><span class="comment"># COMPLETION_WAITING_DOTS="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to change the command execution time</span></span><br><span class="line"><span class="comment"># stamp shown in the history command output.</span></span><br><span class="line"><span class="comment"># The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span></span><br><span class="line"><span class="comment"># HIST_STAMPS="mm/dd/yyyy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(git)</span><br><span class="line">plugins=(git autojump) <span class="comment"># by blair add @2017-10-10</span></span><br><span class="line"><span class="comment">#[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># export MANPATH="/usr/local/man:$MANPATH"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR='vim'</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR='mvim'</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS="-arch x86_64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line"><span class="comment"># export SSH_KEY_PATH="~/.ssh/rsa_id"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig="mate ~/.zshrc"</span></span><br><span class="line"><span class="comment"># alias ohmyzsh="mate ~/.oh-my-zsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################</span></span><br><span class="line"><span class="comment">###       blair custom config @2017.10.21       ###</span></span><br><span class="line"><span class="comment">###################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Fast Login Machine Function ###</span></span><br><span class="line"><span class="comment"># ssh add</span></span><br><span class="line"><span class="built_in">alias</span> sd=<span class="string">'ssh-add'</span></span><br><span class="line"><span class="built_in">alias</span> x2=<span class="string">'ssh loguser@192.168.***.*'</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Macos Terminal Set Shadowsocks]]></title>
      <url>http://iequa.com/2017/10/19/ops/ops-mac-for-shadowsocks/</url>
      <content type="html"><![CDATA[<ol>
<li>first, you need to have vps</li>
<li>second, you need to have shadowsocks app</li>
</ol>
<a id="more"></a>
<p><img src="/images/ops/ops-vpn-shadowsocks.png" width="520" height="300" align="middle" img="">  </p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install polipo</span><br></pre></td></tr></table></figure>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>设置每次登陆启动polipo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents</span><br></pre></td></tr></table></figure>
<p>修改文件 <code>/usr/local/opt/polipo/homebrew.mxcl.polipo.plist</code> 设置parentProxy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">  &lt;dict&gt;</span><br><span class="line">    &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;homebrew.mxcl.polipo&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">    &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;string&gt;/usr/local/opt/polipo/bin/polipo&lt;/string&gt;</span><br><span class="line">        &lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;</span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">    &lt;!-- Set `ulimit -n 20480`. The default OS X limit is 256, that&apos;s</span><br><span class="line">         not enough for Polipo (displays &apos;too many files open&apos; errors).</span><br><span class="line">         It seems like you have no reason to lower this limit</span><br><span class="line">         (and unlikely will want to raise it). --&gt;</span><br><span class="line">    &lt;key&gt;SoftResourceLimits&lt;/key&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">      &lt;key&gt;NumberOfFiles&lt;/key&gt;</span><br><span class="line">      &lt;integer&gt;20480&lt;/integer&gt;</span><br><span class="line">    &lt;/dict&gt;</span><br><span class="line">  &lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>
<p>修改的地方是增加了 <code>&lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;</code></p>
<h2 id="start-stop"><a href="#start-stop" class="headerlink" title="start / stop"></a>start / stop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</span><br></pre></td></tr></table></figure>
<h2 id="setting-profile"><a href="#setting-profile" class="headerlink" title="setting profile"></a>setting profile</h2><p>vim ~/.zshrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#export http_proxy=http://localhost:8123</span><br><span class="line">alias hp=&quot;http_proxy=http://localhost:8123&quot;</span><br></pre></td></tr></table></figure>
<p>source ~/.zshrc</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ hp curl ip.cn</span><br><span class="line">当前 IP：97.64.**.** 来自：美国</span><br></pre></td></tr></table></figure>
<h2 id="reference-article"><a href="#reference-article" class="headerlink" title="reference article"></a>reference article</h2><ul>
<li><a href="http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/" target="_blank" rel="external">技术小黑屋</a></li>
<li><a href="https://segmentfault.com/a/1190000008449046" target="_blank" rel="external">Mac+shadowsocks+polipo快捷实现终端科学上网</a></li>
<li><a href="http://blog.liujiangbei.com/14532622130324.html" target="_blank" rel="external">VPS-install-shadowsocks-proxy</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Macos Sierra Uninstall App & Solve Allow apps Anywhere]]></title>
      <url>http://iequa.com/2017/10/19/ops/ops-mac-sierra-some-tips/</url>
      <content type="html"><![CDATA[<p>Here are some tips to help you fun macos sierra</p>
<a id="more"></a>
<h2 id="MacOS-Sierra-amp-High-Sierra-Complete-Uninstall-App"><a href="#MacOS-Sierra-amp-High-Sierra-Complete-Uninstall-App" class="headerlink" title="MacOS Sierra &amp; High Sierra Complete Uninstall App"></a>MacOS Sierra &amp; High Sierra Complete Uninstall App</h2><blockquote>
<p>About This Mac -&gt; Storage -&gt; Manage -&gt; Applications -&gt; Delete</p>
</blockquote>
<h2 id="How-to-Allow-Apps-from-Anywhere-in-Gatekeeper-for-macOS-High-Sierra"><a href="#How-to-Allow-Apps-from-Anywhere-in-Gatekeeper-for-macOS-High-Sierra" class="headerlink" title="How to Allow Apps from Anywhere in Gatekeeper for macOS High Sierra"></a>How to Allow Apps from Anywhere in Gatekeeper for macOS High Sierra</h2><p>1). Open the Terminal app from the /Applications/Utilities/ folder and then enter the following command syntax:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>Hit return and authenticate with an admin password</p>
<p>2). Relaunch System Preferences and go to “Security &amp; Privacy” and the “General” tab</p>
<p>3). You will now see the “Anywhere” option under ‘Allow apps downloaded from:’ Gatekeeper options</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pyenv Install For Virtual Multi Python Version Switch]]></title>
      <url>http://iequa.com/2017/10/18/ops/ops-pyenv-install/</url>
      <content type="html"><![CDATA[<p>It needs to be used in both python2 and python3 environments, or different packages need to be installed in different projects.</p>
<a id="more"></a>
<p>we hope that the packages installed between different projects do not interfere with each other, and then you can configure the virtual environment of Python using pyenv.</p>
<h2 id="installation-pyenv"><a href="#installation-pyenv" class="headerlink" title="installation pyenv"></a>installation pyenv</h2><p><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="external">Official Pyenv Install</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"~/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br><span class="line"><span class="comment">#export PYENV_VIRTUALENV_DISABLE_PROMPT=1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>按照官方文档配置即可，mac zsh 用户，将 以上三句放入到 .zshrc 即可。</p>
</blockquote>
<h2 id="see-available-versions"><a href="#see-available-versions" class="headerlink" title="see available versions"></a>see available versions</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install -l</span><br></pre></td></tr></table></figure>
<h2 id="install-python-in-virtual-env"><a href="#install-python-in-virtual-env" class="headerlink" title="install python in virtual env"></a>install python in virtual env</h2><p>install python 2.7.14</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install 2.7.14</span><br></pre></td></tr></table></figure>
<p>install python 3.6.3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install 3.6.3</span><br></pre></td></tr></table></figure>
<blockquote>
<p> <a href="https://github.com/pyenv/pyenv/issues/993" target="_blank" rel="external">solve macOS High Sierra: ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># about zlib</span><br><span class="line">export CFLAGS=&quot;-I$(xcrun --show-sdk-path)/usr/include&quot;</span><br><span class="line"># about readline</span><br><span class="line">export CFLAGS=&quot;-I$(brew --prefix readline)/include $CFLAGS&quot;</span><br><span class="line">export LDFLAGS=&quot;-L$(brew --prefix readline)/lib $LDFLAGS&quot;</span><br><span class="line"># about openssl</span><br><span class="line">export CFLAGS=&quot;-I$(brew --prefix openssl)/include $CFLAGS&quot;</span><br><span class="line">export LDFLAGS=&quot;-L$(brew --prefix openssl)/lib $LDFLAGS&quot;</span><br><span class="line"># about SQLite (maybe not necessary)</span><br><span class="line">export CFLAGS=&quot;-I$(brew --prefix sqlite)/include $CFLAGS&quot;</span><br><span class="line">export LDFLAGS=&quot;-L$(brew --prefix sqlite)/lib $LDFLAGS&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Set or show the global Python version</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pyenv global 3.6.3 or system</span><br></pre></td></tr></table></figure>
<blockquote>
<p>system stands for this mac</p>
</blockquote>
<p>show list all Python versions available to pyenv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br></pre></td></tr></table></figure>
<h2 id="create-virtual-env"><a href="#create-virtual-env" class="headerlink" title="create virtual env"></a>create virtual env</h2><p>create current <code>3.6.3 version python</code> virtual env</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenv vpy3</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>vpy3</strong> is this virtual env alias</p>
</blockquote>
<h2 id="pyenv-activate-amp-deactivate"><a href="#pyenv-activate-amp-deactivate" class="headerlink" title="pyenv activate &amp; deactivate"></a>pyenv activate &amp; deactivate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pyenv activate vpy3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是时候就可以开始pip安装依赖包了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ pyenv activate vpy3</span><br><span class="line">pyenv-virtualenv: prompt changing will be removed from future release. configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1&apos; to simulate the behavior.</span><br><span class="line">(vpy3)</span><br><span class="line"># ~ [12:25:44]</span><br><span class="line">➜ python -V</span><br><span class="line">Python 3.6.3</span><br><span class="line">(vpy3)</span><br><span class="line"># ~ [12:25:49]</span><br><span class="line">➜ pyenv deactivate vpy3</span><br><span class="line"># ~ [12:25:57]</span><br><span class="line">➜ python -V</span><br><span class="line">Python 2.7.10</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OSX pip OSError [Errno 1] Operation not permitted]]></title>
      <url>http://iequa.com/2017/10/17/ops/ops-mac-pip-OSError/</url>
      <content type="html"><![CDATA[<p>Solved Mac OSX pip OSError, When you pip install python lib about machine-learning package.</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade gensim</span><br></pre></td></tr></table></figure>
<p>结果抛出下面这个异常报告</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OSError: [Errno 1] Operation not permitted: &apos;/tmp/pip-pvGyz6-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy, scipy, ...</span><br></pre></td></tr></table></figure>
<p>google 后解决方案 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br><span class="line"></span><br><span class="line">$ sudo pip install numpy --upgrade --ignore-installed</span><br><span class="line">$ sudo pip install scipy --upgrade --ignore-installed</span><br><span class="line">$ sudo pip install scikit-learn --upgrade --ignore-installed</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Common Useful Links]]></title>
      <url>http://iequa.com/2017/10/14/ops/ops-common-links/</url>
      <content type="html"><![CDATA[<p>Here are some useful links</p>
<a id="more"></a>
<h2 id="Deep-Learning-Coursera"><a href="#Deep-Learning-Coursera" class="headerlink" title="Deep Learning Coursera"></a>Deep Learning Coursera</h2><ul>
<li><a href="http://daniellaah.github.io/" target="_blank" rel="external">daniellaah.github.io</a></li>
<li><a href="https://www.ctolib.com/Yukong-Deeplearning-ai-Solutions.html" target="_blank" rel="external">deeplearning.ai深度学习课程字幕翻译项目</a></li>
<li><a href="https://www.cnblogs.com/marsggbo/" target="_blank" rel="external">互道晚安，王者峡谷见 机器学习 &amp; 深度学习 NG 笔记</a></li>
<li><a href="https://github.com/fengdu78/deeplearning_ai_books" target="_blank" rel="external">deeplearning.ai（吴恩达老师的深度学习课程笔记及资源）</a></li>
<li><a href="https://github.com/theBigDataDigest/Andrew-Ng-deeplearning-part-5-Course-notes-in-Chinese/blob/master/Andrew-Ng-deeplearning.ai-part-5-Course%20notes.pdf" target="_blank" rel="external">大数据文摘 deeplearning.ai Sequence Models 中文笔记</a></li>
<li><a href="https://kulbear.github.io/pdf/sequence-models.pdf" target="_blank" rel="external">Sequence Models 英文版笔记</a></li>
<li><a href="https://blog.csdn.net/column/details/dl-nlp.html" target="_blank" rel="external">寒小阳 - 深度学习与自然语言处理</a></li>
<li><a href="https://blog.csdn.net/han_xiaoyang/article/category/5877239" target="_blank" rel="external">寒小阳主页</a></li>
<li><a href="http://people.csail.mit.edu/bzhou/" target="_blank" rel="external">Bolei Zhou @Assistant Professor CUHK</a></li>
<li><a href="https://www.zhihu.com/question/49432647/answer/144958145" target="_blank" rel="external">计算机视觉和自然语言处理，哪个更具有发展前景呢，还是各有千秋呢？</a></li>
</ul>
<h2 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h2><ul>
<li><a href="https://blog.csdn.net/bvl10101111/article/details/78822739" target="_blank" rel="external">推荐系统经典论文文献及业界应用</a></li>
</ul>
<h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><ul>
<li><a href="https://github.com/explosion/sense2vec" target="_blank" rel="external">sense2vec</a></li>
<li><a href="https://www.zybuluo.com/hanxiaoyang/note/472184" target="_blank" rel="external">zybuluo hanxiaoyang</a></li>
<li><a href="https://radimrehurek.com/gensim/" target="_blank" rel="external">gensim</a></li>
<li><a href="https://yq.aliyun.com/articles/158691" target="_blank" rel="external">自然语言理解-从规则到深度学习</a></li>
<li><a href="https://plushunter.github.io/" target="_blank" rel="external">Free Will</a></li>
<li><a href="http://www.wildml.com/" target="_blank" rel="external">www.wildml.com</a></li>
</ul>
<h2 id="Friends"><a href="#Friends" class="headerlink" title="Friends"></a>Friends</h2><ul>
<li><a href="https://blog.fazero.me/" target="_blank" rel="external">fazero</a></li>
<li><a href="http://wuchong.me/" target="_blank" rel="external">ali wuchong</a></li>
<li><a href="http://www.cnblogs.com/maybe2030/" target="_blank" rel="external">Poll的笔记</a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></li>
<li><a href="https://david-abel.github.io/" target="_blank" rel="external">ICML 学霸 David Abel</a></li>
<li><a href="https://coolshell.cn" target="_blank" rel="external">酷壳</a></li>
</ul>
<h2 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h2><ul>
<li><a href="https://www.yuntionly.com/" target="_blank" rel="external">www.yuntionly.com</a></li>
<li><a href="https://www.wisevpn.net/" target="_blank" rel="external">www.wisevpn.net</a></li>
<li><a href="https://www.banwago.com/797.html" target="_blank" rel="external">www.banwago.com</a></li>
<li><a href="https://www.godaddy.com/" target="_blank" rel="external">www.godaddy.com</a></li>
<li><a href="https://www.cnbanwagong.com/4.html" target="_blank" rel="external">搬瓦工中文网</a></li>
<li><a href="https://bwh1.net/" target="_blank" rel="external">搬瓦工购买页面</a></li>
<li><a href="http://ulis.me/archives/5909" target="_blank" rel="external">搬瓦工VPS续费的那些事</a></li>
<li><a href="https://www.weibo.com/ttarticle/p/show?id=2309404240665209879945&amp;infeed=1" target="_blank" rel="external">搬瓦工取消一键SS功能后，教您三种方法轻松搭建SS！</a></li>
<li><a href="https://kiwivm.64clouds.com/preloader.php?load=/main-exec.php?mode=extras_shadowsocks" target="_blank" rel="external">登陆到搬瓦工后台, 一键安装SS，类似方法一（小白适用</a></li>
</ul>
<blockquote>
<p>ssh 登录搬瓦工机器</p>
<ol>
<li>stop server @Main controls</li>
<li>Root password modification</li>
<li>start Server</li>
<li>Root shell - interactive</li>
<li><p>vi /etc/ssh/sshd_config, add </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/init.d/sshd restart</p>
</li>
<li>ssh root@ip</li>
</ol>
</blockquote>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰 Python 3 </a></li>
<li><a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="external">elasticsearch-dsl-py</a></li>
<li><a href="https://pypi.python.org/pypi" target="_blank" rel="external">pypi.python.org/pypi</a></li>
<li><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="external">install pyenv</a></li>
<li><a href="http://flask.pocoo.org/" target="_blank" rel="external">flask microframework</a></li>
</ul>
<blockquote>
<p>pip install elasticsearch_dsl==0.0.11</p>
</blockquote>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul>
<li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">runoob linux</a></li>
<li><a href="https://shazi.info/mac-osx-%E6%B2%92%E6%9C%89%E7%9A%84-rename%EF%BC%8C%E7%94%A8-brew-%E6%8A%93%E5%9B%9E%E4%BE%86%EF%BD%9E/" target="_blank" rel="external">Mac OSX 沒有的 rename，用 brew 抓回來～</a></li>
</ul>
<h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h2><ul>
<li><a href="http://spark.apache.org/" target="_blank" rel="external">spark.apache.org</a></li>
<li><a href="http://spark.apache.org/docs/1.6.3/api/python/pyspark.sql.html#pyspark.sql.DataFrame" target="_blank" rel="external">python spark 1.6.3</a></li>
<li><a href="https://github.com/apache/spark" target="_blank" rel="external">github spark</a></li>
</ul>
<p>在 pycharm 上配置 pyspark</p>
<ul>
<li><a href="https://blog.csdn.net/rifengxxc/article/details/74503119" target="_blank" rel="external">pycharm 上配置 pyspark</a></li>
<li><a href="https://blog.csdn.net/suzyu12345/article/details/53885092" target="_blank" rel="external">Pycharm开发spark程序</a></li>
</ul>
<h2 id="devops"><a href="#devops" class="headerlink" title="devops"></a>devops</h2><ul>
<li>免登陆设置 ssh-copy-id -i id_rsa.pub hdfs@192.192.0.27</li>
</ul>
<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><ul>
<li><a href="https://www.zhihu.com/question/20021861" target="_blank" rel="external">macOS (OS X) 有哪些常用的快捷键？</a></li>
</ul>
<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><ul>
<li><a href="http://www.btcranks.com/hk/" target="_blank" rel="external">港台数字货币交易平台排名</a></li>
<li><a href="https://www.bitfinex.com/" target="_blank" rel="external">bitfinex</a></li>
<li><a href="https://www.binance.com/en" target="_blank" rel="external">binance</a></li>
<li><a href="https://www.zhihu.com/question/269003572" target="_blank" rel="external">如何把火币网的比特币移到OKEX？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36776300" target="_blank" rel="external">币安(Binance) | 注册和使用教程</a></li>
<li><a href="https://www.bitoex.com/dashboard/statistics?locale=zh-CN" target="_blank" rel="external">台湾币托</a></li>
<li><a href="https://otcbtc.com/" target="_blank" rel="external">OTCBTC - 支持场外交易，支付宝</a></li>
</ul>
<h2 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h2><ul>
<li><a href="https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging" target="_blank" rel="external">鼓励工程师写blog</a></li>
<li><a href="https://coolshell.cn/articles/17583.html" target="_blank" rel="external">技术人员的发展之路</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[My Blog Config.yml]]></title>
      <url>http://iequa.com/2017/10/08/ops/ops-hexo-blog_config.yml/</url>
      <content type="html"><![CDATA[<p>hexo blog config.yml file</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Home</span><br><span class="line">subtitle: 春有百花秋有月，夏有涼風冬有雪 .</span><br><span class="line">description: Everyone should not forget his dream</span><br><span class="line">author: Blair Chan</span><br><span class="line"><span class="comment">#avatar: /images/avatar.jpeg</span></span><br><span class="line"></span><br><span class="line">language: </span><br><span class="line">- en</span><br><span class="line">- zh-Hans</span><br><span class="line">- zh-tw</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"><span class="comment">#leancloud_visitors:</span></span><br><span class="line"><span class="comment">#  enable: true</span></span><br><span class="line"><span class="comment">#  app_id: #&lt;AppID&gt;</span></span><br><span class="line"><span class="comment">#  app_key: #&lt;AppKEY&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#comments</span></span><br><span class="line">disqus_shortname: blairos-sn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://iequa.com/</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="built_in">source</span>_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_<span class="keyword">case</span>: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">false</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">## theme: hexo-theme-next</span></span><br><span class="line"><span class="comment">## theme: yinwang</span></span><br><span class="line"><span class="comment">## theme: minos</span></span><br><span class="line">theme: blairos</span><br><span class="line"><span class="comment">## theme: jacman</span></span><br><span class="line"><span class="comment">## theme: landscape-plus</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:<span class="built_in">type</span>: git</span><br><span class="line">repository: https://github.com/52binge/52binge.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多层 LSTM 通俗版]]></title>
      <url>http://iequa.com/2017/10/07/tensorflow/tf-simple-lstms/</url>
      <content type="html"><![CDATA[<p>官方给出的例子，用多层 LSTM 来实现 PTBModel 语言模型，比如： <a href="https://blog.csdn.net/u014595019/article/details/52759104" target="_blank" rel="external">tensorflow笔记：多层LSTM代码分析</a> 感觉这些例子还是太复杂了，所以这里写了个比较简单的版本</p>
<a id="more"></a>
<p>声明： 本文部分内容转自 <a href="https://blog.csdn.net/Jerr__y/article/details/61195257" target="_blank" rel="external">永永夜 Tensorflow学习之路</a></p>
<p>自己做了一个示意图，希望帮助初学者更好地理解 多层RNN. </p>
<p><img src="/images/tensorflow/tf-4.4_1-simple-lstms.png" width="800"></p>
<p>通过本例，你可以了解到单层 LSTM 的实现，多层 LSTM 的实现。输入输出数据的格式。 RNN 的 dropout layer 的实现。</p>
<h2 id="MNIST-背景"><a href="#MNIST-背景" class="headerlink" title="MNIST 背景"></a>MNIST 背景</h2><p><strong>准备数据</strong></p>
<p>MNIST 是在机器学习领域中的一个经典问题。该问题解决的是把 28x28像素 的灰度手写数字图片识别为相应的数字，其中数字的范围从 0到9.</p>
<p><img src="/images/tensorflow/tf-4.4_5-mnist_digits.png" width="400"></p>
<blockquote>
<p>MNIST 数据集 包含了 60000 张图片来作为训练数据，10000 张图片作为测试数据。每张图片都代表了 0~9 中的一个数字。图片大小都为 28*28，处理后的每张图片是一个长度为 784 的一维数组，这个数组中的元素对应图片像素矩阵提供给神经网络的输入层，像素矩阵中元素的取值范围 [0, 1]， 它代表了颜色的深浅。其中 0 表示白色背景(background)，1 表示黑色前景(foreground)。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> rnn</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 GPU 按需增长</span></span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="keyword">True</span></span><br><span class="line">sess = tf.Session(config=config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先导入数据，看一下数据的形式</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line">print(mnist.train.images.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Extracting MNIST_data/train-images-idx3-ubyte.gz</span><br><span class="line">Extracting MNIST_data/train-labels-idx1-ubyte.gz</span><br><span class="line">Extracting MNIST_data/t10k-images-idx3-ubyte.gz</span><br><span class="line">Extracting MNIST_data/t10k-labels-idx1-ubyte.gz</span><br><span class="line">(55000, 784) # 训练集图片 - 55000 张 * 784维一维数组</span><br></pre></td></tr></table></figure>
<p>执行 input_data.read_data_sets 后自动创建一个目录 MNIST_data，并开始下载数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(anaconda3)</span><br><span class="line"><span class="comment"># ~/ghome/github/TensorFlowExamples [master ✗ (98591d9)] [16:15:03]</span></span><br><span class="line">➜ ll</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x   6 blair  staff   192B Oct  9 16:14 MNIST_data</span><br><span class="line">-rw-r--r--   1 blair  staff   2.3K Oct  9 16:13 simple-lstms.ipynb</span><br><span class="line">(anaconda3)</span><br><span class="line"><span class="comment"># ~/ghome/github/TensorFlowExamples [master ✗ (98591d9)] [16:15:06]</span></span><br><span class="line">➜ ll MNIST_data</span><br><span class="line">total 22672</span><br><span class="line">-rw-r--r--  1 blair  staff   1.6M Oct  9 16:14 t10k-images-idx3-ubyte.gz</span><br><span class="line">-rw-r--r--  1 blair  staff   4.4K Oct  9 16:14 t10k-labels-idx1-ubyte.gz</span><br><span class="line">-rw-r--r--  1 blair  staff   9.5M Oct  9 16:14 train-images-idx3-ubyte.gz</span><br><span class="line">-rw-r--r--  1 blair  staff    28K Oct  9 16:14 train-labels-idx1-ubyte.gz</span><br><span class="line">(anaconda3)</span><br><span class="line"><span class="comment"># ~/ghome/github/TensorFlowExamples [master ✗ (98591d9)] [16:15:12]</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">train-images-idx3-ubyte.gz</td>
<td style="text-align:center">训练集图片 - 55000 张 训练图片, 5000 张 验证图片</td>
</tr>
<tr>
<td style="text-align:center">train-labels-idx1-ubyte.gz</td>
<td style="text-align:center">训练集图片对应的数字标签</td>
</tr>
<tr>
<td style="text-align:center">t10k-images-idx3-ubyte.gz</td>
<td style="text-align:center">测试集图片 - 10000 张 图片</td>
</tr>
<tr>
<td style="text-align:center">t10k-labels-idx1-ubyte.gz</td>
<td style="text-align:center">测试集图片对应的数字标签</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'training data shape '</span>, mnist.train.images.shape)</span><br><span class="line">print(<span class="string">'training label shape '</span>, mnist.train.labels.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># training data shape  (55000, 784)</span></span><br><span class="line"><span class="comment"># training label shape  (55000, 10)</span></span><br></pre></td></tr></table></figure>
<h2 id="1-首先设置好模型用到的各个超参数"><a href="#1-首先设置好模型用到的各个超参数" class="headerlink" title="1. 首先设置好模型用到的各个超参数"></a>1. 首先设置好模型用到的各个超参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">1e-3</span> <span class="comment"># 0.001</span></span><br><span class="line"><span class="comment"># 在训练和测试的时候，我们想用不同的 batch_size.所以采用占位符的方式</span></span><br><span class="line">batch_size = tf.placeholder(tf.int32, [])  <span class="comment"># 注意类型必须为 tf.int32</span></span><br><span class="line"></span><br><span class="line">keep_prob = tf.placeholder(tf.float32, [])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个时刻的输入特征是28维的，就是每个时刻输入一行，一行有 28 个像素</span></span><br><span class="line">input_size = <span class="number">28</span></span><br><span class="line"><span class="comment"># 时序持续长度为28，即每做一次预测，需要先输入28行</span></span><br><span class="line">timestep_size = <span class="number">28</span></span><br><span class="line"><span class="comment"># 每个隐含层的节点数</span></span><br><span class="line">hidden_size = <span class="number">256</span></span><br><span class="line"><span class="comment"># LSTM layer 的层数</span></span><br><span class="line">layer_num = <span class="number">2</span></span><br><span class="line"><span class="comment"># 最后输出分类类别数量，如果是回归预测的话应该是 1</span></span><br><span class="line">class_num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">_X = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, class_num])</span><br></pre></td></tr></table></figure>
<h2 id="2-开始搭建-LSTM-模型，其实普通-RNNs-模型也一样"><a href="#2-开始搭建-LSTM-模型，其实普通-RNNs-模型也一样" class="headerlink" title="2. 开始搭建 LSTM 模型，其实普通 RNNs 模型也一样"></a>2. 开始搭建 LSTM 模型，其实普通 RNNs 模型也一样</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把784个点的字符信息还原成 28 * 28 的图片</span></span><br><span class="line"><span class="comment"># 下面几个步骤是实现 RNN / LSTM 的关键</span></span><br><span class="line"><span class="comment">###################################################################</span></span><br><span class="line"><span class="comment"># tf.reshape(tensor, shape, name=None)  函数的作用是将 tensor 变换为参数shape的形式</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># **步骤1：RNN 的输入shape = (batch_size, timestep_size, input_size) </span></span><br><span class="line">X = tf.reshape(_X, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># **步骤2：定义一层 LSTM_cell，只需要说明 hidden_size, 它会自动匹配输入的 X 的维度</span></span><br><span class="line">lstm_cell = rnn.BasicLSTMCell(num_units=hidden_size, forget_bias=<span class="number">1.0</span>, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **步骤3：添加 dropout layer, 一般只设置 output_keep_prob</span></span><br><span class="line">lstm_cell = rnn.DropoutWrapper(cell=lstm_cell, input_keep_prob=<span class="number">1.0</span>, output_keep_prob=keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **步骤4：调用 MultiRNNCell 来实现多层 LSTM</span></span><br><span class="line">mlstm_cell = rnn.MultiRNNCell([lstm_cell] * layer_num, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **步骤5：用全零来初始化state</span></span><br><span class="line">init_state = mlstm_cell.zero_state(batch_size, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **步骤6：方法一，调用 dynamic_rnn() 来让我们构建好的网络运行起来</span></span><br><span class="line"><span class="comment"># ** 当 time_major==False 时， outputs.shape = [batch_size, timestep_size, hidden_size] </span></span><br><span class="line"><span class="comment"># ** 所以，可以取 h_state = outputs[:, -1, :] 作为最后输出</span></span><br><span class="line"><span class="comment"># ** state.shape = [layer_num, 2, batch_size, hidden_size], </span></span><br><span class="line"><span class="comment"># ** 或者，可以取 h_state = state[-1][1] 作为最后输出</span></span><br><span class="line"><span class="comment"># ** 最后输出维度是 [batch_size, hidden_size]</span></span><br><span class="line"><span class="comment"># outputs, state = tf.nn.dynamic_rnn(mlstm_cell, inputs=X, initial_state=init_state, time_major=False)</span></span><br><span class="line"><span class="comment"># h_state = outputs[:, -1, :]  # 或者 h_state = state[-1][1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *************** 为了更好的理解 LSTM 工作原理，我们把上面 步骤6 中的函数自己来实现 ***************</span></span><br><span class="line"><span class="comment"># 通过查看文档你会发现， RNNCell 都提供了一个 __call__()函数（见最后附），我们可以用它来展开实现LSTM按时间步迭代。</span></span><br><span class="line"><span class="comment"># **步骤6：方法二，按时间步展开计算 (暂时没有运行通过)</span></span><br><span class="line">outputs = list()</span><br><span class="line">state = init_state</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">'RNN'</span>):</span><br><span class="line">    <span class="keyword">for</span> timestep <span class="keyword">in</span> range(timestep_size):</span><br><span class="line">        <span class="keyword">if</span> timestep &gt; <span class="number">0</span>:</span><br><span class="line">            tf.get_variable_scope().reuse_variables()</span><br><span class="line">        <span class="comment"># 这里的state保存了每一层 LSTM 的状态</span></span><br><span class="line">        (cell_output, state) = mlstm_cell(X[:, timestep, :], state)</span><br><span class="line">        outputs.append(cell_output)</span><br><span class="line">h_state = outputs[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  X[:, timestep, :] 就是取第timestep个时刻的特征 x_t 输入 mlstm_cell 中计算，因为每次用 batch_size 个样本来训练，所以相当于（并行）输入 batch_size 个 x_t 到 mlstm_cell 中计算。</span></span><br></pre></td></tr></table></figure>
<h2 id="3-设置-loss-function-和-优化器，展开训练并完成测试"><a href="#3-设置-loss-function-和-优化器，展开训练并完成测试" class="headerlink" title="3. 设置 loss function 和 优化器，展开训练并完成测试"></a>3. 设置 loss function 和 优化器，展开训练并完成测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面 LSTM 部分的输出会是一个 [hidden_size] 的 tensor，我们要分类的话，还需要接一个 softmax 层</span></span><br><span class="line"><span class="comment"># 首先定义 softmax 的连接权重矩阵和偏置</span></span><br><span class="line"><span class="comment"># out_W = tf.placeholder(tf.float32, [hidden_size, class_num], name='out_Weights')</span></span><br><span class="line"><span class="comment"># out_bias = tf.placeholder(tf.float32, [class_num], name='out_bias')</span></span><br><span class="line"><span class="comment"># 开始训练和测试</span></span><br><span class="line">W = tf.Variable(tf.truncated_normal([hidden_size, class_num], stddev=<span class="number">0.1</span>), dtype=tf.float32)</span><br><span class="line">bias = tf.Variable(tf.constant(<span class="number">0.1</span>,shape=[class_num]), dtype=tf.float32)</span><br><span class="line">y_pre = tf.nn.softmax(tf.matmul(h_state, W) + bias)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失和评估函数</span></span><br><span class="line">cross_entropy = -tf.reduce_mean(y * tf.log(y_pre))</span><br><span class="line">train_op = tf.train.AdamOptimizer(lr).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_pre,<span class="number">1</span>), tf.argmax(y,<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    _batch_size = <span class="number">128</span></span><br><span class="line">    batch = mnist.train.next_batch(_batch_size)</span><br><span class="line">    sess.run(train_op, feed_dict=&#123;_X: batch[<span class="number">0</span>], y: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>, batch_size: _batch_size&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        train_accuracy = sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">            _X:batch[<span class="number">0</span>], y: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>, batch_size: _batch_size&#125;)</span><br><span class="line">        <span class="comment"># 已经迭代完成的 epoch 数: mnist.train.epochs_completed</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Iter%d, step %d, training accuracy %g"</span> % ( mnist.train.epochs_completed, (i+<span class="number">1</span>), train_accuracy)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算测试数据的准确率</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"test accuracy %g"</span>% sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">    _X: mnist.test.images, y: mnist.test.labels, keep_prob: <span class="number">1.0</span>, batch_size:mnist.test.images.shape[<span class="number">0</span>]&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iter0, step 200, training accuracy 0.851562</span><br><span class="line">Iter0, step 400, training accuracy 0.960938</span><br><span class="line">Iter1, step 600, training accuracy 0.984375</span><br><span class="line">Iter1, step 800, training accuracy 0.960938</span><br><span class="line">Iter2, step 1000, training accuracy 0.984375</span><br><span class="line">Iter2, step 1200, training accuracy 0.9375</span><br><span class="line">Iter3, step 1400, training accuracy 0.96875</span><br><span class="line">Iter3, step 1600, training accuracy 0.984375</span><br><span class="line">Iter4, step 1800, training accuracy 0.992188</span><br><span class="line">Iter4, step 2000, training accuracy 0.984375</span><br><span class="line">test accuracy 0.9858</span><br></pre></td></tr></table></figure>
<p>我们一共只迭代不到 5 个 epoch，在测试集上就已经达到了 0.98 的准确率，可以看出来 LSTM 在做这个字符分类的任务上还是比较有效的，而且我们最后一次性对 10000 张测试图片进行预测，才占了 725 MiB 的显存。而我们在之前的两层 CNNs 网络中，预测 10000 张图片一共用了 8721 MiB 的显存，差了整整 12 倍呀！！ 这主要是因为 RNN/LSTM 网络中，每个时间步所用的权值矩阵都是共享的，可以通过前面介绍的 LSTM 的网络结构分析一下，整个网络的参数非常少。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/jerr__y/article/category/6747409" target="_blank" rel="external">大学之道，在明明德 永永夜 Tensorflow学习之路</a></li>
<li><a href="https://blog.csdn.net/u014595019/article/details/52759104" target="_blank" rel="external">tensorflow笔记：多层LSTM代码分析 </a></li>
<li><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_download.html" target="_blank" rel="external">极客学院 MNIST 数据下载</a></li>
<li><a href="https://www.zhihu.com/question/41949741" target="_blank" rel="external">隔壁小王 LSTM 神经网络输入输出究竟是怎样的？</a></li>
<li><a href="https://colab.research.google.com" target="_blank" rel="external">colab.research.google</a></li>
<li><a href="https://zh.gluon.ai/" target="_blank" rel="external">zh.gluon.ai 动手学深度学习</a></li>
<li><a href="http://discuss.gluon.ai/" target="_blank" rel="external">discuss.gluon.ai 论坛</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roll_jj： 博主你好， outputs, state = tf.nn.dynamic_rnn(mlstm_cell, inputs=X, initial_state=init_state, time_major=False) h_state = outputs[:, -1, :] 这两句话里，outputs的三个维度是什么意思，为什么把中间那个维度去掉就是我们要的输出结果了？(1年前#6楼)收起回复举报回复</span><br><span class="line">Jerr__y</span><br><span class="line">CQU_HYX回复 roll_jj： 是的(1年前)</span><br><span class="line">roll_jj</span><br><span class="line">roll_jj回复 CQU_HYX： 谢谢博主解答。我看官方的那个PTB例子里，没有取[-1]的这个操作，而是用了output = tf.reshape(tf.concat(1, outputs), [-1, size])操作，这是因为预测目标的不同么？(1年前)</span><br><span class="line">Jerr__y</span><br><span class="line">CQU_HYX回复 roll_jj： 原文注释上面有说了，outputs.shape = [batch_size, timestep_size, hidden_size]。 因为是分类问题，所有只需要在看完最后一行像素后才输出分类结果。-1 表示取最后一个 timestep 的结果， 而不是说把中间维度去掉</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(转) 理解 LSTM 网络 （Understanding LSTM Networks by colah）]]></title>
      <url>http://iequa.com/2017/10/06/tensorflow/tf-Understanding-LSTMs/</url>
      <content type="html"><![CDATA[<p>原文链接1： <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">Understanding LSTM Networks</a><br>原文链接2： <a href="https://blog.csdn.net/jerr__y/article/details/58598296" target="_blank" rel="external">理解 LSTM 网络</a> @翻译：huangyongye</p>
<a id="more"></a> 
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/jerr__y/article/category/6747409" target="_blank" rel="external">大学之道，在明明德 永永夜 Tensorflow学习之路</a></li>
<li><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">Understanding LSTM Networks</a></li>
<li><a href="https://blog.csdn.net/jerr__y/article/details/58598296" target="_blank" rel="external">大学之道，在明明德 永永夜 理解 LSTM 网络 （Understanding LSTM Networks by colah）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow 命名方法 name_scope / variable_scope]]></title>
      <url>http://iequa.com/2017/10/05/tensorflow/tf-4.3-name-variable_scope/</url>
      <content type="html"><![CDATA[<p>本例主要介绍 name_scope 和 variable_scope 的正确使用方式，学习并理解本例之后，你就能够真正读懂 TensorFlow 的很多代码并能够清晰地理解模型结构了.</p>
<a id="more"></a> 
<p>scope 能让你命名变量的时候轻松很多. 同时也会在 reusing variable 代码中常常见到. 所以今天我们会来讨论下 tensorflow 当中的两种定义 scope 的方式. 最后并附加一个 RNN 运用 reuse variable 的例子.</p>
<p>在 TensorFlow 中，经常看到 name_scope 和 variable_scope 两个东东，这到底是什么鬼，到底系做咩噶!!! 在做 LSTM 的时候遇到了下面的错误： <code>ValueError: Variable rnn/basic_lstm_cell/weights already exists, disallowed.</code></p>
<h2 id="1-先说结论"><a href="#1-先说结论" class="headerlink" title="1. 先说结论"></a>1. 先说结论</h2><p>要理解  name_scope 和 variable_scope， 首先必须明确二者的使用目的。我们都知道，和普通模型相比，神经网络的节点非常多，节点节点之间的连接（权值矩阵）也非常多。所以我们费尽心思，准备搭建一个网络，然后有了图1的网络，WTF! 因为变量太多，我们构造完网络之后，一看，什么鬼，这个变量到底是哪层的？？</p>
<p><img src="/images/tensorflow/tf-4.3_1.jpg" width="750"></p>
<p>为了解决这个问题，我们引入了 <strong>name_scope</strong> 和 <strong>variable_scope</strong>， 二者又分别承担着不同的责任：</p>
<ul>
<li>name_scope: 为了更好地管理变量的命名空间而提出的。比如在 tensorboard 中，因为引入了 name_scope， 我们的 Graph 看起来才井然有序。</li>
<li>variable_scope: 大大大部分情况下，跟 <code>tf.get_variable()</code> 配合使用，实现变量共享的功能。</li>
</ul>
<p>下面通过两组实验来探索 TensorFlow 的命名机制。</p>
<h2 id="2-name-scope-variable-scope-实验-🌰"><a href="#2-name-scope-variable-scope-实验-🌰" class="headerlink" title="2. name_scope/variable_scope 实验 🌰"></a>2. name_scope/variable_scope 实验 🌰</h2><p><strong>实验 1 三种方式创建变量：</strong></p>
<p>三种方式创建变量： <strong>tf.placeholder</strong>, <strong>tf.Variable</strong>, <strong>tf.get_variable</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 设置GPU按需增长</span></span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="keyword">True</span></span><br><span class="line">sess = tf.Session(config=config)</span><br></pre></td></tr></table></figure>
<h3 id="2-1-placeholder"><a href="#2-1-placeholder" class="headerlink" title="2.1 placeholder"></a>2.1 placeholder</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.placeholder </span></span><br><span class="line">v1 = tf.placeholder(tf.float32, shape=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(v1.name)</span><br><span class="line">v1 = tf.placeholder(tf.float32, shape=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], name=<span class="string">'ph'</span>)</span><br><span class="line">print(v1.name)</span><br><span class="line">v1 = tf.placeholder(tf.float32, shape=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], name=<span class="string">'ph'</span>)</span><br><span class="line">print(v1.name)</span><br><span class="line">print(type(v1))</span><br><span class="line">print(v1)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Placeholder:0</span><br><span class="line">ph:0</span><br><span class="line">ph_1:0</span><br><span class="line">&lt;class &apos;tensorflow.python.framework.ops.Tensor&apos;&gt;</span><br><span class="line">Tensor(&quot;ph_1:0&quot;, shape=(2, 3, 4), dtype=float32)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-tf-Variable"><a href="#2-2-tf-Variable" class="headerlink" title="2.2 tf.Variable()"></a>2.2 tf.Variable()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2. tf.Variable()</span></span><br><span class="line">v2 = tf.Variable([<span class="number">1</span>,<span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">print(v2.name)</span><br><span class="line">v2 = tf.Variable([<span class="number">1</span>,<span class="number">2</span>], dtype=tf.float32, name=<span class="string">'V'</span>)</span><br><span class="line">print(v2.name)</span><br><span class="line">v2 = tf.Variable([<span class="number">1</span>,<span class="number">2</span>], dtype=tf.float32, name=<span class="string">'V'</span>)</span><br><span class="line">print(v2.name)</span><br><span class="line">print(type(v2))</span><br><span class="line">print(v2)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable:0</span><br><span class="line">V:0</span><br><span class="line">V_1:0</span><br><span class="line">&lt;class &apos;tensorflow.python.ops.variables.Variable&apos;&gt;</span><br><span class="line">Tensor(&quot;V_1/read:0&quot;, shape=(2,), dtype=float32)</span><br></pre></td></tr></table></figure>
<h3 id="2-3-tf-get-variable"><a href="#2-3-tf-get-variable" class="headerlink" title="2.3 tf.get_variable()"></a>2.3 tf.get_variable()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.tf.get_variable() 创建变量的时候必须要提供 name</span></span><br><span class="line">v3 = tf.get_variable(name=<span class="string">'gv'</span>, shape=[])  </span><br><span class="line">print(v3.name)</span><br><span class="line">v4 = tf.get_variable(name=<span class="string">'gv'</span>, shape=[<span class="number">2</span>])</span><br><span class="line">print(v4.name)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gv:0</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input-7-29efaac2d76c&gt; in &lt;module&gt;()</span><br><span class="line">      2 v3 = tf.get_variable(name=&apos;gv&apos;, shape=[])</span><br><span class="line">      3 print(v3.name)</span><br><span class="line">----&gt; 4 v4 = tf.get_variable(name=&apos;gv&apos;, shape=[2])</span><br><span class="line">      5 print(v4.name)</span><br><span class="line">此处还有一堆错误信息。。。</span><br><span class="line">ValueError: Variable gv already exists, disallowed. Did you mean to set reuse=True in VarScope? Originally defined at:</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(v3))</span><br><span class="line">print(v3)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &apos;tensorflow.python.ops.variables.Variable&apos;&gt;</span><br><span class="line">Tensor(&quot;gv/read:0&quot;, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure>
<p>还记得有这么个函数吗？ <strong>tf.trainable_variables(</strong>), 它能够将我们定义的所有的 trainable=True 的所有变量以一个 list 的形式返回。 very good, 现在要派上用场了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vs = tf.trainable_variables()</span><br><span class="line">print(len(vs))</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vs:</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">Tensor(&quot;Variable/read:0&quot;, shape=(2,), dtype=float32)</span><br><span class="line">Tensor(&quot;V/read:0&quot;, shape=(2,), dtype=float32)</span><br><span class="line">Tensor(&quot;V_1/read:0&quot;, shape=(2,), dtype=float32)</span><br><span class="line">Tensor(&quot;gv/read:0&quot;, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>实验1 结论:</strong></p>
<p>从上面的实验结果来看，这三种方式所定义的变量具有相同的类型。</p>
<p>只有 <code>tf.get_variable()</code> 创建的变量之间会发生 <strong>命名冲突</strong>。在实际使用中，三种创建变量方式的用途分工非常明确。</p>
<ul>
<li>tf.placeholder() 占位符。 trainable==False</li>
<li>tf.Variable() 一般变量用这种方式定义。 可以选择 trainable 类型</li>
<li>tf.get_variable() 一般都是和 tf.variable_scope() 配合使用，从而实现变量共享的功能。  可以选择 trainable 类型</li>
</ul>
</blockquote>
<h2 id="3-探索-name-scope-和-variable-scope"><a href="#3-探索-name-scope-和-variable-scope" class="headerlink" title="3. 探索 name_scope 和 variable_scope"></a>3. 探索 name_scope 和 variable_scope</h2><p>实验目的： 熟悉两种命名空间的应用情景</p>
<h3 id="3-1-tf-name-scope"><a href="#3-1-tf-name-scope" class="headerlink" title="3.1 tf.name_scope()"></a>3.1 tf.name_scope()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'nsc1'</span>):</span><br><span class="line">    v1 = tf.Variable([<span class="number">1</span>], name=<span class="string">'v1'</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'vsc1'</span>):</span><br><span class="line">        v2 = tf.Variable([<span class="number">1</span>], name=<span class="string">'v2'</span>)</span><br><span class="line">        v3 = tf.get_variable(name=<span class="string">'v3'</span>, shape=[])</span><br><span class="line">print(<span class="string">'v1.name: '</span>, v1.name)</span><br><span class="line">print(<span class="string">'v2.name: '</span>, v2.name)</span><br><span class="line">print(<span class="string">'v3.name: '</span>, v3.name)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v1.name:  nsc1/v1:0</span><br><span class="line">v2.name:  nsc1/vsc1/v2:0</span><br><span class="line">v3.name:  vsc1/v3:0</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'nsc1'</span>):</span><br><span class="line">    v4 = tf.Variable([<span class="number">1</span>], name=<span class="string">'v4'</span>)</span><br><span class="line">print(<span class="string">'v4.name: '</span>, v4.name) <span class="comment"># v4.name:  nsc1_1/v4:0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>tf.name_scope() 并不会对 tf.get_variable() 创建的变量有任何影响。 </li>
<li><p>tf.name_scope() 主要是用来管理命名空间的，这样子让我们的整个模型更加有条理。</p>
</li>
<li><p>tf.variable_scope() 的作用是为了实现<strong>变量共享</strong>，它和 tf.get_variable() 来完成变量共享的功能。</p>
</li>
</ul>
</blockquote>
<h3 id="3-2-tf-variable-scope"><a href="#3-2-tf-variable-scope" class="headerlink" title="3.2 tf.variable_scope()"></a>3.2 tf.variable_scope()</h3><p>如果想要达到重复利用变量的效果, 我们就要使用 <code>tf.variable_scope()</code>, 并搭配 <code>tf.get_variable()</code> 这种方式产生和提取变量. 不像 <code>tf.Variable()</code> 每次都会产生新的变量, <code>tf.get_variable()</code> 如果遇到了同样名字的变量时, 它会单纯的提取这个同样名字的变量(避免产生新变量). 而在重复使用的时候, 一定要在代码中强调 <code>scope.reuse_variables()</code>, 否则系统将会报错, 以为你只是单纯的不小心重复使用到了一个变量.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"a_variable_scope"</span>) <span class="keyword">as</span> scope:</span><br><span class="line">    initializer = tf.constant_initializer(value=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    var3 = tf.get_variable(name=<span class="string">'var3'</span>, shape=[<span class="number">1</span>], dtype=tf.float32, initializer=initializer)</span><br><span class="line">    scope.reuse_variables()</span><br><span class="line">    var3_reuse = tf.get_variable(name=<span class="string">'var3'</span>,)</span><br><span class="line">    </span><br><span class="line">    var4 = tf.Variable(name=<span class="string">'var4'</span>, initial_value=[<span class="number">4</span>], dtype=tf.float32)</span><br><span class="line">    var4_reuse = tf.Variable(name=<span class="string">'var4'</span>, initial_value=[<span class="number">4</span>], dtype=tf.float32)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    </span><br><span class="line">    print(var3.name)            <span class="comment"># a_variable_scope/var3:0</span></span><br><span class="line">    print(sess.run(var3))       <span class="comment"># [ 3.]</span></span><br><span class="line">    print(var3_reuse.name)      <span class="comment"># a_variable_scope/var3:0</span></span><br><span class="line">    print(sess.run(var3_reuse)) <span class="comment"># [ 3.]</span></span><br><span class="line">    </span><br><span class="line">    print(var4.name)            <span class="comment"># a_variable_scope/var4:0</span></span><br><span class="line">    print(sess.run(var4))       <span class="comment"># [ 4.]</span></span><br><span class="line">    print(var4_reuse.name)      <span class="comment"># a_variable_scope/var4_1:0</span></span><br><span class="line">    print(sess.run(var4_reuse)) <span class="comment"># [ 4.]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先我们要确立一种 Graph 的思想。在 TensorFlow 中，我们定义一个变量，相当于往 Graph 中添加了一个节点。和普通的 python 函数不一样，在一般的函数中，我们对输入进行处理，然后返回一个结果，而函数里边定义的一些局部变量我们就不管了。但是在 TensorFlow 中，我们在函数里边创建了一个变量，就是往 Graph 中添加了一个节点。出了这个函数后，这个节点还是存在于 Graph 中的。</p>
</blockquote>
<h2 id="4-RNN-应用例子"><a href="#4-RNN-应用例子" class="headerlink" title="4. RNN 应用例子"></a>4. RNN 应用例子</h2><p>整个 RNN 的结构已经在这里定义好了. 在 training RNN 和 test RNN 的时候, RNN 的 <code>time_steps</code> 会有不同的取值, 这将会影响到整个 RNN 的结构, 所以导致在 test 的时候, 不能单纯地使用 training 时建立的那个 RNN. 但是 training RNN 和 test RNN 又必须是有同样的 weights biases 的参数. 所以, 这时, 就是使用 reuse variable 的好时机.</p>
<p>首先定义 training 和 test 的不同参数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainConfig</span>:</span></span><br><span class="line">    batch_size = <span class="number">20</span></span><br><span class="line">    time_steps = <span class="number">20</span></span><br><span class="line">    input_size = <span class="number">10</span></span><br><span class="line">    output_size = <span class="number">2</span></span><br><span class="line">    cell_size = <span class="number">11</span></span><br><span class="line">    learning_rate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestConfig</span><span class="params">(TrainConfig)</span>:</span></span><br><span class="line">    time_steps = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">train_config = TrainConfig()</span><br><span class="line">test_config = TestConfig()</span><br></pre></td></tr></table></figure>
<p>然后让 <code>train_rnn</code> 和 <code>test_rnn</code> 在同一个 <code>tf.variable_scope(&#39;rnn&#39;)</code> 之下. 并且定义 <strong>scope.reuse_variables()</strong>, 使我们能把 <code>train_rnn</code> 的所有 weights, biases 参数全部绑定到 <code>test_rnn</code> 中. </p>
<p>这样, 不管两者的 <code>time_steps</code> 有多不同, 结构有多不同, <code>train_rnn</code> W, b 参数更新成什么样, <code>test_rnn</code> 的参数也更新成什么样.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">'rnn'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    train_rnn = RNN(train_config)</span><br><span class="line">    scope.reuse_variables()</span><br><span class="line">    test_rnn = RNN(test_config)</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/jerr__y/article/category/6747409" target="_blank" rel="external">大学之道，在明明德 永永夜 Tensorflow学习之路</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/5-12-scope/" target="_blank" rel="external">morvanzhou, scope 命名方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[My Vim Config File]]></title>
      <url>http://iequa.com/2017/10/04/ops/ops-vimrc/</url>
      <content type="html"><![CDATA[<p>my vim custom config .vimrc file</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible <span class="string">" 关闭 vi 兼容模式  </span><br><span class="line">syntax on        "</span> 自动语法高亮  </span><br><span class="line"><span class="built_in">set</span> number     <span class="string">" 显示行号         "</span> <span class="built_in">set</span> cursorline    突出显示当前行  </span><br><span class="line"><span class="built_in">set</span> ruler        <span class="string">" 打开状态栏标尺    (不错)  </span><br><span class="line">set shiftwidth=4 "</span> 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4  </span><br><span class="line"><span class="built_in">set</span> smartindent  </span><br><span class="line"><span class="built_in">set</span> tabstop=4         <span class="string">" tabstop=4 设定 tab 长度为4  </span><br><span class="line">set softtabstop=4   </span><br><span class="line">set expandtab  </span><br><span class="line">set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936</span><br><span class="line">set nobackup     "</span> 覆盖文件时不备份  </span><br><span class="line"><span class="built_in">set</span> ignorecase smartcase    <span class="string">" 搜索时忽略大小写，但在有一个或以上大写字母时仍大小写敏感  </span><br><span class="line">"</span><span class="built_in">set</span> nowrapscan              <span class="string">" 禁止在搜索到文件两端时重新搜索  </span><br><span class="line">set nowrapscan              "</span> 禁止在搜索到文件两端时重新搜索  </span><br><span class="line"><span class="built_in">set</span> incsearch               <span class="string">" 输入搜索内容时就显示搜索结果  </span><br><span class="line">set hlsearch                "</span> 搜索时高亮显示被找到的文本  </span><br><span class="line"><span class="built_in">set</span> noerrorbells            <span class="string">" 关闭错误信息响铃  </span><br><span class="line">set novisualbell            "</span> 关闭使用可视响铃代替呼叫  </span><br><span class="line"><span class="built_in">set</span> t_vb=                   <span class="string">" 置空错误铃声的终端代码  </span><br><span class="line">set showmatch               "</span> 插入括号时，短暂地跳转到匹配的对应括号  </span><br><span class="line"><span class="string">" set matchtime=2             "</span> 短暂跳转到匹配括号的时间  </span><br><span class="line"><span class="built_in">set</span> magic                   <span class="string">" 设置魔术  </span><br><span class="line">set hidden                  "</span> 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存  </span><br><span class="line"><span class="string">"set guioptions-=T           "</span> 隐藏工具栏  </span><br><span class="line"><span class="string">"set guioptions-=m           "</span> 隐藏菜单栏  </span><br><span class="line"><span class="built_in">set</span> smartindent             <span class="string">" 开启新行时使用智能自动缩进  </span><br><span class="line">set backspace=indent,eol,start  </span><br><span class="line">                            "</span> 不设定在插入状态无法用退格键和 Delete 键删除回车符  </span><br><span class="line"><span class="built_in">set</span> cmdheight=1             <span class="string">" 设定命令行的行数为 1  </span><br><span class="line">set laststatus=2            "</span> 显示状态栏 (默认值为 1, 无法显示状态栏)  </span><br><span class="line"><span class="built_in">set</span> statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\  </span><br><span class="line"><span class="string">" 设置在状态行显示的信息  </span><br><span class="line">"</span><span class="built_in">set</span> foldenable              <span class="string">" 开始折叠  </span><br><span class="line">"</span><span class="built_in">set</span> foldmethod=syntax       <span class="string">" 设置语法折叠  </span><br><span class="line">"</span><span class="built_in">set</span> foldcolumn=0            <span class="string">" 设置折叠区域的宽度  </span><br><span class="line">"</span>setlocal foldlevel=1        <span class="string">" 设置折叠层数为  </span><br><span class="line">"</span> <span class="built_in">set</span> foldclose=all           <span class="string">" 设置为自动关闭折叠                             </span><br><span class="line">"</span> nnoremap &lt;space&gt; @=((foldclosed(line(<span class="string">'.'</span>)) &lt; 0) ? <span class="string">'zc'</span> : <span class="string">'zo'</span>)&lt;CR&gt;  </span><br><span class="line"><span class="string">" 用空格键来开关折叠  </span><br><span class="line"></span><br><span class="line">set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set encoding=utf-8  </span><br><span class="line">  </span><br><span class="line">"</span> <span class="built_in">return</span> OS <span class="built_in">type</span>, eg: windows, or linux, mac, et.st..  </span><br><span class="line"><span class="keyword">function</span>! MySys()  </span><br><span class="line">    <span class="keyword">if</span> has(<span class="string">"win16"</span>) || has(<span class="string">"win32"</span>) || has(<span class="string">"win64"</span>) || has(<span class="string">"win95"</span>)  </span><br><span class="line">       <span class="built_in">return</span> <span class="string">"windows"</span>  </span><br><span class="line">    elseif has(<span class="string">"unix"</span>)  </span><br><span class="line">       <span class="built_in">return</span> <span class="string">"linux"</span>  </span><br><span class="line">    endif  </span><br><span class="line">endfunction  </span><br><span class="line">  </span><br><span class="line"><span class="string">" 用户目录变量<span class="variable">$VIMFILES</span>  </span><br><span class="line">if MySys() == "</span>windows<span class="string">"  </span><br><span class="line">    let <span class="variable">$VIMFILES</span> = <span class="variable">$VIM</span>.'/vimfiles'  </span><br><span class="line">elseif MySys() == "</span>linux<span class="string">"  </span><br><span class="line">    let <span class="variable">$VIMFILES</span> = <span class="variable">$HOME</span>.'/.vim'  </span><br><span class="line">endif  </span><br><span class="line">  </span><br><span class="line">"</span> 设定doc文档目录  </span><br><span class="line"><span class="built_in">let</span> helptags=<span class="variable">$VIMFILES</span>.<span class="string">'/doc'</span>  </span><br><span class="line">  </span><br><span class="line"><span class="string">" 设置字体 以及中文支持  </span><br><span class="line">if has("</span>win32<span class="string">")  </span><br><span class="line">    set guifont=Inconsolata:h12:cANSI  </span><br><span class="line">endif  </span><br><span class="line">  </span><br><span class="line">"</span> 配置多语言环境  </span><br><span class="line"><span class="keyword">if</span> has(<span class="string">"multi_byte"</span>)  </span><br><span class="line">   <span class="string">" UTF-8 编码  </span><br><span class="line">    set encoding=utf-8  </span><br><span class="line">    set termencoding=utf-8  </span><br><span class="line">    set formatoptions+=mM  </span><br><span class="line">    set fencs=utf-8,gbk  </span><br><span class="line">  </span><br><span class="line">    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'  </span><br><span class="line">          set ambiwidth=double  </span><br><span class="line">    endif  </span><br><span class="line">  </span><br><span class="line">    if has("</span>win32<span class="string">")  </span><br><span class="line">        source <span class="variable">$VIMRUNTIME</span>/delmenu.vim  </span><br><span class="line">           source <span class="variable">$VIMRUNTIME</span>/menu.vim  </span><br><span class="line">           language messages zh_CN.utf-8  </span><br><span class="line">    endif  </span><br><span class="line">    else  </span><br><span class="line">           echoerr "</span>Sorry, this version of (g)vim was not compiled with +multi_byte<span class="string">"  </span><br><span class="line">endif  </span><br><span class="line">  </span><br><span class="line">"</span> Buffers操作快捷方式!  </span><br><span class="line">nnoremap &lt;C-RETURN&gt; :bnext&lt;CR&gt;  </span><br><span class="line">nnoremap &lt;C-S-RETURN&gt; :bprevious&lt;CR&gt;  </span><br><span class="line"><span class="string">" Tab操作快捷方式!  </span><br><span class="line">nnoremap &lt;C-TAB&gt; :tabnext&lt;CR&gt;  </span><br><span class="line">nnoremap &lt;C-S-TAB&gt; :tabprev&lt;CR&gt;  </span><br><span class="line">"</span>关于tab的快捷键  </span><br><span class="line"><span class="string">" map tn :tabnext&lt;cr&gt;  </span><br><span class="line">"</span> map tp :tabprevious&lt;cr&gt;  </span><br><span class="line"><span class="string">" map td :tabnew .&lt;cr&gt;  </span><br><span class="line">"</span> map te :tabedit  </span><br><span class="line"><span class="string">" map tc :tabclose&lt;cr&gt;  </span><br><span class="line">"</span>窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动  </span><br><span class="line"><span class="string">"光标到上方窗口,需要&lt;c-w&gt;&lt;c-w&gt;k,非常麻烦,现在重映射为&lt;c-k&gt;,切换的  </span><br><span class="line">"</span>时候会变得非常方便.  </span><br><span class="line">nnoremap &lt;C-h&gt; &lt;C-w&gt;h  </span><br><span class="line">nnoremap &lt;C-j&gt; &lt;C-w&gt;j  </span><br><span class="line">nnoremap &lt;C-k&gt; &lt;C-w&gt;k  </span><br><span class="line">nnoremap &lt;C<span class="_">-l</span>&gt; &lt;C-w&gt;l  </span><br><span class="line"><span class="string">"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）  </span><br><span class="line">nnoremap &lt;leader&gt;1 :set filetype=xhtml&lt;CR&gt;  </span><br><span class="line">nnoremap &lt;leader&gt;2 :set filetype=css&lt;CR&gt;  </span><br><span class="line">nnoremap &lt;leader&gt;3 :set filetype=javascript&lt;CR&gt;  </span><br><span class="line">nnoremap &lt;leader&gt;4 :set filetype=php&lt;CR&gt;  </span><br><span class="line">"</span> <span class="built_in">set</span> fileformats=unix,dos,mac  </span><br><span class="line"><span class="string">" nmap &lt;leader&gt;fd :se fileformat=dos&lt;CR&gt;  </span><br><span class="line">"</span> nmap &lt;leader&gt;fu :se fileformat=unix&lt;CR&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="string">" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result  </span><br><span class="line">"</span> map &lt;C-x&gt;l &lt;ESC&gt;:cl&lt;CR&gt;  </span><br><span class="line"><span class="string">" map &lt;C-x&gt;n &lt;ESC&gt;:cn&lt;CR&gt;  </span><br><span class="line">"</span> map &lt;C-x&gt;p &lt;ESC&gt;:cp&lt;CR&gt;  </span><br><span class="line"><span class="string">" map &lt;C-x&gt;c &lt;ESC&gt;:cc&lt;CR&gt;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">"</span> 让 Tohtml 产生有 CSS 语法的 html  </span><br><span class="line"><span class="string">" syntax/2html.vim，可以用:runtime! syntax/2html.vim  </span><br><span class="line">let html_use_css=1  </span><br><span class="line">"</span> Python 文件的一般设置，比如不要 tab 等  </span><br><span class="line">autocmd FileType python <span class="built_in">set</span> tabstop=4 shiftwidth=4 expandtab  </span><br><span class="line">autocmd FileType python map &lt;F12&gt; :!python %&lt;CR&gt;  </span><br><span class="line"><span class="string">" 选中状态下 Ctrl+c 复制  </span><br><span class="line">vmap &lt;C-c&gt; "</span>+y  </span><br><span class="line"><span class="string">" 打开javascript折叠  </span><br><span class="line">let b:javascript_fold=1  </span><br><span class="line">"</span> 打开javascript对dom、html和css的支持  </span><br><span class="line"><span class="built_in">let</span> javascript_<span class="built_in">enable</span>_domhtmlcss=1  </span><br><span class="line"><span class="string">" 设置字典 ~/.vim/dict/文件的路径  </span><br><span class="line">autocmd filetype javascript set dictionary=<span class="variable">$VIMFILES</span>/dict/javascript.dict  </span><br><span class="line">autocmd filetype css set dictionary=<span class="variable">$VIMFILES</span>/dict/css.dict  </span><br><span class="line">autocmd filetype php set dictionary=<span class="variable">$VIMFILES</span>/dict/php.dict  </span><br><span class="line">  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line">    <span class="string">" plugin - bufexplorer.vim Buffers切换  </span><br><span class="line">    "</span> \be 全屏方式查看全部打开的文件列表  </span><br><span class="line">    <span class="string">" \bv 左右方式查看   \bs 上下方式查看  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">    "</span> plugin - taglist.vim  查看函数列表，需要ctags程序  </span><br><span class="line">    <span class="string">" F4 打开隐藏taglist窗口  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="keyword">if</span> MySys() == <span class="string">"windows"</span>                <span class="string">" 设定windows系统中ctags程序的位置  </span><br><span class="line">    let Tlist_Ctags_Cmd = '"</span><span class="string">'.$VIMRUNTIME.'</span>/ctags.exe<span class="string">"'  </span><br><span class="line">elseif MySys() == "</span>linux<span class="string">"              "</span> 设定windows系统中ctags程序的位置  </span><br><span class="line">    <span class="built_in">let</span> Tlist_Ctags_Cmd = <span class="string">'/usr/bin/ctags'</span>  </span><br><span class="line">endif  </span><br><span class="line">nnoremap &lt;silent&gt;&lt;F4&gt; :TlistToggle&lt;CR&gt;  </span><br><span class="line"><span class="built_in">let</span> Tlist_Show_One_File = 1            <span class="string">" 不同时显示多个文件的tag，只显示当前文件的  </span><br><span class="line">let Tlist_Exit_OnlyWindow = 1          "</span> 如果taglist窗口是最后一个窗口，则退出vim  </span><br><span class="line"><span class="built_in">let</span> Tlist_Use_Right_Window = 1         <span class="string">" 在右侧窗口中显示taglist窗口  </span><br><span class="line">let Tlist_File_Fold_Auto_Close=1       "</span> 自动折叠当前非编辑文件的方法列表  </span><br><span class="line"><span class="built_in">let</span> Tlist_Auto_Open = 0  </span><br><span class="line"><span class="built_in">let</span> Tlist_Auto_Update = 1  </span><br><span class="line"><span class="built_in">let</span> Tlist_Hightlight_Tag_On_BufEnter = 1  </span><br><span class="line"><span class="built_in">let</span> Tlist_Enable_Fold_Column = 0  </span><br><span class="line"><span class="built_in">let</span> Tlist_Process_File_Always = 1  </span><br><span class="line"><span class="built_in">let</span> Tlist_Display_Prototype = 0  </span><br><span class="line"><span class="built_in">let</span> Tlist_Compact_Format = 1  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin - mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。  </span><br><span class="line"><span class="string">" \m  mark or unmark the word under (or before) the cursor  </span><br><span class="line">"</span> \r  manually input a regular expression. 用于搜索.  </span><br><span class="line"><span class="string">" \n  clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .  </span><br><span class="line">"</span> \*  当前MarkWord的下一个     \<span class="comment">#  当前MarkWord的上一个  </span></span><br><span class="line"><span class="string">" \/  所有MarkWords的下一个    \?  所有MarkWords的上一个  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录  </span><br><span class="line"><span class="string">" :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree  </span><br><span class="line">"</span> o 打开关闭文件或者目录         t 在标签页中打开  </span><br><span class="line"><span class="string">" T 在后台标签页中打开           ! 执行此文件  </span><br><span class="line">"</span> p 到上层目录                   P 到根目录  </span><br><span class="line"><span class="string">" K 到第一个节点                 J 到最后一个节点  </span><br><span class="line">"</span> u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）  </span><br><span class="line"><span class="string">" r 递归刷新当前目录             R 递归刷新当前根目录  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="string">" F3 NERDTree 切换  </span><br><span class="line">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;  </span><br><span class="line">imap &lt;F3&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="string">" plugin - NERD_commenter.vim   注释代码用的，  </span><br><span class="line">"</span> [count],cc 光标以下count行逐行添加注释(7,cc)  </span><br><span class="line"><span class="string">" [count],cu 光标以下count行逐行取消注释(7,cu)  </span><br><span class="line">"</span> [count],cm 光标以下count行尝试添加块注释(7,cm)  </span><br><span class="line"><span class="string">" ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。  </span><br><span class="line">"</span> 注：count参数可选，无则默认为选中行或当前行  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span><span class="built_in">let</span> NERDSpaceDelims=1       <span class="string">" 让注释符与语句之间留一个空格  </span><br><span class="line">"</span><span class="built_in">let</span> NERDCompact***yComs=1   <span class="string">" 多行注释时样子更好看  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="string">" plugin - DoxygenToolkit.vim  由注释生成文档，并且能够快速生成函数标准注释  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="built_in">let</span> g:DoxygenToolkit_authorName=<span class="string">"Asins - asinsimple AT gmail DOT com"</span>  </span><br><span class="line"><span class="built_in">let</span> g:DoxygenToolkit_briefTag_funcName=<span class="string">"yes"</span>  </span><br><span class="line">map &lt;leader&gt;da :DoxAuthor&lt;CR&gt;  </span><br><span class="line">map &lt;leader&gt;df :Dox&lt;CR&gt;  </span><br><span class="line">map &lt;leader&gt;db :DoxBlock&lt;CR&gt;  </span><br><span class="line">map &lt;leader&gt;dc a /*  */&lt;LEFT&gt;&lt;LEFT&gt;&lt;LEFT&gt;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin – ZenCoding.vim 很酷的插件，HTML代码生成  </span><br><span class="line"><span class="string">" 插件最新版：http://github.com/mattn/zencoding-vim  </span><br><span class="line">"</span> 常用命令可看：http://nootn.com/blog/Tool/23/  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="string">" plugin – checksyntax.vim    JavaScript常见语法错误检查  </span><br><span class="line">"</span> 默认快捷方式为 F5  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">let g:checksyntax_auto = 0 "</span> 不自动检查  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin - NeoComplCache.vim    自动补全插件  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">let g:AutoComplPop_NotEnableAtStartup = 1  </span><br><span class="line">let g:NeoComplCache_EnableAtStartup = 1  </span><br><span class="line">let g:NeoComplCache_SmartCase = 1  </span><br><span class="line">let g:NeoComplCache_TagsAutoUpdate = 1  </span><br><span class="line">let g:NeoComplCache_EnableInfo = 1  </span><br><span class="line">let g:NeoComplCache_EnableCamelCaseCompletion = 1  </span><br><span class="line">let g:NeoComplCache_MinSyntaxLength = 3  </span><br><span class="line">let g:NeoComplCache_EnableSkipCompletion = 1  </span><br><span class="line">let g:NeoComplCache_SkipInputTime = '0.5'  </span><br><span class="line">let g:NeoComplCache_SnippetsDir = <span class="variable">$VIMFILES</span>.'/snippets'  </span><br><span class="line">"</span> &lt;TAB&gt; completion.  </span><br><span class="line">inoremap &lt;expr&gt;&lt;TAB&gt; pumvisible() ? <span class="string">"\&lt;C-n&gt;"</span> : <span class="string">"\&lt;TAB&gt;"</span>  </span><br><span class="line"><span class="string">" snippets expand key  </span><br><span class="line">imap &lt;silent&gt; &lt;C-e&gt; &lt;Plug&gt;(neocomplcache_snippets_expand)  </span><br><span class="line">smap &lt;silent&gt; &lt;C-e&gt; &lt;Plug&gt;(neocomplcache_snippets_expand)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line"><span class="string">" plugin - matchit.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转  </span><br><span class="line">"</span> % 正向匹配      g% 反向匹配  </span><br><span class="line"><span class="string">" [% 定位块首     ]% 定位块尾  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin - vcscommand.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转  </span><br><span class="line"><span class="string">" SVN/git管理工具  </span><br><span class="line">"</span>-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">"</span> plugin – a.vim  </span><br><span class="line"><span class="string">"-----------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">"</span>---------------------------------------------  </span><br><span class="line"><span class="string">"定义函数SetTitle，自动插入文件头  </span><br><span class="line">func SetTitle()  </span><br><span class="line">if &amp;filetype == 'c'  </span><br><span class="line">    call setline(1, "</span><span class="comment">#include &lt;stdio.h&gt;")  </span></span><br><span class="line">    call setline(2, <span class="string">"#include &lt;stdlib.h&gt;"</span>)  </span><br><span class="line">    call setline(3, <span class="string">""</span>)  </span><br><span class="line">    call setline(4, <span class="string">"int main() &#123;"</span>)  </span><br><span class="line">elseif &amp;filetype == <span class="string">'cpp'</span>  </span><br><span class="line">    call setline(1, <span class="string">"#include &lt;iostream&gt;"</span>)  </span><br><span class="line">    call setline(2, <span class="string">""</span>)  </span><br><span class="line">    call setline(3, <span class="string">"int main() &#123;"</span>)  </span><br><span class="line">elseif &amp;filetype == <span class="string">'sh'</span>  </span><br><span class="line">    call setline(1, <span class="string">"#!/bin/bash"</span>)  </span><br><span class="line">    call setline(2, <span class="string">""</span>)  </span><br><span class="line">elseif &amp;filetype == <span class="string">'py'</span>  </span><br><span class="line">    call setline(1, <span class="string">"#!coding:utf-8"</span>)  </span><br><span class="line">    call setline(2, <span class="string">""</span>)  </span><br><span class="line">endif  </span><br><span class="line">endfunc  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">set</span> completeopt=longest,menu  </span><br><span class="line">    <span class="string">"新建.c,.h,.sh,.java文件，自动插入文件头  </span><br><span class="line">    autocmd BufNewFile *.[ch],*.sh,*.cpp,*.java exec "</span>:call SetTitle()<span class="string">"  </span><br><span class="line">    "</span>---------------------------------------------  </span><br><span class="line">  </span><br><span class="line"><span class="string">"定义CompileRun函数，用来调用进行编译和运行  </span><br><span class="line">func! CompileRun()  </span><br><span class="line">    exec "</span>w<span class="string">"  </span><br><span class="line">    "</span>C程序  </span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'c'</span>  </span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!gcc % -g -o %&lt;.exe"</span>  </span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"! ./%&lt;.exe"</span>  </span><br><span class="line">    elseif &amp;filetype == <span class="string">'cpp'</span>  </span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!g++ % -g -o %&lt;"</span>  </span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"! ./%&lt;"</span>  </span><br><span class="line">        <span class="string">"Java程序  </span><br><span class="line">    elseif &amp;filetype == 'java'  </span><br><span class="line">        exec "</span>!javac %<span class="string">"  </span><br><span class="line">        exec "</span>!java %&lt;<span class="string">"  </span><br><span class="line">    endif  </span><br><span class="line">endfunc  </span><br><span class="line">"</span>结束定义CompileRun  </span><br><span class="line"><span class="string">"-------------------------  </span><br><span class="line">"</span> ======= 编译 &amp;&amp; 运行 ======= <span class="string">"  </span><br><span class="line">"</span> 编译源文件  </span><br><span class="line">func! CompileCode()  </span><br><span class="line">     <span class="built_in">exec</span> <span class="string">"w"</span>  </span><br><span class="line">     <span class="keyword">if</span> &amp;filetype == <span class="string">"c"</span>  </span><br><span class="line">         <span class="built_in">exec</span> <span class="string">"!gcc -Wall -std=c99 %&lt;.c -o %&lt;"</span>  </span><br><span class="line">     elseif &amp;filetype == <span class="string">"cpp"</span>  </span><br><span class="line">         <span class="built_in">exec</span> <span class="string">"!g++ -Wall -std=c++98 %&lt;.cpp -o %&lt;"</span>  </span><br><span class="line">     elseif &amp;filetype == <span class="string">"java"</span>  </span><br><span class="line">         <span class="built_in">exec</span> <span class="string">"!javac %&lt;.java"</span>  </span><br><span class="line">     endif  </span><br><span class="line">endfunc  </span><br><span class="line"><span class="string">" 运行可执行文件  </span><br><span class="line">func! RunCode()  </span><br><span class="line">    exec "</span>w<span class="string">"  </span><br><span class="line">    if &amp;filetype == "</span>c<span class="string">" || &amp;filetype == "</span>cpp<span class="string">" || &amp;filetype == "</span>haskell<span class="string">"  </span><br><span class="line">        exec "</span>! ./%&lt;<span class="string">"  </span><br><span class="line">    elseif &amp;filetype == "</span>java<span class="string">"  </span><br><span class="line">        exec "</span>!java %&lt;<span class="string">"  </span><br><span class="line">    endif  </span><br><span class="line">endfunc  </span><br><span class="line">  </span><br><span class="line">"</span>---------------------------------------------  </span><br><span class="line"><span class="string">" Ctrl + F9   一键保存, 编译  </span><br><span class="line">"</span> Ctrl + F10  一键保存，运行  </span><br><span class="line"><span class="string">" F9  编译 + 运行  </span><br><span class="line">"</span> F10 Debug  </span><br><span class="line">map&lt;C-F9&gt;:call CompileCode()&lt;CR&gt;  </span><br><span class="line">imap&lt;C-F9&gt; &lt;ESC&gt;:call CompileCode()&lt;CR&gt;  </span><br><span class="line">vmap&lt;C-F9&gt; &lt;ESC&gt;:call CompileCode()&lt;CR&gt;  </span><br><span class="line">map&lt;C-F10&gt;:call RunCode()&lt;CR&gt;  </span><br><span class="line">imap&lt;C-F10&gt; &lt;ESC&gt;:call RunCode()&lt;CR&gt;  </span><br><span class="line">vmap&lt;C-F10&gt; &lt;ESC&gt;:call RunCode()&lt;CR&gt;  </span><br><span class="line">map&lt;F9&gt;:call CompileRun()&lt;CR&gt;  </span><br><span class="line">imap&lt;F9&gt; &lt;ESC&gt;:call CompileRun()&lt;CR&gt;  </span><br><span class="line">vmap &lt;F9&gt; &lt;ESC&gt;:call CompileRun()&lt;CR&gt;  </span><br><span class="line">                                 <span class="string">"  </span><br><span class="line">"</span><span class="built_in">set</span> mouse=v <span class="string">" 鼠标支持</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Macos High Sierra 10.13 Work Environment Install]]></title>
      <url>http://iequa.com/2017/10/03/ops/ops-mac10.13-install-env/</url>
      <content type="html"><![CDATA[<p>Enable Dragging With Three Finger : </p>
<blockquote>
<p>System Preferences -&gt; Accessibility -&gt; Mouse &amp; Trackpad -&gt; Trackpad Options.</p>
</blockquote>
<a id="more"></a>
<h2 id="1-Common-Soft"><a href="#1-Common-Soft" class="headerlink" title="1. Common Soft"></a>1. Common Soft</h2><ol>
<li>Chrome</li>
<li>NeteaseMusic</li>
<li>Baiduyun &amp; Aira2GUI</li>
<li>Microsoft_Office_2016_15.38.17090200_Installer.pkg</li>
</ol>
<blockquote>
<p>Google Chrome is up to date<br>Version 61.0.3163.100 (Official Build) (64-bit)</p>
<p>百度云破解限速 (Aria2GUI + chrome plugin)</p>
<p>Evernote 国际版与国内版分开管理的.</p>
</blockquote>
<h2 id="2-Dev-Tools"><a href="#2-Dev-Tools" class="headerlink" title="2. Dev Tools"></a>2. Dev Tools</h2><h3 id="2-1-general-dev-tool"><a href="#2-1-general-dev-tool" class="headerlink" title="2.1 general dev tool"></a>2.1 general dev tool</h3><ol>
<li>Macdown</li>
<li>Alfred</li>
<li>Atom</li>
<li>SubLime Text</li>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
<li>Iterm2</li>
<li>Oh-my-zsh</li>
<li><a href="https://feiyang.li/2017/02/26/jetbrains/index.html" target="_blank" rel="external">PyCharm &amp; IDEA</a></li>
<li>GNU_Octave_3.8.0-6.dmg</li>
</ol>
<blockquote>
<p>brew (install 过程会自动需要 Xcode 被安装)<br>brew install wget tree </p>
<p>wget <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">https://bootstrap.pypa.io/get-pip.py</a> <br><br>sudo python get-pip.py</p>
</blockquote>
<h3 id="2-2-iterm-amp-zsh"><a href="#2-2-iterm-amp-zsh" class="headerlink" title="2.2 iterm &amp; zsh"></a>2.2 iterm &amp; zsh</h3><p><strong>Iterm2 Change Font</strong></p>
<blockquote>
<p>Iterm2 -&gt; Preference -&gt; Profiles -&gt; Text -&gt; Change Font -&gt; 17pt Courier New Bold</p>
</blockquote>
<p><strong>Iterm2 Hide scrollbars And title bar</strong></p>
<blockquote>
<p>Preference -&gt; Appearance </p>
<p>取消 show per-pane title bar with split panes.<br>勾选 Hide scrollbars</p>
</blockquote>
<p><strong>Iterm2 Color Presets</strong></p>
<blockquote>
<p>Iterm2 -&gt; Preference -&gt; Profiles -&gt; Color -&gt; Color Presets -&gt; your_theme</p>
<p>maybe Atom, Brogrammer, Darkside </p>
<p><a href="https://github.com/iplaces/astro-zsh-theme" target="_blank" rel="external">Zsh astro theme</a></p>
</blockquote>
<p><strong>oh-my-zsh 自带 git 插件，里面的针对git 的别名设置见</strong>:</p>
<blockquote>
<p>➜ &gt;vim .oh-my-zsh/plugins/git/git.plugin.zsh</p>
</blockquote>
<p><strong>oh-my-zsh autojump plugin install</strong></p>
<ol>
<li>brew install autojump</li>
<li>vim .zshrc</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins=(git autojump)</span><br><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>
<p>then, source ~/.zshrc</p>
<p><strong>Reference Article</strong></p>
<blockquote>
<p><a href="http://iterm2colorschemes.com/" target="_blank" rel="external">Iterm2-color-schemes</a><br><a href="https://github.com/bahlo/iterm-colors" target="_blank" rel="external">Iterm-colors</a><br><a href="https://github.com/iplaces/astro-zsh-theme" target="_blank" rel="external">Zsh astro theme</a><br><a href="http://blog.csdn.net/rapheler/article/details/51505003" target="_blank" rel="external">使用 Zsh 的十大优点</a>.<br><a href="http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html" target="_blank" rel="external">oh-my-zsh配置你的zsh提高shell逼格终极选择</a>.<br><a href="http://huang-jerryc.com/2016/08/11/%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E4%B8%AA%E6%80%A7Terminal%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%20iTerm/" target="_blank" rel="external">打造高效个性Terminal（一）之 iTerm</a>.<br><a href="https://segmentfault.com/a/1190000006248107" target="_blank" rel="external">打造高效个性Terminal（二）之 zsh</a>.<br><a href="http://www.barretlee.com/blog/2015/03/30/autojump-in-mac/" target="_blank" rel="external">Mac下的效率工具autojump</a></p>
</blockquote>
<hr>
<h3 id="2-3-ssh-config"><a href="#2-3-ssh-config" class="headerlink" title="2.3 ssh config"></a>2.3 ssh config</h3><ol>
<li>ssh-keygen -t rsa -C “your-company-email-full-address”</li>
<li>~/.ssh/id_rsa.pub 粘贴到运维平台</li>
</ol>
<blockquote>
<p>mac iterm2 ssh 跳转失败, 解决办法 :</p>
<p>(1) 新建并编辑 .ssh/config, 并复制以下内容到 config文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host * </span><br><span class="line">ForwardAgent yes </span><br><span class="line">PasswordAuthentication yes </span><br><span class="line">StrictHostKeyChecking no </span><br><span class="line">HashKnownHosts yes </span><br><span class="line">Compression yes</span><br></pre></td></tr></table></figure>
<p>(2) cd ～/.ssh, 并在 terminal 中执行 ssh-add</p>
</blockquote>
<h3 id="2-4-navicat-for-MySQL"><a href="#2-4-navicat-for-MySQL" class="headerlink" title="2.4 navicat for MySQL"></a>2.4 navicat for MySQL</h3><p><img src="/images/ops/ops-ssh-general.png" alt="rds-general"></p>
<blockquote>
<p>Encoding 设置为 utf-8 则，查询数据库，汉字乱码，改为 Auto 解决。</p>
</blockquote>
<p><img src="/images/ops/ops-ssh-rds.png" alt="ssh-rds"></p>
<h2 id="3-Java"><a href="#3-Java" class="headerlink" title="3. Java"></a>3. Java</h2><ol>
<li><a href="http://blog.tibame.com/?p=2068" target="_blank" rel="external">JDK</a></li>
<li>Maven</li>
<li>Tomcat</li>
<li>Scala</li>
<li>Spark</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  software pwd</span><br><span class="line">/usr/local/xsoft/software</span><br><span class="line">➜  software ll</span><br><span class="line">total 0</span><br><span class="line">lrwxr-xr-x  apache-maven -&gt; /usr/local/xsoft/deploy/apache-maven-3.3.9</span><br><span class="line">lrwxr-xr-x  apache-tomcat -&gt; /usr/local/xsoft/deploy/apache-tomcat-7.0.59</span><br><span class="line">lrwxr-xr-x  scala -&gt; /usr/local/xsoft/deploy/scala-2.11.7</span><br><span class="line">lrwxr-xr-x  spark -&gt; /usr/local/xsoft/deploy/spark-1.6.3-bin-hadoop2.6</span><br><span class="line">➜  software</span><br></pre></td></tr></table></figure>
<h2 id="4-Blog"><a href="#4-Blog" class="headerlink" title="4. Blog"></a>4. Blog</h2><ol>
<li><a href="https://hexo.io/docs/" target="_blank" rel="external">hexo</a></li>
<li>Install Node.js</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Once nvm is installed, restart the terminal and run the following command to install Node.js:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm install v4.1.0</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<blockquote>
<p>v4.1.0 更合适 hexo</p>
</blockquote>
<h2 id="5-Python"><a href="#5-Python" class="headerlink" title="5. Python"></a>5. Python</h2><h3 id="5-1-this-mac-install-pip"><a href="#5-1-this-mac-install-pip" class="headerlink" title="5.1 this mac install pip"></a>5.1 this mac install pip</h3><p><a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">Python pip</a> , <code>sudo python get-pip.py</code></p>
<p>then, terminal input <code>pip list</code>.</p>
<blockquote>
<p>If exist warning:</p>
<p>DEPRECATION: The default format will switch to columns in the future. You can use –format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</p>
<p>solve this warning:</p>
<p>~.vim ~/.pip/pip.conf<br>[list]<br>format=columns  </p>
</blockquote>
<h3 id="5-2-pyenv-install-package"><a href="#5-2-pyenv-install-package" class="headerlink" title="5.2 pyenv install package"></a>5.2 pyenv install package</h3><p><strong>First, you need to install python <code>pyenv</code> environment</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.3</span></span><br><span class="line">(vpy3)</span><br><span class="line">➜</span><br><span class="line"></span><br><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install pandas</span><br><span class="line"></span><br><span class="line">pip install xlrd</span><br><span class="line">pip install xlwt</span><br><span class="line">pip install StatsModels</span><br><span class="line">pip install scikit-learn</span><br><span class="line"></span><br><span class="line">pip install jieba</span><br><span class="line">pip install --upgrade gensim</span><br></pre></td></tr></table></figure>
<blockquote>
<p>pip install elasticsearch==1.9</p>
</blockquote>
<p><strong>ipython</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后, 如 terminall input <code>ipython</code> 不存在, 则 pip show ipython,  python -m IPython 试试. </p>
</blockquote>
<p><strong>notebook</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip install --ignore-installed six</span></span><br><span class="line"><span class="comment">#pip install target-gsheet tap-fixerio</span></span><br><span class="line">pip install notebook</span><br></pre></td></tr></table></figure>
<blockquote>
<p>pip install notebook, 如 macos High Sierra 10.13 报错，则<br>pip install –ignore-installed six<br>pip install target-gsheet tap-fixerio<br>then, pip install notebook</p>
</blockquote>
<h2 id="8-Reference"><a href="#8-Reference" class="headerlink" title="8. Reference"></a>8. Reference</h2><ul>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
<li><a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">Get-pip</a></li>
<li><a href="https://feiyang.li/2017/02/26/jetbrains/index.html" target="_blank" rel="external">IntelliJ、Pycharm激活</a></li>
<li><a href="http://blog.tibame.com/?p=2068" target="_blank" rel="external">Mac OSX 安裝JDK</a></li>
<li><a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Doc</a></li>
<li><a href="http://www.jianshu.com/p/3e0206dd23ac" target="_blank" rel="external">Mac 上完整卸载Node.js</a></li>
<li><a href="http://10176523.cn/archives/50" target="_blank" rel="external">Mac OSX 完整卸载Node.js</a></li>
<li><a href="https://segmentfault.com/a/1190000004404505" target="_blank" rel="external">node版本管理工具nvm-Mac下安装及使用</a></li>
<li><a href="http://xclient.info/" target="_blank" rel="external">XClient.info Mac App</a></li>
<li><a href="https://stackoverflow.com/questions/32856194/ipython-on-macos-10-10-command-not-found" target="_blank" rel="external">Stackoverflow python on MacOS 10.10 - command not found</a></li>
<li><a href="/2016/08/02/ml-python-env/">Blair python install data mining env</a></li>
</ul>
<p>Macos NSNavRecentPlaces 内部自动生成的配置，别乱改。</p>
<blockquote>
<p>defaults write -g NSNavRecentPlaces ‘(“~/Desktop”, “/usr/local/xsoft/software”)’;</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorboard 可视化好帮手 1]]></title>
      <url>http://iequa.com/2017/09/12/tensorflow/tf-4.1-tensorboard1/</url>
      <content type="html"><![CDATA[<p>学会用 Tensorflow 自带的 tensorboard 去可视化我们所建造出来的神经网络是一个很好的学习理解方式. </p>
<p>用最直观的流程图告诉你, 你的神经网络是长怎样,有助于你发现编程中间的问题和疑问.</p>
<a id="more"></a>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>这次我们会介绍如何可视化神经网络。因为很多时候我们都是做好了一个神经网络，但是没有一个图像可以展示给大家看。</p>
<p><strong>TensorFlow</strong> 的可视化工具 <strong>Tensorboard</strong> : 通过使用这个工具我们可以很直观的看到整个神经网络的结构、框架。 </p>
<p>今天要显示的神经网络差不多是这样子的</p>
<p><img src="/images/tensorflow/tf-4.1_1.png" width="600"></p>
<p>同时我们也可以展开看每个layer中的一些具体的结构：</p>
<p><img src="/images/tensorflow/tf-4.1_2.png" width="600"></p>
<p>好，通过阅读代码和之前的图片我们大概知道了此处是有:</p>
<blockquote>
<ul>
<li>一个输入层（<strong>inputs</strong>）</li>
<li>一个隐含层（<strong>layer</strong>）</li>
<li>一个输出层（<strong>output</strong>） </li>
</ul>
</blockquote>
<p>现在可以看看如何进行可视化.</p>
<h2 id="搭建图纸"><a href="#搭建图纸" class="headerlink" title="搭建图纸"></a>搭建图纸</h2><p>首先从 <code>Input</code> 开始：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>对于 input 我们进行如下修改： 首先，可以为<code>xs</code>指定名称为<code>x_in</code>, <code>ys</code> 同样。 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xs= tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>],name=<span class="string">'x_in'</span>)</span><br><span class="line">ys= tf.placeholder(tf.loat32, [<span class="keyword">None</span>, <span class="number">1</span>],name=<span class="string">'y_in'</span>)</span><br></pre></td></tr></table></figure>
<p>这里指定的名称将来会在可视化的图层 <code>inputs</code> 中显示出来</p>
<p>使用 <code>with tf.name_scope(&#39;inputs&#39;)</code> 可以将 <code>xs</code> 和 <code>ys</code> 包含进来，形成一个大的图层，图层的名字就是 <code>with tf.name_scope()</code> 方法里的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'inputs'</span>):</span><br><span class="line">    <span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">    xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">    ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>接下来开始编辑 <code>layer</code> ， 请看编辑前的程序片段 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    <span class="comment"># add one more layer and return the output of this layer</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.add(tf.matmul(inputs, Weights), biases)</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b, )</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<h3 id="2-1-编辑后-add-layer"><a href="#2-1-编辑后-add-layer" class="headerlink" title="2.1 编辑后 add_layer"></a>2.1 编辑后 add_layer</h3><p><font color="green"><strong>编辑后， 这里的名字应该叫 layer, 下面是编辑后的</strong></font>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    <span class="comment"># add one more layer and return the output of this layer</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'layer'</span>):</span><br><span class="line">        Weights= tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">        <span class="comment"># and so on...</span></span><br></pre></td></tr></table></figure>
<p>在定义完大的框架layer之后，同时也需要定义每一个’框架‘里面的小部件：(Weights biases 和 activation function): 现在现对 <code>Weights</code> 定义： 定义的方法同上，可以使用<code>tf.name.scope()</code> 方法，同时也可以在 <code>Weights</code> 中指定名称 <code>W</code> 。 即为：</p>
<p>接着继续定义 <code>biases</code> ， 定义方式同上。</p>
<p><code>activation_function</code> 的话，可以暂时忽略。因为当你自己选择用 tensorflow 中的激励函数（activation function）的时候，tensorflow会默认添加名称。 最终，layer形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    <span class="comment"># add one more layer and return the output of this layer</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'layer'</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'weights'</span>):</span><br><span class="line">            Weights = tf.Variable(</span><br><span class="line">            tf.random_normal([in_size, out_size]), </span><br><span class="line">            name=<span class="string">'W'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'biases'</span>):</span><br><span class="line">            biases = tf.Variable(</span><br><span class="line">            tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>, </span><br><span class="line">            name=<span class="string">'b'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'Wx_plus_b'</span>):</span><br><span class="line">            Wx_plus_b = tf.add(</span><br><span class="line">            tf.matmul(inputs, Weights), </span><br><span class="line">            biases)</span><br><span class="line">        <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            outputs = Wx_plus_b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            outputs = activation_function(Wx_plus_b, )</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<p>效果如下：（有没有看见刚才定义 layer 里面的“内部构件”呢？）</p>
<p><img src="/images/tensorflow/tf-4.1_4.png" width="600"></p>
<p>最后编辑 <code>loss</code> 部分：将 <code>with tf.name_scope()</code> 添加在 <code>loss</code> 上方，并为它起名为 <code>loss</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the error between prediciton and real data</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    loss = tf.reduce_mean(</span><br><span class="line">    tf.reduce_sum(</span><br><span class="line">    tf.square(ys - prediction),</span><br><span class="line">    eduction_indices=[<span class="number">1</span>]</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure>
<p>这句话就是“绘制” loss 了， 如下：</p>
<p><img src="/images/tensorflow/tf-4.1_5.png" width="600"></p>
<p>使用 <code>with tf.name_scope()</code> 再次对 <code>train_step</code> 部分进行编辑, 如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">    train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br></pre></td></tr></table></figure>
<p>我们需要使用 <code>tf.summary.FileWriter()</code> 将上面‘绘画’出的图保存到一个目录中，以方便后期在浏览器中可以浏览。 这个方法中的第二个参数需要使用 <code>sess.graph</code> ， 因此我们需要把这句话放在获取 <code>session</code> 的后面。 这里的 <code>graph</code> 是将前面定义的框架信息收集起来，然后放在 <code>logs/</code> 目录下面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = tf.Session() <span class="comment"># get session</span></span><br><span class="line"><span class="comment"># tf.train.SummaryWriter soon be deprecated, use following</span></span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">"logs/"</span>, sess.graph)</span><br></pre></td></tr></table></figure>
<p>最后在你的terminal（终端）中 ，使用以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir logs</span><br></pre></td></tr></table></figure>
<p>同时将终端中输出的网址复制到浏览器中，便可以看到之前定义的视图框架了。</p>
<p>tensorboard 还有很多其他的参数，希望大家可以多多了解, 可以使用 tensorboard –help 查看tensorboard的详细参数 最终的全部代码在这里</p>
<h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><p>(1) 与 Tensorboard 兼容的浏览器是 “Google Chrome”. 使用其他的浏览器不保证所有内容都能正常显示.</p>
<p>(2) 请使用 <a href="http://localhost:6006" target="_blank" rel="external">http://localhost:6006</a>, 大多数朋友都是这个问题.</p>
<p>(3) 请确保你的 tensorboard 指令是在你的 logs 文件根目录执行的. 如果在其他目录下, 比如 <code>Desktop</code> 等, 可能不会成功看到图. 比如在下面这个目录, 你要 cd 到 <code>project</code> 这个地方执行 <code>/project &gt; tensorboard --logdir logs</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- project</span><br><span class="line">   - logs</span><br><span class="line">   model.py</span><br><span class="line">   env.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有的朋友使用 anaconda 下的 python3.5 的虚拟环境, 如果你输入 tensorboard 的指令, 出现报错: <code>&quot;tensorboard&quot; is not recognized as an internal or external command...</code></p>
<p>解决方法的关键就是需要激活TensorFlow. 管理员模式打开 Anaconda Prompt, 输入 activate tensorflow, 接着按照上面的流程执行 tensorboard 指令.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/tensorflowTUT/tf14_tensorboard/full_code.py" target="_blank" rel="external">莫烦代码 tf14_tensorboard/full_code.py</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow Speed Up Training]]></title>
      <url>http://iequa.com/2017/09/12/tensorflow/tf-3.3-A-speed-up-learning/</url>
      <content type="html"><![CDATA[<p>怎么样加速你的神经网络训练过程. Speed Up Training</p>
<a id="more"></a>
<p>学习资料:</p>
<ul>
<li>cs231n 各种 Optimizer 的对比 <a href="http://cs231n.github.io/neural-networks-3/" target="_blank" rel="external">链接</a> (英文)</li>
<li>Tensorflow 的可用 Optimizer <a href="https://www.tensorflow.org/api_guides/python/train" target="_blank" rel="external">链接</a></li>
<li>Improving DNN (week2) Optimization Algorithm <a href="/2018/07/21/deeplearning-ai-Improving-Deep-Neural-Networks-week2/#3-Momentum">链接</a></li>
</ul>
<p>包括以下几种模式:</p>
<blockquote>
<ul>
<li>Stochastic Gradient Descent (SGD)</li>
<li>Momentum</li>
<li>AdaGrad</li>
<li>RMSProp</li>
<li>Adam</li>
</ul>
</blockquote>
<p><img src="/images/tensorflow/tf-3.4-speedup1.png" width="600"></p>
<p>越复杂的神经网络 , 越多的数据 , 我们需要在训练神经网络的过程上花费的时间也就越多. 原因很简单, 就是因为计算量太大了. 可是往往有时候为了解决复杂的问题, 复杂的结构和大数据又是不能避免的, 所以我们需要寻找一些方法, 让神经网络聪明起来, 快起来.</p>
<h2 id="1-Stochastic-Gradient-Descent-SGD"><a href="#1-Stochastic-Gradient-Descent-SGD" class="headerlink" title="1. Stochastic Gradient Descent (SGD)"></a>1. Stochastic Gradient Descent (SGD)</h2><p><img src="/images/tensorflow/tf-3.4-speedup2.png" width="600"></p>
<p>所以, 最基础的方法就是 SGD 啦, 想像红色方块是我们要训练的 data, 如果用普通的训练方法, 就需要重复不断的把整套数据放入神经网络 <strong>NN</strong> 训练, 这样消耗的计算资源会很大.</p>
<p>我们换一种思路, 如果把这些数据拆分成小批小批的, 然后再分批不断放入 NN 中计算, 这就是我们常说的 SGD 的正确打开方式了. 每次使用批数据, 虽然不能反映整体数据的情况, 不过却很大程度上加速了 NN 的训练过程, 而且也不会丢失太多准确率.如果运用上了 SGD, 你还是嫌训练速度慢, 那怎么办?</p>
<p><img src="/images/tensorflow/tf-3.4-speedup3.png" width="400"></p>
<p>没问题, 事实证明, SGD 并不是最快速的训练方法, 红色的线是 SGD, 但它到达学习目标的时间是在这些方法中最长的一种. 我们还有很多其他的途径来加速训练.</p>
<h2 id="2-Momentum-更新方法"><a href="#2-Momentum-更新方法" class="headerlink" title="2. Momentum 更新方法"></a>2. Momentum 更新方法</h2><p><img src="/images/tensorflow/tf-3.4-speedup4.png" width="650"></p>
<p>大多数其他途径是在更新神经网络参数那一步上动动手脚. 传统的参数 W 的更新是把原始的 W 累加上一个负的学习率(learning rate) 乘以校正值 (dx). 这种方法可能会让学习过程曲折无比, 看起来像 喝醉的人回家时, 摇摇晃晃走了很多弯路.</p>
<p><img src="/images/tensorflow/tf-3.4-speedup5.png" width="650"></p>
<p>所以我们把这个人从平地上放到了一个斜坡上, 只要他<strong><code>往下坡的方向走一点点, 由于向下的惯性</code></strong>, 他不自觉地就一直往下走, 走的弯路也变少了. 这就是 Momentum 参数更新. 另外一种加速方法叫 <strong>AdaGrad</strong>.</p>
<h2 id="3-AdaGrad-更新方法"><a href="#3-AdaGrad-更新方法" class="headerlink" title="3. AdaGrad 更新方法"></a>3. AdaGrad 更新方法</h2><p><img src="/images/tensorflow/tf-3.4-speedup6.png" width="650"></p>
<p>这种方法是在学习率上面动手脚, 使得每一个参数更新都会有自己与众不同的学习率, 他的作用和 momentum 类似, 不过不是给喝醉酒的人安排另一个下坡, 而是给他一双不好走路的鞋子, 使得他一摇晃着走路就脚疼, 鞋子成为了走弯路的阻力, 逼着他往前直着走. 他的数学形式是这样的. 接下来又有什么方法呢? 如果把下坡和不好走路的鞋子合并起来, 是不是更好呢? 没错, 这样我们就有了 RMSProp 更新方法.</p>
<h2 id="4-RMSProp-更新方法"><a href="#4-RMSProp-更新方法" class="headerlink" title="4. RMSProp 更新方法"></a>4. RMSProp 更新方法</h2><p><img src="/images/tensorflow/tf-3.4-speedup7.png" width="650"></p>
<p>有了 momentum 的惯性原则 , 加上 adagrad 的对错误方向的阻力, 我们就能合并成这样. 让 RMSProp同时具备他们两种方法的优势. 不过细心的同学们肯定看出来了, 似乎在 RMSProp 中少了些什么. 原来是我们还没把 Momentum合并完全, RMSProp 还缺少了 momentum 中的 这一部分. 所以, 我们在 Adam 方法中补上了这种想法.</p>
<h2 id="5-Adam-更新方法"><a href="#5-Adam-更新方法" class="headerlink" title="5. Adam 更新方法"></a>5. Adam 更新方法</h2><p><img src="/images/tensorflow/tf-3.4-speedup8.png" width="650"></p>
<p>计算m 时有 momentum 下坡的属性, 计算 v 时有 adagrad 阻力的属性, 然后再更新参数时 把 m 和 V 都考虑进去. 实验证明, 大多数时候, 使用 adam 都能又快又好的达到目标, 迅速收敛. 所以说, 在加速神经网络训练的时候, 一个下坡, 一双破鞋子, 功不可没.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 例子3 ： 建造神经网络]]></title>
      <url>http://iequa.com/2017/09/11/tensorflow/tf-3.2-create-NN/</url>
      <content type="html"><![CDATA[<p>这次提到了怎样建造一个完整的神经网络, 包括添加 <strong>神经层</strong>, <strong>计算误差</strong>, <strong>训练步骤</strong>, 判断是否在学习.</p>
<a id="more"></a>
<h2 id="1-add-layer-功能"><a href="#1-add-layer-功能" class="headerlink" title="1. add_layer 功能"></a>1. add_layer 功能</h2><p>首先，我们导入本次所需的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造添加一个神经层的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.w3cschool.cn/tensorflow_python/tensorflow_python-n7hl2gmf.html" target="_blank" rel="external">TensorFlow随机值: tf.random_normal函数：</a> 将返回一个指定形状的张量，通过随机的正常值填充</p>
<p>tf.random_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)</p>
</blockquote>
<h2 id="2-导入数据"><a href="#2-导入数据" class="headerlink" title="2. 导入数据"></a>2. 导入数据</h2><p>构建所需的数据。 </p>
<p>这里的 <code>x_data</code> 和 <code>y_data</code> 并不是严格的一元二次函数的关系，因为我们多加了一个 <code>noise</code>, 这样看起来会更像真实情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>, dtype=np.float32)[:, np.newaxis]</span><br><span class="line"><span class="comment"># numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment"># 得到 300 个大小的一维数组， 通过 [:, np.newaxis] 行变列，变为 300 行，1 列 的二维 数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.random.normal(loc=0.0 均值, scale=1.0 标准差, size=None 形状)</span></span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape).astype(np.float32)</span><br><span class="line"></span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用占位符定义我们所需的神经网络的输入。 `tf.placeholder()` 就是代表占位符</span></span><br><span class="line"><span class="comment"># 这里的 `None` 代表无论输入有多少都可以，因为输入只有一个特征，所以这里是 `1`。</span></span><br><span class="line"></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>接下来，我们就可以开始定义神经层了。 通常神经层都包括 <strong>input</strong>输入层、<strong>hide</strong>隐藏层 和 <strong>output</strong>输出层。这里的输入层只有一个属性， 所以我们就只有一个输入；隐藏层我们可以自己假设，这里我们假设隐藏层有<strong>10</strong>个神经元； 输出层和输入层的结构是一样的，所以我们的输出层也是只有一层。 所以，我们构建的是——输入层1个、隐藏层10个、输出层1个的神经网络。</p>
<h2 id="3-搭建网络"><a href="#3-搭建网络" class="headerlink" title="3. 搭建网络"></a>3. 搭建网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 hide隐藏层， 利用之前的 `add_layer()` 函数，这里使用 Tensorflow 自带的激励函数 `tf.nn.relu`。</span></span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着，定义输出层。此时的输入就是隐藏层的输出 —— `l1`，输入有 10 层（隐藏层的输出层），输出有 1 层。</span></span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算预测值 `prediction` 和 真实值的误差，对二者差的平方求和再取平均。</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),</span><br><span class="line">                     reduction_indices=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，是很关键的一步，如何让机器学习提升它的准确率。</span></span><br><span class="line"><span class="comment"># `tf.train.GradientDescentOptimizer()` 中的值通常都小于 `1`，这里取的是 `0.1`，代表以 `0.1` 的效率来最小化误差 `loss`。</span></span><br><span class="line"></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量时，都要对它进行初始化，这是必不可少的。</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 `Session`，并用 `Session` 来执行 `init` 初始化步骤。 </span></span><br><span class="line"><span class="comment">#（注意：在 `tensorflow` 中，只有session.run()才会执行我们定义的运算。）</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>
<h2 id="4-训练"><a href="#4-训练" class="headerlink" title="4. 训练"></a>4. 训练</h2><p>下面，让机器开始学习。</p>
<p>比如这里，我们让机器学习1000次。机器学习的内容是 <code>train_step</code>, 用 <code>Session</code> 来 <code>run</code> 每一次 training 的数据，逐步提升神经网络的预测准确性。 (注意：当运算要用到 <code>placeholder</code> 时，就需要 <code>feed_dict</code> 这个字典来指定输入。)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每 50 步 我们输出一下机器学习的误差。</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span><br></pre></td></tr></table></figure>
<p>在电脑上运行本次代码的结果为：</p>
<p>0.0587868<br>0.00416427<br>0.00312624<br>0.00291327<br>0.00282026<br>0.0027577<br>0.00270546<br>0.00266943<br>0.00265278<br>0.00263559</p>
<p>通过上图可以看出，误差在逐渐减小，这说明机器学习是有积极的效果的</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://www.tensorflow.org/api_guides/python/nn" target="_blank" rel="external">Tensorflow 提供的一些 激励函数</a></li>
<li><a href="http://www.ben-do.github.io/2016/09/15/change-shape-of-matrix-by-numpy/" target="_blank" rel="external">利用numpy的newaxis轉變矩陣的形狀</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 例子3 ： 添加层 def add_layer()]]></title>
      <url>http://iequa.com/2017/09/09/tensorflow/tf-3.1-add-layer/</url>
      <content type="html"><![CDATA[<p>在 Tensorflow 里定义一个 添加层的函数， 可以很容易的 添加神经层, 为之后的添加省下不少时间.</p>
<a id="more"></a>
<h2 id="定义-add-layer"><a href="#定义-add-layer" class="headerlink" title="定义 add_layer()"></a>定义 add_layer()</h2><p>神经层里常见的参数通常有 <code>weights</code>、<code>biases</code> 和激励函数。</p>
<p>首先，我们需要导入 <code>tensorflow</code> 模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>
<p>然后定义添加神经层的函数 <code>def add_layer()</code>, 它有四个参数：输入值、输入的大小、输出的大小和激励函数，我们设定默认的激励函数是 <code>None</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br></pre></td></tr></table></figure>
<p>接下来，我们开始定义 <code>weights</code> 和 <code>biases</code>。</p>
<p>因为在生成初始参数时，随机变量(<strong>normal distribution</strong>)会比全部为0要好很多，所以我们这里的 <code>weights</code> 为一个 <code>in_size</code> 行, <code>out_size</code> 列的随机变量矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br></pre></td></tr></table></figure>
<p>在机器学习中，<code>biases</code> 的推荐值不为0，所以我们这里是在0向量的基础上又加了0.1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<p>下面，我们定义 Wx_plus_b, 即神经网络未激活的值。其中，tf.matmul() 是矩阵的乘法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br></pre></td></tr></table></figure>
<p>当 activation_function 为 <code>None</code> 时，输出就是当前的预测值 <code>Wx_plus_b</code>，不为 <code>None</code> 时，就把 <code>Wx_plus_b</code> 传到 <code>activation_function()</code> 函数中得到输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    outputs = Wx_plus_b</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    outputs = activation_function(Wx_plus_b)</span><br></pre></td></tr></table></figure>
<p>最后，返回输出，添加一个神经层的函数 <code>def add_layer()</code> 就定义好了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://www.tensorflow.org/api_guides/python/nn" target="_blank" rel="external">Tensorflow 提供的一些 激励函数</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow 基本用法总结]]></title>
      <url>http://iequa.com/2017/09/08/tensorflow/tf-2.8-tensorflow-basic-summary/</url>
      <content type="html"><![CDATA[<p>tensorflow 中文文档学习 tensorflow 的基本用法。</p>
<a id="more"></a>
<p>按照文档说明，一点知识点小总结：</p>
<ol>
<li>就是 Session() 和 InteractiveSession() 的用法。后者用 Tensor.eval() 和 Operation.run() 来替代了 Session.run(). 其中更多的是用Tensor.eval()，所有的表达式都可以看作是 Tensor. </li>
<li>tf 表达式中所有的 <strong>var变量</strong> 或 <strong>constant常量</strong> 都应该是 <strong>tf</strong> 的类型。</li>
<li>只要是声明了 <strong>var变量</strong>，就得用 sess.run(tf.global_variables_initializer()) 方法来初始化才能用。</li>
</ol>
<h2 id="1-平面拟合"><a href="#1-平面拟合" class="headerlink" title="1. 平面拟合"></a>1. 平面拟合</h2><p>通过本例可以看到机器学习的一个通用过程：</p>
<ol>
<li>准备数据</li>
<li>构造模型（设置求解目标函数） </li>
<li>求解模型</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.准备数据：使用 NumPy 生成假数据(phony data), 总共 100 个点.</span></span><br><span class="line">x_data = np.float32(np.random.rand(<span class="number">2</span>, <span class="number">100</span>)) <span class="comment"># 随机输入</span></span><br><span class="line">y_data = np.dot([<span class="number">0.100</span>, <span class="number">0.200</span>], x_data) + <span class="number">0.300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构造一个线性模型</span></span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">W = tf.Variable(tf.random_uniform([<span class="number">1</span>, <span class="number">2</span>], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">y = tf.matmul(W, x_data) + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.求解模型</span></span><br><span class="line"><span class="comment"># 设置损失函数：误差的均方差</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y - y_data))</span><br><span class="line"><span class="comment"># 选择梯度下降的方法</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 迭代的目标：最小化损失函数</span></span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 以下是用 tf 来解决上面的任务</span></span><br><span class="line"><span class="comment"># 1.初始化变量：tf 的必备步骤，主要声明了变量，就必须初始化才能用</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置tensorflow对GPU的使用按需分配</span></span><br><span class="line">config  = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 2.启动图 (graph)</span></span><br><span class="line">sess = tf.Session(config=config)</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.迭代，反复执行上面的最小化损失函数这一操作（train op）,拟合平面</span></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">201</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> step, sess.run(W), sess.run(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到最佳拟合结果 W: [[0.100  0.200]], b: [0.300]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 [[ 0.27467242  0.81889796]] [-0.13746099]</span><br><span class="line">20 [[ 0.1619305   0.39317462]] [ 0.18206716]</span><br><span class="line">40 [[ 0.11901411  0.25831661]] [ 0.2642329]</span><br><span class="line">60 [[ 0.10580806  0.21761954]] [ 0.28916073]</span><br><span class="line">80 [[ 0.10176832  0.20532639]] [ 0.29671678]</span><br><span class="line">100 [[ 0.10053726  0.20161074]] [ 0.29900584]</span><br><span class="line">120 [[ 0.100163    0.20048723]] [ 0.29969904]</span><br><span class="line">140 [[ 0.10004941  0.20014738]] [ 0.29990891]</span><br><span class="line">160 [[ 0.10001497  0.20004457]] [ 0.29997244]</span><br><span class="line">180 [[ 0.10000452  0.20001349]] [ 0.29999167]</span><br><span class="line">200 [[ 0.10000138  0.2000041 ]] [ 0.29999748]</span><br></pre></td></tr></table></figure>
<h2 id="2-两个数求和"><a href="#2-两个数求和" class="headerlink" title="2. 两个数求和"></a>2. 两个数求和</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input1 = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">input2 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">input3 = tf.constant(<span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">intermd = tf.add(input1, input2)</span><br><span class="line">mul = tf.multiply(input2, input3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run([mul, intermd])  <span class="comment"># 一次执行多个op</span></span><br><span class="line">    print(result)</span><br><span class="line">    print(type(result))</span><br><span class="line">    print(type(result[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[15.0, 5.0]</span><br><span class="line">&lt;class &apos;list&apos;&gt;</span><br><span class="line">&lt;class &apos;numpy.float32&apos;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-变量，常量"><a href="#3-变量，常量" class="headerlink" title="3. 变量，常量"></a>3. 变量，常量</h2><h3 id="3-1-tensorflow-实现计数器"><a href="#3-1-tensorflow-实现计数器" class="headerlink" title="3.1 tensorflow 实现计数器"></a>3.1 tensorflow 实现计数器</h3><p>主要是设计了在循环中调用加法实现计数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建变量，初始化为0</span></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">"counter"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 op , 其作用是时 state 增加 1</span></span><br><span class="line">one = tf.constant(<span class="number">1</span>) <span class="comment"># 直接用 1 也就行了</span></span><br><span class="line">new_value = tf.add(state, <span class="number">1</span>)</span><br><span class="line">update = tf.assign(state, new_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动图之后， 运行 update op</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 创建好图之后，变量必须经过‘初始化’ </span></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="comment"># 查看state的初始化值</span></span><br><span class="line">    print(sess.run(state))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)  <span class="comment"># 这样子每一次运行state 都还是1</span></span><br><span class="line">        print(sess.run(state))</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="3-2-用-tf-来实现对一组数求和，再计算平均"><a href="#3-2-用-tf-来实现对一组数求和，再计算平均" class="headerlink" title="3.2 用 tf 来实现对一组数求和，再计算平均"></a>3.2 用 tf 来实现对一组数求和，再计算平均</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">h_sum = tf.Variable(<span class="number">0.0</span>, dtype=tf.float32)</span><br><span class="line"><span class="comment"># h_vec = tf.random_normal(shape=([10]))</span></span><br><span class="line">h_vec = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>])</span><br><span class="line"><span class="comment"># 把 h_vec 的每个元素加到 h_sum 中，然后再除以 10 来计算平均值</span></span><br><span class="line"><span class="comment"># 待添加的数</span></span><br><span class="line">h_add = tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment"># 添加之后的值</span></span><br><span class="line">h_new = tf.add(h_sum, h_add)</span><br><span class="line"><span class="comment"># 更新 h_new 的 op</span></span><br><span class="line">update = tf.assign(h_sum, h_new)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="comment"># 查看原始值</span></span><br><span class="line">    print(<span class="string">'s_sum ='</span>, sess.run(h_sum))</span><br><span class="line">    print(<span class="string">"vec = "</span>, sess.run(h_vec))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环添加</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        sess.run(update, feed_dict=&#123;h_add: sess.run(h_vec[_])&#125;)</span><br><span class="line">        print(<span class="string">'h_sum ='</span>, sess.run(h_sum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#     print 'the mean is ', sess.run(sess.run(h_sum) / 4)  # 这样写 4  是错误的， 必须转为 tf 变量或者常量</span></span><br><span class="line">    print(<span class="string">'the mean is '</span>, sess.run(sess.run(h_sum) / tf.constant(<span class="number">4.0</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="3-3-只用一个变量来实现计数器"><a href="#3-3-只用一个变量来实现计数器" class="headerlink" title="3.3 只用一个变量来实现计数器"></a>3.3 只用一个变量来实现计数器</h3><p>上面的计数器是 TensorFlow 官方文档的例子，但是觉得好臃肿，所以下面这个是更加简单的，只需要定义一个变量和一个 加 1 的操作（op）。通过for循环就能够实现了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不是 assign() 重新赋值的话，每一次 sess.run()都会把 state再次初始化为 0.0</span></span><br><span class="line">state = tf.Variable(<span class="number">0.0</span>, tf.float32)</span><br><span class="line"><span class="comment"># 通过 assign 操作来改变state的值。</span></span><br><span class="line">add_op = tf.assign(state, state+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="keyword">print</span> <span class="string">'init state '</span>, sess.run(state)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">    sess.run(add_op)</span><br><span class="line">    print(sess.run(state))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init state  0.0</span><br><span class="line">1.0</span><br><span class="line">2.0</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样子和我们平时实现计数器的方法基本上就一致了。我们要重点理解的是， TensorFlow 中通过 tf.assign(ref, value) 的方式来把 value 值赋给 ref 变量。这样子，每一次循环的时候，ref 变量才不会再做定义时候的初始化操作。</p>
</blockquote>
<h2 id="4-InteractiveSession-的用法"><a href="#4-InteractiveSession-的用法" class="headerlink" title="4. InteractiveSession() 的用法"></a>4. InteractiveSession() 的用法</h2><p>InteractiveSession() 主要是避免 Session（会话）被一个变量持有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">c = a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的两种情况是等价的</span></span><br><span class="line"><span class="keyword">with</span> tf.Session():  <span class="comment"># 不用 close()</span></span><br><span class="line">    print(c.eval())</span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">print(c.eval())</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.0</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure>
<h3 id="4-1-InteractiveSession-、eval、init"><a href="#4-1-InteractiveSession-、eval、init" class="headerlink" title="4.1 InteractiveSession()、eval、init"></a>4.1 InteractiveSession()、eval、init</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">c = tf.Variable(<span class="number">3.0</span>)</span><br><span class="line">d = a + b</span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment"># 这样写是错误的</span></span><br><span class="line"><span class="comment"># print(a.run())</span></span><br><span class="line"><span class="comment"># print(d.run())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样才是正确的</span></span><br><span class="line">print(a.eval())</span><br><span class="line">print(d.eval())</span><br><span class="line"></span><br><span class="line"><span class="comment"># run() 方法主要用来</span></span><br><span class="line">x = tf.Variable(<span class="number">1.2</span>)</span><br><span class="line"><span class="comment"># print(x.eval())  # 还没初始化，不能用</span></span><br><span class="line">x.initializer.run()  <span class="comment"># x.initializer 就是一个初始化的 op， op 才调用run() 方法</span></span><br><span class="line">print(x.eval())</span><br><span class="line"></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.0</span><br><span class="line">3.0</span><br><span class="line">1.2</span><br></pre></td></tr></table></figure>
<h3 id="4-2-使用-tf-InteractiveSession-来完成上面-求和、平均-的操作呢"><a href="#4-2-使用-tf-InteractiveSession-来完成上面-求和、平均-的操作呢" class="headerlink" title="4.2 使用 tf.InteractiveSession() 来完成上面 求和、平均 的操作呢?"></a>4.2 使用 tf.InteractiveSession() 来完成上面 求和、平均 的操作呢?</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h_sum = tf.Variable(<span class="number">0.0</span>, dtype=tf.float32)</span><br><span class="line"><span class="comment"># h_vec = tf.random_normal(shape=([10]))</span></span><br><span class="line">h_vec = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>])</span><br><span class="line"><span class="comment"># 把 h_vec 的每个元素加到 h_sum 中，然后再除以 10 来计算平均值</span></span><br><span class="line"><span class="comment"># 待添加的数</span></span><br><span class="line">h_add = tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment"># 添加之后的值</span></span><br><span class="line">h_new = tf.add(h_sum, h_add)</span><br><span class="line"><span class="comment"># 更新 h_new 的 op</span></span><br><span class="line">update = tf.assign(h_sum, h_new)</span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'s_sum ='</span>, h_sum.eval())</span><br><span class="line">print(<span class="string">"vec = "</span>, h_vec.eval())</span><br><span class="line">print(<span class="string">"vec = "</span>, h_vec[<span class="number">0</span>].eval())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    update.eval(feed_dict=&#123;h_add: h_vec[_].eval()&#125;)</span><br><span class="line">    print(<span class="string">'h_sum ='</span>, h_sum.eval())</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">s_sum = 0.0</span><br><span class="line">vec =  [ 1.  2.  3.  4.]</span><br><span class="line">vec =  1.0</span><br><span class="line">h_sum = 1.0</span><br><span class="line">h_sum = 3.0</span><br><span class="line">h_sum = 6.0</span><br><span class="line">h_sum = 10.0</span><br></pre></td></tr></table></figure>
<h3 id="4-3-使用-feed-来对变量赋值"><a href="#4-3-使用-feed-来对变量赋值" class="headerlink" title="4.3 使用 feed 来对变量赋值"></a>4.3 使用 feed 来对变量赋值</h3><p>这些需要用到 feed 来赋值的操作可以通过 tf.placeholder() 说明，以创建占位符。</p>
<p>下面的例子中可以看出 session.run([output], …) 和 session.run(output, …) 的区别。前者输出了 output 的类型等详细信息，后者只输出简单结果。</p>
<p><strong>🌰🌰1：feed</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line">output = tf.multiply(input1, input2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run([output], feed_dict=&#123;input1:[<span class="number">7.0</span>], input2:[<span class="number">2.0</span>]&#125;))</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[array([ 14.], dtype=<span class="built_in">float</span>32)]</span><br></pre></td></tr></table></figure>
<p><strong>🌰🌰2： input1:[7.0], input2:[2.0]</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(output, feed_dict=&#123;input1:[<span class="number">7.0</span>], input2:[<span class="number">2.0</span>]&#125;)</span><br><span class="line">    print(type(result))</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">[ 14.]</span><br></pre></td></tr></table></figure>
<p><strong>🌰🌰3： input1:7.0, input2:2.0</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(output, feed_dict=&#123;input1:<span class="number">7.0</span>, input2:<span class="number">2.0</span>&#125;)</span><br><span class="line">    print(type(result))</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type &apos;numpy.float32&apos;&gt;</span><br><span class="line">14.0</span><br></pre></td></tr></table></figure>
<p><strong>🌰🌰4： [output], output</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run([output], feed_dict=&#123;input1:[<span class="number">7.0</span>, <span class="number">3.0</span>], input2:[<span class="number">2.0</span>, <span class="number">1.0</span>]&#125;))</span><br><span class="line">    print()</span><br><span class="line">    print(sess.run(output, feed_dict=&#123;input1:[<span class="number">7.0</span>, <span class="number">3.0</span>], input2:[<span class="number">2.0</span>, <span class="number">1.0</span>]&#125;))</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[array([ 14.,   3.], dtype=float32)]</span><br><span class="line"></span><br><span class="line">[ 14.   3.]</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://blog.csdn.net/jerr__y/article/details/57084008" target="_blank" rel="external">TensorFlow入门（一）基本用法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activation Function 激励函数]]></title>
      <url>http://iequa.com/2017/09/07/tensorflow/tf-2.6-B-activation-function/</url>
      <content type="html"><![CDATA[<p>Tensorflow 提供的一些 Activation Function <a href="https://www.tensorflow.org/api_guides/python/nn" target="_blank" rel="external">tensorflow/api_guides/python/nn</a></p>
<a id="more"></a>
<p>激励函数运行时激活神经网络中某一部分神经元，将激活信息向后传入下一层的神经系统。</p>
<p>激励函数的实质是非线性方程。 Tensorflow 的神经网络 里面处理较为复杂的问题时都会需要运用 activation function 。 </p>
<p>下面是一个 TensorFlow 搭建的 简单版神经网络 数据流图 :</p>
<p><img src="/images/tensorflow/tf-2.6-active6_1.png" width="550"></p>
<p>Layer2 展开部分，Layer1 出来的数据，再输入到 Layer2 中</p>
<p><img src="/images/tensorflow/tf-2.6-active7.jpg" width="550"></p>
<blockquote>
<p>详细介绍请前往 <a href="/2018/09/07/tensorflow-2-6-A-activation-function/">What’s Activation Function</a></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://www.tensorflow.org/api_guides/python/nn" target="_blank" rel="external">Tensorflow 提供的一些 激励函数</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What's Activation Function]]></title>
      <url>http://iequa.com/2017/09/07/tensorflow/tf-2.6-A-activation-function/</url>
      <content type="html"><![CDATA[<p>现代神经网络中 必不可少的一个组成部分, 激励函数, activation function.</p>
<a id="more"></a>
<p>本文大部分内容转载自 <a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python /Tensorflow-Tutorial</a></p>
<h2 id="非线性方程"><a href="#非线性方程" class="headerlink" title="非线性方程"></a>非线性方程</h2><p>我们为什么要使用激励函数? 用简单的语句来概括. 就是因为, <span style="TEXT-DECORATION: underline"><strong>现实并没有我们想象的那么美好</strong></span>。激励函数也就是为了解决我们日常生活中 <strong>不能用线性方程所概括的问题</strong>. </p>
<p><img src="/images/tensorflow/tf-2.6-active1.png" alt="Linear function and Nonlinear function"></p>
<p>说到线性方程, 我们不得不提到另外一种方程, 非线性方程 (nonlinear function). 我们假设, 女生长得越漂亮, 越多男生爱. 这就可以被当做一个线性问题. 但是如果我们假设这个场景是发生在校园里. 校园里的男生数是有限的, 女生再漂亮, 也不可能会有无穷多的男生喜欢她. 所以这就变成了一个非线性问题.再说..女生也不可能是无穷漂亮的. 这个问题我们以后有时间私下讨论.</p>
<p><img src="/images/tensorflow/tf-2.6-active2.png" alt="Linear function -&gt; Activation Function"></p>
<p>然后我们就可以来讨论如何在神经网络中达成描述非线性的任务了. 我们可以把整个网络简化成这样一个式子. $Y = WX$, $W$ 就是我们要求的参数, $y$ 是预测值, $x$ 是输入值. 用这个式子, 我们很容易就能描述刚刚的那个线性问题, 因为 $W$ 求出来可以是一个固定的数. 不过这似乎并不能让这条直线变得扭起来 , 激励函数见状, 拔刀相助, 站出来说道: “让我来掰弯它!”.</p>
<h2 id="激励函数"><a href="#激励函数" class="headerlink" title="激励函数"></a>激励函数</h2><p><img src="/images/tensorflow/tf-2.6-active3.png" alt="Activation Function"></p>
<blockquote>
<p>这里的 AF 就是指激励函数. 激励函数拿出自己最擅长的”掰弯利器”, 套在原函数上用力一扭, 原来的 $WX$ 结果就被扭弯了.</p>
<p>其实这个 AF, 掰弯利器, 也不是什么触不可及的东西. 它其实就是另外一个非线性函数. 比如说<code>relu, sigmoid, tanh</code>. 将这些掰弯利器嵌套在原有的结果之上, 强行把原有的线性结果给扭曲了. 使得输出结果 $y$ 也有了非线性的特征. 举个例子, 比如我使用了 <code>relu</code> 这个掰弯利器, 如果此时 $Wx$ 的结果是 1, $y$ 还将是 1, 不过 $WX$ 为 -1 的时候, $y$ 不再是 -1, 而会是 0.</p>
</blockquote>
<p><img src="/images/tensorflow/tf-2.6-active5.jpg" width="550"></p>
<blockquote>
<p>你甚至可以创造自己的激励函数来处理自己的问题, 不过要确保的是这些激励函数必须是可以微分的, 因为在 backpropagation 误差反向传递的时候, 只有这些可微分的激励函数才能把误差传递回去.</p>
</blockquote>
<h2 id="常用选择"><a href="#常用选择" class="headerlink" title="常用选择"></a>常用选择</h2><p><img src="/images/tensorflow/tf-2.6-active4.png" alt="Activation Function"></p>
<p>想要恰当使用这些激励函数, 还是有窍门的. 比如当你的神经网络层只有两三层, 不是很多的时候, 对于隐藏层, 使用任意的激励函数, 随便掰弯是可以的, 不会有特别大的影响. 不过, 当你使用特别多层的神经网络, 在掰弯的时候, 玩玩不得随意选择利器. 因为这会涉及到梯度爆炸, 梯度消失的问题. 因为时间的关系, 我们可能会在以后来具体谈谈这个问题.</p>
<p>最后我们说说, 在具体的例子中, 我们默认首选的激励函数是哪些. 在少量层结构中, 我们可以尝试很多种不同的激励函数. 在卷积神经网络 Convolutional neural networks 的卷积层中, 推荐的激励函数是 <code>relu</code>. 在循环神经网络中 Recurrent neural networks, 推荐的是 <code>tanh</code> 或者是 <code>relu</code> (这个具体怎么选, 我会在以后 循环神经网络 的介绍中在详细讲解).</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial" target="_blank" rel="external">Tensorflow 提供的一些 激励函数</a></li>
</ul>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Placeholder 传入值]]></title>
      <url>http://iequa.com/2017/08/30/tensorflow/tf-2.5-placeholde/</url>
      <content type="html"><![CDATA[<p>placeholder 是 Tensorflow 中的占位符，暂时储存变量.</p>
<a id="more"></a>
<p>Tensorflow 如果想要从外部传入data, 那就需要用到 <code>tf.placeholder()</code>, 然后以这种形式传输数据 <code>sess.run(**, feed_dict={input: **})</code>.</p>
<p>举个🌰:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在 Tensorflow 中需要定义 placeholder 的 type ，一般为 float32 形式</span></span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mul = multiply 是将input1和input2 做乘法运算，并输出为 output </span></span><br><span class="line">ouput = tf.multiply(input1, input2)</span><br></pre></td></tr></table></figure>
<p>接下来, 传值的工作交给了 <code>sess.run()</code> , 需要传入的值放在了 <code>feed_dict={}</code> 并一一对应每一个 <code>input</code>. <code>placeholder</code> 与 <code>feed_dict={}</code> 是绑定在一起出现的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(ouput, feed_dict=&#123;input1: [<span class="number">7.</span>], input2: [<span class="number">2.</span>]&#125;))</span><br><span class="line"><span class="comment"># [ 14.]</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Variable 变量]]></title>
      <url>http://iequa.com/2017/08/29/tensorflow/tf-2.4-variable/</url>
      <content type="html"><![CDATA[<p>在 Tensorflow 中使用 Variable。 在 Tensorflow 中，定义了某字符串是变量，它才是变量，这一点是与 Python 所不同的。</p>
<a id="more"></a>
<p>定义语法： <code>state = tf.Variable()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">'counter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量 one</span></span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义加法步骤 (注: 此步并没有直接计算)</span></span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 State 更新成 new_value</span></span><br><span class="line">update = tf.assign(state, new_value)</span><br></pre></td></tr></table></figure>
<p>如果你在 Tensorflow 中设定了变量，那么初始化变量是最重要的！！所以定义了变量以后, 一定要定义 <code>init = tf.initialize_all_variables()</code>.</p>
<p>到这里变量还是没有被激活，需要再在 <code>sess</code> 里, <code>sess.run(init)</code> , 激活 <code>init</code> 这一步.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果定义 Variable, 就一定要 initialize</span></span><br><span class="line"><span class="comment"># init = tf.initialize_all_variables() # tf 马上就要废弃这种写法</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 Session</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(sess.run(new_value))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update) <span class="comment"># 相当于运行了一遍 tf.assign(state, new_value+100)， 因为这是 update</span></span><br><span class="line">        print(sess.run(state))</span><br><span class="line">    print(<span class="string">"Sess Hello !"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：直接 print(state) 不起作用！！</p>
<p>一定要把 <code>sess</code> 的指针指向 <code>state</code> 再进行 <code>print</code> 才能得到想要的结果！</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial" target="_blank" rel="external">新版可视化教学代码</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Session 会话控制]]></title>
      <url>http://iequa.com/2017/08/28/tensorflow/tf-2.3-session/</url>
      <content type="html"><![CDATA[<p>Session 是 Tensorflow 为了控制,和输出文件的执行语句. 运行 session.run() 可以获得你要得知的运算结果.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>], name=<span class="string">"a"</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>], name=<span class="string">"b"</span>) <span class="comment"># a, b 定义为 2 个常量 向量</span></span><br><span class="line"></span><br><span class="line">result = a + b</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">sess.run(result) <span class="comment"># array([ 3.,  5.], dtype=float32)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>要输出相加得到的结果，不能简单地直接输出 result，而需要先生成一个 Session，并通过这个 Session 来计算结果。</p>
</blockquote>
<p>🌰🌰🌰</p>
<p>  这次需要加载 Tensorflow ，然后建立两个 <code>matrix</code> , 输出两个 <code>matrix</code> 矩阵相乘的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># create two matrixes</span></span><br><span class="line"></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">matrix2 = tf.constant([[<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">2</span>]])</span><br><span class="line">product = tf.matmul(matrix1,matrix2)</span><br></pre></td></tr></table></figure>
<p>我们会要使用 <code>Session</code> 来激活 <code>product</code> 并得到计算结果. 有两种形式使用会话控制 <code>Session</code> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">result = sess.run(product)</span><br><span class="line">print(result) <span class="comment"># [[12]]</span></span><br><span class="line">sess.close()</span><br><span class="line"><span class="comment"># [[12]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result2 = sess.run(product)</span><br><span class="line">    print(result2)</span><br><span class="line"><span class="comment"># [[12]]</span></span><br></pre></td></tr></table></figure>
<p>以上就是我们今天所学的两种 <code>Session</code> 打开模式。</p>
<p>让我们学习下一节 — Tensorflow 中的 Variable。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
<li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial" target="_blank" rel="external">新版可视化教学代码</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 入门例子]]></title>
      <url>http://iequa.com/2017/08/27/tensorflow/tf-2.2-example/</url>
      <content type="html"><![CDATA[<p>Tensorflow 是非常重视结构的, 我们建立好了神经网络的结构, 才能将数字放进去, 运行这个结构.</p>
<a id="more"></a>
<p>这个例子简单的阐述了 tensorflow 当中如何用代码来运行我们搭建的结构.</p>
<h2 id="1-创建数据"><a href="#1-创建数据" class="headerlink" title="1. 创建数据"></a>1. 创建数据</h2><p>首先, 我们这次需要加载 tensorflow 和 numpy 两个模块, 并且使用 numpy 来创建我们的数据.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># create data</span></span><br><span class="line">x_data = np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">y_data = x_data*<span class="number">0.1</span> + <span class="number">0.3</span></span><br></pre></td></tr></table></figure>
<p>接着, 我们用 <code>tf.Variable</code> 来创建描述 <code>y</code> 的参数. 我们可以把 <code>y_data = x_data*0.1 + 0.3</code> 想象成 <code>y=Weights * x + biases</code>, 然后神经网络也就是学着把 Weights 变成 0.1, biases 变成 0.3.</p>
<h2 id="2-搭建模型"><a href="#2-搭建模型" class="headerlink" title="2. 搭建模型"></a>2. 搭建模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Weights = tf.Variable(tf.random_uniform([<span class="number">1</span>], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">biases = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">y = Weights*x_data + biases</span><br></pre></td></tr></table></figure>
<h2 id="3-计算误差"><a href="#3-计算误差" class="headerlink" title="3. 计算误差"></a>3. 计算误差</h2><p>接着就是计算 <code>y</code> 和 <code>y_data</code> 的误差:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.square(y-y_data))</span><br></pre></td></tr></table></figure>
<h2 id="4-传播误差"><a href="#4-传播误差" class="headerlink" title="4. 传播误差"></a>4. 传播误差</h2><p>反向传递误差的工作就教给 <code>optimizer</code> 了, 我们使用的误差传递方法是梯度下降法: Gradient Descent </p>
<p>然后我们使用 <code>optimizer</code> 来进行参数的更新.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br></pre></td></tr></table></figure>
<h2 id="5-训练"><a href="#5-训练" class="headerlink" title="5. 训练"></a>5. 训练</h2><p>到目前为止, 我们只是建立了神经网络的结构, 还没有使用这个结构. </p>
<p>在使用这个结构之前, 我们必须先初始化所有之前定义的 <code>Variable</code>,  所以这一步是很重要的!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br></pre></td></tr></table></figure>
<p>接着,我们再创建会话 <code>Session</code>. 我们会在下一节中详细讲解 Session. 我们用 <code>Session</code> 来执行 <code>init</code> 初始化步骤. 并且, 用 <code>Session</code> 来 <code>run</code> 每一次 training 的数据. 逐步提升神经网络的预测准确性.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)          <span class="comment"># Very important</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(step, sess.run(Weights), sess.run(biases))</span><br></pre></td></tr></table></figure>
<h2 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/" target="_blank" rel="external">莫烦Python</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow 处理结构]]></title>
      <url>http://iequa.com/2017/08/25/tensorflow/tf-2.1-structure/</url>
      <content type="html"><![CDATA[<p>Tensorflow 首先要定义神经网络的结构, 然后再把数据放入结构当中去运算 和 training.</p>
<a id="more"></a>
<h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p><img src="/images/tensorflow/tf-1-why.gif" width="400"></p>
<p>因为 TensorFlow 是采用数据流图（<strong>data　flow　graphs</strong>）来计算, 所以首先我们得创建一个<strong>数据流图</strong>, 然后再将我们的数据（数据以张量(<strong>tensor</strong>)的形式存在）放在数据流图中计算. </p>
<blockquote>
<ul>
<li>Nodes 在图中表示数学操作</li>
<li>Edges 在图中则表示在节点间相互联系的多维数据数组，即张量（tensor）</li>
</ul>
</blockquote>
<p>训练模型时 <strong>tensor</strong> 会不断的从数据流图中的一个节点 <strong>flow</strong> 到另一节点, 这就是 TensorFlow 名字的由来.</p>
<h2 id="Tensor-张量意义"><a href="#Tensor-张量意义" class="headerlink" title="Tensor 张量意义"></a>Tensor 张量意义</h2><p><strong>张量（Tensor)</strong>: 张量有多种. </p>
<ul>
<li>零阶张量为 纯量或标量 (scalar) 也就是一个数值. 比如 <code>[1]</code></li>
<li>一阶张量为 向量 (vector), 比如 一维的 <code>[1, 2, 3]</code></li>
<li>二阶张量为 矩阵 (matrix), 比如 二维的 <code>[[1, 2, 3],[4, 5, 6],[7, 8, 9]]</code></li>
</ul>
<blockquote>
<p>以此类推, 还有 三阶 三维的 …</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow Why?]]></title>
      <url>http://iequa.com/2017/08/22/tensorflow/tf-1.1-why/</url>
      <content type="html"><![CDATA[<p>2015.10 开源的 TensorFlow 是由 Google brain 的工程师开发出来，用于机器学习和神经网络方面的研究</p>
<a id="more"></a>
<p>TensorFlow 是一款神经网络的 Python 外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库.</p>
<p><img src="/images/tensorflow/tf-1-why.gif" alt="TensorFlow 节点表示某种抽象的计算，边表示节点之间相互联系的张量"></p>
<h2 id="TensorFlow-Why"><a href="#TensorFlow-Why" class="headerlink" title="TensorFlow Why"></a>TensorFlow Why</h2><p>TensorFlow 擅长的任务就是训练深度神经网络. 使用它我们就可以大大降低深度学习的开发成本和开发难度;</p>
<p>TensorFlow 在众多深度学习框架中脱颖而出，在Github上获得了最多的Star量;</p>
<p>TensorFlow 支持各种异构的平台，支持多CPU/GPU，服务器，移动设备，具有良好的跨平台的特性;</p>
<p>TensorFlow 架构灵活，能够支持各种网络模型，具有良好的通用性;</p>
<p>TensorFlow 架构具有良好的可扩展性，对OP的扩展支持，Kernel特化方面表现出众.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow.org</a></li>
<li><a href="https://www.tensorflow.org/get_started/" target="_blank" rel="external">tensorflow.org get_started</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Basic Learning III (not finish)]]></title>
      <url>http://iequa.com/2017/06/05/python/py-language-basic-learning-III/</url>
      <content type="html"><![CDATA[<h2 id="1-函数式编程"><a href="#1-函数式编程" class="headerlink" title="1. 函数式编程"></a>1. 函数式编程</h2><p>函数就是面向过程的程序设计的基本单元。</p>
<p>Functional Programming 其思想更接近数学计算。</p>
<p>在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。</p>
<p>而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。</p>
<p>对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如C语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如Lisp语言。</p>
<p>函数式编程就是一种抽象程度很高的编程范式，<code>纯粹的函数式编程语言编写的函数没有变量</code>，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p>
<p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p>
<p>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</p>
<h3 id="1-1-高阶函数"><a href="#1-1-高阶函数" class="headerlink" title="1.1 高阶函数"></a>1.1 高阶函数</h3><p>Higher-order function</p>
<h2 id="2-模块"><a href="#2-模块" class="headerlink" title="2. 模块"></a>2. 模块</h2><blockquote>
<p>Python内置的模块 和 来自第三方的模块。</p>
<p>每一个包目录下面都会有一个<strong>init</strong>.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。</p>
</blockquote>
<h2 id="Reference-article"><a href="#Reference-article" class="headerlink" title="Reference article"></a>Reference article</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">廖雪峰的官方网站 liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Class]]></title>
      <url>http://iequa.com/2017/06/05/python/py-language-8-class/</url>
      <content type="html"><![CDATA[<p>OO 最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类</p>
<a id="more"></a>
<h2 id="Class-def"><a href="#Class-def" class="headerlink" title="Class def"></a>Class def</h2><p>class 定义一个类,首字母大写，比如 Calculator. class可以先定义自己的属性，比如 name=’Good Calculator’. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span>       <span class="comment">#首字母要大写，冒号不能缺</span></span><br><span class="line">    </span><br><span class="line">    name=<span class="string">'Good Calculator'</span>  <span class="comment">#该行为class的属性</span></span><br><span class="line">    price=<span class="number">18</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        result = x + y</span><br><span class="line">        print(result)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        result=x-y</span><br><span class="line">        print(result)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">times</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        print(x*y)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        print(x/y)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cal=Calculator()</span><br><span class="line"></span><br><span class="line">print(cal.name)</span><br><span class="line">print(cal.price)</span><br></pre></td></tr></table></figure>
<pre><code>Good Calculator
18
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cal.add(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">cal.minus(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">cal.times(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">cal.divide(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Good Calculator
30
-10
200
0.5
</code></pre><h2 id="Class-init"><a href="#Class-init" class="headerlink" title="Class init"></a>Class init</h2><p>运行 <code>c=Calculator(&#39;bad calculator&#39;,18,17,16,15)</code>, 然后调出每个初始值的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span></span><br><span class="line">    name=<span class="string">'good calculator'</span></span><br><span class="line">    price=<span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,price,height,width,weight)</span>:</span>   <span class="comment"># 注意，这里的下划线是双下划线</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.h=height</span><br><span class="line">        self.wi=width</span><br><span class="line">        self.we=weight</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=Calculator(<span class="string">'bad calculator'</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">15</span>)</span><br><span class="line">print(c.name)</span><br><span class="line">print(c.price)</span><br><span class="line">print(c.h)</span><br><span class="line">print(c.wi)</span><br><span class="line">print(c.we)</span><br></pre></td></tr></table></figure>
<pre><code>bad calculator
18
17
16
15
</code></pre><h3 id="设置class属性默认值"><a href="#设置class属性默认值" class="headerlink" title="设置class属性默认值"></a>设置class属性默认值</h3><p>如何设置属性的默认值, 直接在def里输入即可，如下:</p>
<p><code>def __init__(self,name,price,height=10,width=14,weight=16):</code></p>
<p>查看运行结果， 三个有默认值的属性，可以直接输出默认值.</p>
<p>这些默认值可以在code中更改, 比如<code>c.wi=17</code>再输出<code>c.wi</code>就会把<code>wi</code>属性值更改为<code>17</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span></span><br><span class="line">    name=<span class="string">'good calculator'</span></span><br><span class="line">    price=<span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,price,hight=<span class="number">10</span>,width=<span class="number">14</span>,weight=<span class="number">16</span>)</span>:</span> <span class="comment">#后面三个属性设置默认值,查看运行</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.h=hight</span><br><span class="line">        self.wi=width</span><br><span class="line">        self.we=weight</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=Calculator(<span class="string">'bad calculator'</span>,<span class="number">18</span>)</span><br><span class="line">print(c.h)</span><br><span class="line">print(<span class="string">"wi : "</span> + str(c.wi))</span><br><span class="line">c.wi = <span class="number">17</span></span><br><span class="line">print(<span class="string">"wi : "</span> + str(c.wi))</span><br><span class="line">print(c.we)</span><br></pre></td></tr></table></figure>
<pre><code>10
wi : 14
wi : 17
16
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Read File]]></title>
      <url>http://iequa.com/2017/06/04/python/py-language-6-read-file/</url>
      <content type="html"><![CDATA[<p>open()、append、file.read()、file.readline()、file.readlines()、file.close()、with open .. as f</p>
<p>读写文件前，必须了解，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个<code>文件对象</code>（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）</p>
<a id="more"></a>
<h2 id="1-open"><a href="#1-open" class="headerlink" title="1. open"></a>1. open</h2><p>使用 <code>open</code> 能够打开一个文件, <code>open</code> 的第一个参数为文件名和路径 ‘my file.txt’, 第二个参数为将要以什么方式打开它, 比如 <code>w</code> 为可写方式. 如果计算机没有找到 ‘my file.txt’ 这个文件, <code>w</code> 方式能够创建一个新的文件, 并命名为 <code>my file.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">'This is my first test.'</span></span><br><span class="line"></span><br><span class="line">my_file=open(<span class="string">'my file.txt'</span>,<span class="string">'w'</span>)   <span class="comment">#用法: open('文件名','形式'), 其中形式有'w':write;'r':read.</span></span><br><span class="line">my_file.write(text)               <span class="comment">#该语句会写入先前定义好的 text</span></span><br><span class="line">my_file.close()                   <span class="comment">#关闭文件</span></span><br></pre></td></tr></table></figure>
<h2 id="2-append"><a href="#2-append" class="headerlink" title="2. append"></a>2. append</h2><p>我们先保存一个已经有3行文字的 “my file.txt” 文件, 文件的内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is my first test. </span><br><span class="line">This is the second line.</span><br><span class="line">This the third</span><br></pre></td></tr></table></figure>
<p>使用添加文字的方式给这个文件添加一行 “This is appended file.”, 并将这行文字储存在 append_file 里，注意\n的适用性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">append_text=<span class="string">'\nThis is appended file.'</span>  <span class="comment"># 为这行文字提前空行 "\n"</span></span><br><span class="line">my_file=open(<span class="string">'my file.txt'</span>,<span class="string">'a'</span>)   <span class="comment"># 'a'=append 以增加内容的形式打开</span></span><br><span class="line">my_file.write(append_text)</span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure>
<pre><code>This is my first test.
This is the second line.
This the third line.
This is appended file.
</code></pre><h2 id="3-file-read"><a href="#3-file-read" class="headerlink" title="3. file.read()"></a>3. file.read()</h2><p>调用 <code>read()</code> 会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取<code>size</code>个字节的内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file= open(<span class="string">'my file.txt'</span>,<span class="string">'r'</span>) </span><br><span class="line">content=file.read()  </span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<pre><code>This is my first test.
This is the second line.
This the third line.
This is appended file.    
</code></pre><h2 id="4-file-readline"><a href="#4-file-readline" class="headerlink" title="4. file.readline()"></a>4. file.readline()</h2><p>如果想在文本中一行行的读取文本, 可以使用 <code>file.readline()</code>, <code>file.readline()</code> 读取的内容和你使用的次数有关, 使用第二次的时候, 读取到的是文本的第二行, 并可以以此类推:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file= open(<span class="string">'my file.txt'</span>,<span class="string">'r'</span>) </span><br><span class="line">content=file.readline()  <span class="comment"># 读取第一行</span></span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<pre><code>This is my first test.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">second_read_time=file.readline()  <span class="comment"># 读取第二行</span></span><br><span class="line">print(second_read_time)</span><br></pre></td></tr></table></figure>
<pre><code>This is the second line.
</code></pre><h2 id="5-file-readlines"><a href="#5-file-readlines" class="headerlink" title="5. file.readlines()"></a>5. file.readlines()</h2><p>如果想要读取所有行, 并可以使用像 <code>for</code> 一样的迭代器迭代这些行结果, 我们可以使用 <code>file.readlines()</code>, 将每一行的结果存储在 <code>list</code> 中, 方便以后迭代.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file= open(<span class="string">'my file.txt'</span>,<span class="string">'r'</span>) </span><br><span class="line">content=file.readlines() <span class="comment"># python_list 形式</span></span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<pre><code>[&apos;This is my first test.\n&apos;, &apos;This is the second line.\n&apos;, &apos;This the third line.\n&apos;, &apos;This is appended file.&apos;]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 之后如果使用 for 来迭代输出:</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> content:</span><br><span class="line">    print(item)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    This <span class="keyword">is</span> my first test.</span><br><span class="line"></span><br><span class="line">    This <span class="keyword">is</span> the second line.</span><br><span class="line"></span><br><span class="line">    This the third line.</span><br><span class="line"></span><br><span class="line">    This <span class="keyword">is</span> appended file.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 6. file.close()</span></span><br><span class="line"></span><br><span class="line">由于文件读写时都有可能产生`IOError`，一旦出错，后面的`f.close()`就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用`<span class="keyword">try</span> ... <span class="keyword">finally</span>`来实现：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span> f.read()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每次都这么写实在太繁琐，所以，Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法：</p>
</blockquote>
<h2 id="7-with-open-as-f"><a href="#7-with-open-as-f" class="headerlink" title="7. with open .. as f"></a>7. with open .. as f</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">print</span> f.read()</span><br></pre></td></tr></table></figure>
<p>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/" target="_blank" rel="external">docs.python.org</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/python-basic/basic/08-2-read-file2/" target="_blank" rel="external">python morvanzhou</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820066616a77f826d876b46b9ac34cb5f34374f7a000" target="_blank" rel="external">python liaoxuefeng</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Slice、Iteration、List generation、Generator]]></title>
      <url>http://iequa.com/2017/06/03/python/py-language-10-advanced/</url>
      <content type="html"><![CDATA[<p>Slice、Iteration、List generation、Generator</p>
<a id="more"></a>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = []</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">99</span>:</span><br><span class="line">    L.append(n)</span><br><span class="line">    n = n + <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="1-Slice"><a href="#1-Slice" class="headerlink" title="1. Slice"></a>1. Slice</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</span><br><span class="line">[<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = range(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>字符串<code>&#39;xxx&#39;</code>或Unicode字符串<code>u&#39;xxx&#39;</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</span><br><span class="line"><span class="string">'ACEG'</span></span><br></pre></td></tr></table></figure>
<h2 id="2-Iteration"><a href="#2-Iteration" class="headerlink" title="2. Iteration"></a>2. Iteration</h2><p>只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">    n = list[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> key</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> ch</span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure>
<p>如何判断一个对象是可迭代对象呢？方法是通过<code>collections模块</code>的<code>Iterable</code>类型判断：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的<code>enumerate</code>函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> i, value</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure>
<p><code>for</code>循环里，同时引用了两个变量，在Python里是很常见</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> x, y</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="3-List-Generation"><a href="#3-List-Generation" class="headerlink" title="3. List Generation"></a>3. List Generation</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>
<p>还可以使用两层循环，可以生成全排列：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</span><br></pre></td></tr></table></figure>
<p>运用列表生成式，可以写出非常简洁的代码。</p>
<p>例如，列出当前目录下的所有文件和目录名</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os <span class="comment"># 导入os模块，模块的概念后面讲到</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)] <span class="comment"># os.listdir可以列出文件和目录</span></span><br><span class="line">[<span class="string">'.emacs.d'</span>, <span class="string">'.ssh'</span>, <span class="string">'.Trash'</span>, <span class="string">'Adlm'</span>, <span class="string">'Applications'</span>, <span class="string">'Desktop'</span>, <span class="string">'Documents'</span>, <span class="string">'Downloads'</span>, <span class="string">'Library'</span>, <span class="string">'Movies'</span>, <span class="string">'Music'</span>, <span class="string">'Pictures'</span>, <span class="string">'Public'</span>, <span class="string">'VirtualBox VMs'</span>, <span class="string">'Workspace'</span>, <span class="string">'XCode'</span>]</span><br></pre></td></tr></table></figure>
<p>for循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>iteritems()</code>可以同时迭代key和value：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> k, <span class="string">'='</span>, v</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">y = B</span><br><span class="line">x = A</span><br><span class="line">z = C</span><br></pre></td></tr></table></figure>
<p>列表生成式也可以使用两个变量来生成list：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems()]</span><br><span class="line">[<span class="string">'y=B'</span>, <span class="string">'x=A'</span>, <span class="string">'z=C'</span>]</span><br></pre></td></tr></table></figure>
<p>最后把一个list中所有的字符串变成小写：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'ibm'</span>, <span class="string">'apple'</span>]</span><br></pre></td></tr></table></figure>
<p><strong>小结</strong></p>
<p>运用列表生成式，可以快速生成list，可以通过一个list推导出另一个list，而代码却十分简洁。</p>
<h2 id="4-Generator"><a href="#4-Generator" class="headerlink" title="4. Generator"></a>4. Generator</h2><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（<code>Generator</code>）</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x104feab40</span>&gt;</span><br></pre></td></tr></table></figure>
<p>generator 是一个可迭代的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> n</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>斐波拉契数列</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">print</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p>
<p>把<code>fib</code>函数变成<code>generator</code>，只需要把 <code>print b</code> 改为 <code>yield b</code> 就可以了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果一个函数定义中包含 <code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</span><br><span class="line">&lt;generator object fib at <span class="number">0x104feaaa0</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成<code>generator</code>的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code> 语句处继续执行。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step 1'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step 2'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step 3'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p><strong>小结</strong></p>
<p>generator是非常强大的工具，在Python中，可以简单地把列表生成式改成generator，也可以通过函数实现复杂逻辑的generator。</p>
<p>要理解generator的工作原理，它是在for循环的过程中不断计算出下一个元素，并在适当的条件结束<code>for</code>循环。对于函数改成的generator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，<code>for</code>循环随之结束。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196169906eb9ca5864384546bf3405ae6a172b3e000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python def函数、函数参数、函数默认参数]]></title>
      <url>http://iequa.com/2017/06/03/python/py-language-5-function/</url>
      <content type="html"><![CDATA[<p>定义函数、内置函数、函数参数、函数默认参数</p>
<a id="more"></a>
<h2 id="1-内置函数"><a href="#1-内置函数" class="headerlink" title="1. 内置函数"></a>1. 内置函数</h2><p>内置函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-12.34</span>)</span><br><span class="line"><span class="number">12.34</span></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/2/library/functions.html#abs" target="_blank" rel="external">abs api</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>数据类型转换</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">'1.23'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode(<span class="number">100</span>)</span><br><span class="line"><span class="string">u'100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="2-def函数"><a href="#2-def函数" class="headerlink" title="2. def函数"></a>2. def函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>return None</code> 可以简写为 <code>return</code>。</p>
</blockquote>
<h3 id="2-1-空函数"><a href="#2-1-空函数" class="headerlink" title="2.1 空函数"></a>2.1 空函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-函数参数类型检查"><a href="#2-2-函数参数类型检查" class="headerlink" title="2.2 函数参数类型检查"></a>2.2 函数参数类型检查</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>
<h3 id="2-3-返回多个值-是一个tuple"><a href="#2-3-返回多个值-是一个tuple" class="headerlink" title="2.3 返回多个值 (是一个tuple)"></a>2.3 返回多个值 (是一个tuple)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> x, y</span><br><span class="line"><span class="number">151.961524227</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure>
<h2 id="3-函数参数"><a href="#3-函数参数" class="headerlink" title="3. 函数参数"></a>3. 函数参数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一是必选参数在前，默认参数在后，否则Python的解释器会报错</p>
<p>二是如何设置默认参数。</p>
<p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p>
<p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p>
<p>定义默认参数要牢记一点：<code>默认参数必须指向不变对象！</code></p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p>
</blockquote>
<p><strong>可变参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br><span class="line"><span class="number">84</span></span><br></pre></td></tr></table></figure>
<p>如果利用可变参数，调用函数的方式可以简化成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>
<p>定义可变参数和定义list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>这种写法相当有用，而且很常见，见如下 :</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>
<p><strong>关键字参数</strong></p>
<p><code>可变参数</code>允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</p>
<p><code>关键字参数</code>允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p>
<p>请看示例：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw</span><br></pre></td></tr></table></figure>
<p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数; 也可以传入任意个数的关键字参数;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **kw)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>参数组合</strong></p>
<p>在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw</span><br></pre></td></tr></table></figure>
<p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>神奇的是通过一个tuple和dict，你也可以调用该函数：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>
<p><strong>小结</strong></p>
<p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p>
<p>默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！</p>
<p>要注意定义可变参数和关键字参数的语法：</p>
<p><code>*args</code>是可变参数，args接收的是一个tuple；</p>
<p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p>
<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>
<p>可变参数既可直接传入：<code>func(1, 2, 3)</code>，又可先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p>
<p>关键字参数既可直接传入：<code>func(a=1, b=2)</code>，又可先组装dict，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。</p>
<p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p>
<p>使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</p>
</blockquote>
<h2 id="Reference-article"><a href="#Reference-article" class="headerlink" title="Reference article"></a>Reference article</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196169906eb9ca5864384546bf3405ae6a172b3e000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 集合 List、Tuple、Dict、 Set]]></title>
      <url>http://iequa.com/2017/05/31/python/py-language-4-collection-type/</url>
      <content type="html"><![CDATA[<p>Python 集合 List、Tuple、Dict、 Set</p>
<a id="more"></a>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'Tracy'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">'Adam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要删除list末尾的元素，用<code>pop()</code>方法</p>
</blockquote>
<h3 id="pop-i"><a href="#pop-i" class="headerlink" title="pop(i)"></a>pop(i)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">'Jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要删除指定位置的元素，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p>
</blockquote>
<h3 id="list-元素类型不同"><a href="#list-元素类型不同" class="headerlink" title="list 元素类型不同"></a>list 元素类型不同</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Apple'</span>, <span class="number">123</span>, <span class="keyword">True</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>list 里面的元素的数据类型也可以不同</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>list元素也可以是另一个list</p>
</blockquote>
<h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p><code>tuple</code>一旦初始化就不能修改,元素指向不改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>如果要定义一个空的tuple，可以写成<code>()</code></p>
<blockquote>
<p>tuple 的陷阱</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>正确的方式如下 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1,)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure>
<p>最后来看一个“可变的”tuple：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class="line">&gt;&gt;&gt; t[2][0] = &apos;X&apos;</span><br><span class="line">&gt;&gt;&gt; t[2][1] = &apos;Y&apos;</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure>
<p>其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list</p>
<h2 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Michael'</span>]</span><br><span class="line"><span class="number">95</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Adam'</span>] = <span class="number">67</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Adam'</span>]</span><br><span class="line"><span class="number">67</span></span><br></pre></td></tr></table></figure>
<h3 id="判断-key-是否存在"><a href="#判断-key-是否存在" class="headerlink" title="判断 key 是否存在"></a>判断 key 是否存在</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：返回None的时候Python的交互式命令行不显示结果。</p>
</blockquote>
<h3 id="删除-key，pop-key"><a href="#删除-key，pop-key" class="headerlink" title="删除 key，pop(key)"></a>删除 key，pop(key)</h3><p>要删除一个key，用pop(key)方法，对应的value也会从dict中删除：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>dict</th>
<th>list</th>
</tr>
</thead>
<tbody>
<tr>
<td>查找和插入的速度极快，不会随着key的增加而增加</td>
<td>查找和插入的时间随着元素的增加而增加</td>
</tr>
<tr>
<td>需要占用大量的内存，内存浪费多</td>
<td>占用空间小，浪费内存很少</td>
</tr>
</tbody>
</table>
<p><strong>所以，dict是用空间来换取时间的一种方法。</strong></p>
<blockquote>
<p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。</p>
<p>是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p>
<p>保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p>
</blockquote>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p>
<h3 id="set-init"><a href="#set-init" class="headerlink" title="set init"></a>set init</h3><p>要创建一个set，需要提供一个list作为输入集合：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>set([1, 2, 3])</code>只是告诉你这个set内部有1，2，3这3个元素，显示的[]不表示这是一个list。</p>
</blockquote>
<h3 id="add、remove"><a href="#add、remove" class="headerlink" title="add、remove"></a>add、remove</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<h3 id="set-amp-and"><a href="#set-amp-and" class="headerlink" title="set &amp; and |"></a>set &amp; and |</h3><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">set([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>set和dict的唯一区别仅在于没有存储对应的value，set的原理和dict一样.</p>
</blockquote>
<h3 id="difference、intersection"><a href="#difference、intersection" class="headerlink" title="difference、intersection"></a>difference、intersection</h3><p>我们还能进行一些筛选操作, 比如对比另一个东西, 看看原来的 set 里有没有和他不同的 (difference). 或者对比另一个东西, 看看 set 里有没有相同的 (intersection).</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(unique_char)</span><br><span class="line"># &#123;'b', 'c', 'a'&#125;</span><br><span class="line"></span><br><span class="line">unique_char = set(char_list)</span><br><span class="line">print(unique_char.difference(&#123;'a', 'e', 'i'&#125;))</span><br><span class="line"># &#123;'b', 'd', 'c'&#125;</span><br><span class="line"></span><br><span class="line">print(unique_char.intersection(&#123;'a', 'e', 'i'&#125;))</span><br><span class="line"># &#123;'a'&#125;</span><br></pre></td></tr></table></figure>
<h2 id="议不可变对象"><a href="#议不可变对象" class="headerlink" title="议不可变对象"></a>议不可变对象</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="string">'Abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'abc'</span></span><br></pre></td></tr></table></figure>
<p>小结 :</p>
<p>使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。</p>
<p><code>tuple</code> 虽然是不变对象，但试试把 <code>(1, 2, 3)</code> 和 <code>(1, [2, 3])</code> 放入dict或set中，并解释结果。</p>
<h2 id="Reference-article"><a href="#Reference-article" class="headerlink" title="Reference article"></a>Reference article</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 字符编码 & 字符串]]></title>
      <url>http://iequa.com/2017/05/31/python/py-language-3-str-&-character-encoding/</url>
      <content type="html"><![CDATA[<p>Python 字符编码 大概原理 与 字符串简单操作</p>
<a id="more"></a>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。</p>
<p>由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</p>
<p><img src="/images/python/language-str-encoding.png" alt=""></p>
<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>
<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的01000001；</p>
<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的00110000，注意字符’0’和整数0是不同的；</p>
<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。</p>
<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
<blockquote>
<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
</blockquote>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串<code>&#39;ABC&#39;</code>在Python内部都是ASCII编码的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">65</span>)</span><br><span class="line"><span class="string">'A'</span></span><br></pre></td></tr></table></figure>
<p>Python在后来添加了对Unicode的支持，以Unicode表示的字符串用<code>u&#39;...&#39;</code>表示，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">u'中文'</span></span><br><span class="line">中文</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'中'</span></span><br><span class="line"><span class="string">u'\u4e2d'</span></span><br></pre></td></tr></table></figure>
<p>写<code>u&#39;中&#39;</code>和<code>u&#39;\u4e2d&#39;</code>是一样的，<code>\u</code>后面是十六进制的Unicode码。因此，<code>u&#39;A&#39;</code>和<code>u&#39;\u0041&#39;</code>也一样的。</p>
<p>两种字符串如何相互转换？字符串<code>&#39;xxx&#39;</code>虽然是ASCII编码，但也可以看成是UTF-8编码，而<code>u&#39;xxx&#39;</code>则只能是Unicode编码。</p>
<p>把<code>u&#39;xxx&#39;</code>转换为UTF-8编码的<code>&#39;xxx&#39;</code>用<code>encode(&#39;utf-8&#39;)</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'ABC'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure>
<p>英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同），而中文字符转换后1个Unicode字符将变为3个UTF-8字符，你看到的<code>\xe4</code>就是其中一个字节，因为它的值是<code>228</code>，没有对应的字母可以显示，所以以十六进制显示字节的数值。<code>len()</code>函数可以返回字符串的长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">u'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">u'中文'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>反过来，把UTF-8编码表示的字符串<code>&#39;xxx&#39;</code>转换为Unicode字符串<code>u&#39;xxx&#39;</code>用<code>decode(&#39;utf-8&#39;)</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;abc&apos;.decode(&apos;utf-8&apos;)</span><br><span class="line">u&apos;abc&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;)</span><br><span class="line">u&apos;\u4e2d\u6587&apos;</span><br><span class="line">&gt;&gt;&gt; print &apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;)</span><br><span class="line">中文</span><br></pre></td></tr></table></figure>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></span><br><span class="line"><span class="string">'Hello, world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">' 3-01'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">3.1415926</span></span><br><span class="line"><span class="string">'3.14'</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Output、Variable、dataType、If、While/For、Py Head]]></title>
      <url>http://iequa.com/2017/05/31/python/py-language-2-Output-Variable-dataType-If-While:For-PyHead/</url>
      <content type="html"><![CDATA[<p>Python 的 print 语句、Variable 变量定义、 数据类型、条件与循环</p>
<a id="more"></a>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p><code>print</code>语句也可以跟上多个字符串，用逗号“,”隔开，就可以连成一串输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>The quick brown fox jumps over the lazy dog
</code></pre><blockquote>
<p><code>print</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(int(<span class="string">'2'</span>)+<span class="number">3</span>) <span class="comment"># int 字符串会转为整数</span></span><br><span class="line">print(int(<span class="number">1.9</span>))  <span class="comment"># int会保留整数部分</span></span><br><span class="line">print(float(<span class="string">'1.2'</span>)+<span class="number">3</span>) <span class="comment">#float()是浮点型，可以把字符串转换成小数</span></span><br></pre></td></tr></table></figure>
<pre><code>5
1
4.2
</code></pre><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = input()</span><br><span class="line">Blair</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello,'</span>, name)</span><br><span class="line">Hello, Blair</span><br></pre></td></tr></table></figure>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c=<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span></span><br><span class="line">print(a,b,c)</span><br></pre></td></tr></table></figure>
<pre><code>11 12 13
</code></pre><h3 id="global-var"><a href="#global-var" class="headerlink" title="global var"></a>global var</h3><p>那如何在外部也能调用一个在局部里修改了的全局变量呢. 首先我们在外部定义一个全局变量 <code>a=None</code>, 然后再 <code>fun()</code> 中声明 这个 <code>a</code> 是来自外部的 <code>a</code>. 声明方式就是 <code>global a</code>. 然后对这个外部的 <code>a</code> 修改后, 修改的效果会被施加到外部的 <code>a</code> 上. 所以我们将能看到运行完 <code>fun()</code>, <code>a</code> 的值从 <code>None</code> 变成了 <code>20</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">APPLY = <span class="number">100</span> <span class="comment"># 全局变量</span></span><br><span class="line">a = <span class="keyword">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a    <span class="comment"># 使用之前在全局里定义的 a</span></span><br><span class="line">    a = <span class="number">20</span>      <span class="comment"># 现在的 a 是全局变量了</span></span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">100</span></span><br><span class="line"></span><br><span class="line">print(APPLE)    <span class="comment"># 100</span></span><br><span class="line">print(<span class="string">'a past:'</span>, a)  <span class="comment"># None</span></span><br><span class="line">fun()</span><br><span class="line">print(<span class="string">'a now:'</span>, a)   <span class="comment"># 20</span></span><br></pre></td></tr></table></figure>
<h2 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h2><table>
<thead>
<tr>
<th>序号</th>
<th>data type</th>
<th>example value</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>int</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>float</td>
<td>1.2</td>
</tr>
<tr>
<td>3</td>
<td>str</td>
<td>‘hello’ or “hello”</td>
</tr>
<tr>
<td>4</td>
<td>boolean</td>
<td>True/False </td>
</tr>
<tr>
<td>5</td>
<td>None</td>
<td>None</td>
</tr>
<tr>
<td>6</td>
<td>常量</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="if-else"><a href="#if-else" class="headerlink" title="if/else"></a>if/else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>teenager
</code></pre><h3 id="if-while-遇-None"><a href="#if-while-遇-None" class="headerlink" title="if/while 遇 None"></a>if/while 遇 None</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> v1:</span><br><span class="line">   print(<span class="string">'v1'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果 if / while 后面接着的语句数据类型 None, 将与 False 处理方式相同</p>
</blockquote>
<h3 id="if-while-遇-空集合"><a href="#if-while-遇-空集合" class="headerlink" title="if/while 遇 空集合"></a>if/while 遇 空集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = []</span><br><span class="line"><span class="keyword">if</span> A:</span><br><span class="line">    print(<span class="string">"A is empty !"</span>)</span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> A:</span><br><span class="line">    print(<span class="string">"A is not empty !"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>A is not empty !
</code></pre><blockquote>
<p>在 Python 中集合类型有 list、 tuple 、dict 和 set 等，如果该集合对象作为 if 或 while 判断语句, 则与 False 处理方式相同</p>
</blockquote>
<h2 id="While-For"><a href="#While-For" class="headerlink" title="While/For"></a>While/For</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = range(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> a:</span><br><span class="line">    print(a[<span class="number">-1</span>])</span><br><span class="line">    a = a[:len(a)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>4
3
2
1
0
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>
<pre><code>Michael
Bob
Tracy
</code></pre><h2 id="py-程序头部"><a href="#py-程序头部" class="headerlink" title="py 程序头部"></a>py 程序头部</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>
<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，在源代码中写的中文输出可能会乱码。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">morvanzhou python</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/python-basic/" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark ALS]]></title>
      <url>http://iequa.com/2017/05/07/spark/spark-ALS/</url>
      <content type="html"><![CDATA[<p><a href="http://spark.apache.org/examples.html" target="_blank" rel="external">Spark.apache.org</a><br><a href="http://blog.javachen.com/2015/06/07/spark-configuration.html" target="_blank" rel="external">Java Chen Spark</a></p>
<a id="more"></a>
<p>以下为手动计算流程 :</p>
<h3 id="4-2-启动-spark-shell"><a href="#4-2-启动-spark-shell" class="headerlink" title="4.2 启动 spark-shell"></a>4.2 启动 spark-shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPARK_CLASSPATH=/opt/cloudera/parcels/CDH/lib/sqoop/mysql-connector-java-5.1.40.jar spark-shell</span><br></pre></td></tr></table></figure>
<h3 id="4-3-输入输出-相关变量"><a href="#4-3-输入输出-相关变量" class="headerlink" title="4.3 输入输出:相关变量"></a>4.3 输入输出:相关变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">val inputTable = <span class="string">"mds_user_coupon_bhv"</span></span><br><span class="line">val inputUrl = <span class="string">"jdbc:mysql://192.168.xxx.xx:3306/com_profile?user=your_name&amp;password=your_password"</span></span><br><span class="line">val outputTable = <span class="string">"mds_rs_shop_coupon_tmp"</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-核心程序代码"><a href="#4-4-核心程序代码" class="headerlink" title="4.4 核心程序代码"></a>4.4 核心程序代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">package com.x.rs.service</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat</span><br><span class="line">import java.util.Date</span><br><span class="line">import java.util.Properties</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.Row</span><br><span class="line">import org.apache.spark.sql.types._</span><br><span class="line"></span><br><span class="line">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line"></span><br><span class="line">import org.apache.spark.mllib.recommendation.&#123;ALS, Rating&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * Date : 2017-04-20</span><br><span class="line">  * Author : Blair Chan</span><br><span class="line">  */</span><br><span class="line">object RsCouponCalc &#123;</span><br><span class="line">  def main(args: Array[String]) &#123;</span><br><span class="line"></span><br><span class="line">    println("start...")</span><br><span class="line"></span><br><span class="line">    if (args.length &lt; 3) &#123;</span><br><span class="line">      System.err.println("Usage: &lt;file&gt;")</span><br><span class="line">      System.exit(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val inputTable = args(0) // Should be some file on your system // conf = new SparkConf().setAppName(appName).setMaster("local");</span><br><span class="line">    val inputUrl = args(1)</span><br><span class="line">    val outputTable = args(2)</span><br><span class="line"></span><br><span class="line">    val conf = new SparkConf().setAppName("SparkRsOne");</span><br><span class="line">    val sc = new SparkContext(conf)</span><br><span class="line">    val sqlContext = new org.apache.spark.sql.SQLContext(sc)</span><br><span class="line"></span><br><span class="line">    //    val rawData = sc.textFile(inputFile)</span><br><span class="line">    //    val rawRatings = rawData.map(_.split("\t").take(3))</span><br><span class="line"></span><br><span class="line">    val url = inputUrl</span><br><span class="line">    val prop = new Properties()</span><br><span class="line"></span><br><span class="line">    val dfForRawData = sqlContext.read.jdbc(url, inputTable, prop)</span><br><span class="line"></span><br><span class="line">    val ratings_tmp = dfForRawData.map &#123; row =&gt; (row(1).toString().toInt, row(4).toString().toInt, row(6).toString().toDouble) &#125;</span><br><span class="line"></span><br><span class="line">    val ratings = ratings_tmp.map &#123; case (uid, couponId, rating) =&gt; Rating(uid.toInt, couponId.toInt, rating.toDouble) &#125;</span><br><span class="line"></span><br><span class="line">    val model = ALS.train(ratings, 50, 10, 0.01)</span><br><span class="line"></span><br><span class="line">    model.userFeatures.count</span><br><span class="line"></span><br><span class="line">    val K = 10</span><br><span class="line"></span><br><span class="line">    model.recommendProductsForUsers(K)</span><br><span class="line"></span><br><span class="line">    val originResultRdd1 = model.recommendProductsForUsers(K)</span><br><span class="line"></span><br><span class="line">    val curDate = new Date()</span><br><span class="line">    val createDateString = new SimpleDateFormat("yyyy-MM-dd").format(curDate)</span><br><span class="line"></span><br><span class="line">    val originResultRdd2 = originResultRdd1.map(tuple =&gt; &#123;</span><br><span class="line">      val uid = tuple._1</span><br><span class="line">      val product = tuple._2.map &#123; case Rating(user, product, score) =&gt; (product.toString, score.toString) &#125;</span><br><span class="line">      (uid, product)</span><br><span class="line">    &#125;).flatMap &#123;</span><br><span class="line">      case (uid, product) =&gt; &#123;</span><br><span class="line">        product.map &#123; case (itemId, score) =&gt; Row.apply(uid.toLong, itemId.toString, score.toDouble, createDateString.toString) &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // println(originResultRdd2.first())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val schema = StructType(</span><br><span class="line">      StructField("uid", LongType) ::</span><br><span class="line">        StructField("coupon_id", LongType) ::</span><br><span class="line">        StructField("score", DoubleType) ::</span><br><span class="line">        StructField("calc_date", StringType) :: Nil)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val df = sqlContext.createDataFrame(originResultRdd2, schema)</span><br><span class="line"></span><br><span class="line">    df.insertIntoJDBC(url, outputTable, false)</span><br><span class="line">    // 设置为 true，则为 删除表，然后自动创建，再插入</span><br><span class="line"></span><br><span class="line">    println("end !")</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DF 通过插入 RMDB.  schema 可以通过反射来使得程序扩展性提高。</p>
</blockquote>
<p><a href="http://www.cnblogs.com/yaohaitao/articles/5681984.html" target="_blank" rel="external">spark sql internet</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark SQL编程]]></title>
      <url>http://iequa.com/2017/04/28/spark/spark-SQL/</url>
      <content type="html"><![CDATA[<p>Spark SQL，可对不同格式的数据执行ETL操作（如JSON，Parquet，数据库）然后完成特定的查询操作。</p>
<a id="more"></a>
<ul>
<li>DataFrame</li>
<li>Data Sources</li>
<li>JDBC Server</li>
</ul>
<p>使用Spark SQL时，最主要的两个组件就是 <strong>DataFrame</strong> 和 <strong>SQLContext</strong>。</p>
<h2 id="1-DataFrame"><a href="#1-DataFrame" class="headerlink" title="1. DataFrame"></a>1. DataFrame</h2><p>DataFrame 是一个分布式的，按照命名列的形式组织的数据集合。DataFrame基于R语言中的dataframe概念，与关系型数据库中的数据库表类似。</p>
<blockquote>
<p>之前版本的Spark SQL API中的SchemaRDD已经更名为DataFrame</p>
</blockquote>
<p>调用将DataFrame的内容作为行RDD（RDD of Rows）返回的<a href="https://spark.apache.org/docs/1.3.0/api/scala/index.html#org.apache.spark.sql.DataFrame" target="_blank" rel="external">rdd方法</a>，可以将DataFrame转换成RDD。</p>
<p><strong>创建 DataFrame</strong></p>
<p>可以通过如下 <font color="#c7254e">数据源创建 DataFrame</font> : </p>
<ul>
<li>已有的RDD</li>
<li>结构化数据文件</li>
<li>JSON数据集</li>
<li>Hive表</li>
<li>外部数据库</li>
</ul>
<p><strong>DataFrame API</strong></p>
<p>Spark SQL和DataFrame API已经在下述几种程序设计语言中实现：</p>
<ul>
<li><a href="https://spark.apache.org/docs/1.3.0/api/scala/index.html#org.apache.spark.sql.package" target="_blank" rel="external">Scala DataFrame API</a></li>
<li><a href="https://spark.apache.org/docs/1.3.0/api/java/index.html?org/apache/spark/sql/api/java/package-summary.html" target="_blank" rel="external">Java DataFrame API</a></li>
<li><a href="https://spark.apache.org/docs/1.3.0/api/python/pyspark.sql.html" target="_blank" rel="external">Python DataFrame API</a></li>
</ul>
<h2 id="2-SQLContext"><a href="#2-SQLContext" class="headerlink" title="2. SQLContext"></a>2. SQLContext</h2><p>SQLContext封装Spark中的所有关系型功能。可以用之前的示例中的现有SparkContext创建SQLContext。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> sqlContext = <span class="keyword">new</span> org.apache.spark.sql.<span class="type">SQLContext</span>(sc)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLContext" target="_blank" rel="external">SQLContext</a><br><a href="https://spark.apache.org/docs/1.3.0/api/scala/index.html#org.apache.spark.sql.hive.HiveContext" target="_blank" rel="external">HiveContext</a></p>
</blockquote>
<h2 id="3-JDBC数据源"><a href="#3-JDBC数据源" class="headerlink" title="3. JDBC数据源"></a>3. JDBC数据源</h2><p>JDBC 数据源 可用于通过JDBC API读取关系型数据库中的数据。相比于使用JdbcRDD，应该将JDBC数据源的方式作为首选，因为JDBC数据源能够将结果作为DataFrame对象返回，直接用Spark SQL处理或与其他数据源连接。</p>
<p>为确保Spark Shell程序有足够的内存，可以在运行spark-shell命令时，加入driver-memory命令行参数，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark-shell.cmd --driver-memory 1G</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="http://www.infoq.com/cn/articles/apache-spark-sql" target="_blank" rel="external">用Apache Spark进行大数据处理——第二部分：Spark SQL</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Read Mysql 的四种方式]]></title>
      <url>http://iequa.com/2017/04/20/spark/spark-read-mysql-four-functions/</url>
      <content type="html"><![CDATA[<p>目前 <code>Spark</code> 支持四种方式从数据库中读取数据，这里以 <code>MySQL</code> 为例进行介绍。</p>
<a id="more"></a>
<h2 id="Startup-spark-shell"><a href="#Startup-spark-shell" class="headerlink" title="Startup spark-shell"></a>Startup spark-shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPARK_CLASSPATH=/opt/cloudera/parcels/CDH/lib/sqoop/mysql-connector-java-5.1.40.jar spark-shell</span><br></pre></td></tr></table></figure>
<h2 id="1-不指定查询条件"><a href="#1-不指定查询条件" class="headerlink" title="1. 不指定查询条件"></a>1. 不指定查询条件</h2><h3 id="1-1-function-define"><a href="#1-1-function-define" class="headerlink" title="1.1 function define"></a>1.1 function define</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jdbc</span></span>(url: <span class="type">String</span>, table: <span class="type">String</span>, properties: <span class="type">Properties</span>): <span class="type">DataFrame</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-detail-example"><a href="#1-2-detail-example" class="headerlink" title="1.2 detail example"></a>1.2 detail example</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> url = <span class="string">"jdbc:mysql://192.168.***.**:3306/your_lib_name?user= your_username&amp;password=your_password"</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"><span class="keyword">val</span> prop = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line"><span class="keyword">val</span> df = sqlContext.read.jdbc(url, <span class="string">"mds_user_coupon_bhv"</span>, prop )</span><br><span class="line">println(df.count())</span><br><span class="line">println(df.rdd.partitions.size)</span><br></pre></td></tr></table></figure>
<p>我们运行上面的程序，可以看到df.rdd.partitions.size输出结果是1，这个结果的含义是iteblog表的所有数据都是由RDD的一个分区处理的，所以说，如果你这个表很大，很可能会出现OOM</p>
<blockquote>
<p>Note : 这种方式在数据量大的时候不建议使用。</p>
</blockquote>
<h2 id="2-指定数据库字段的范围"><a href="#2-指定数据库字段的范围" class="headerlink" title="2. 指定数据库字段的范围"></a>2. 指定数据库字段的范围</h2><p>这种方式就是通过指定数据库中某个字段的范围，但是<code>这个字段必须是数字</code>，来看看这个函数的函数原型：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jdbc</span></span>(</span><br><span class="line">    url: <span class="type">String</span>,</span><br><span class="line">    table: <span class="type">String</span>,</span><br><span class="line">    columnName: <span class="type">String</span>,</span><br><span class="line">    lowerBound: <span class="type">Long</span>,</span><br><span class="line">    upperBound: <span class="type">Long</span>,</span><br><span class="line">    numPartitions: <span class="type">Int</span>,</span><br><span class="line">    connectionProperties: <span class="type">Properties</span>): <span class="type">DataFrame</span></span><br></pre></td></tr></table></figure>
<p>… not finish</p>
<h2 id="3-根据任意字段进行分区"><a href="#3-根据任意字段进行分区" class="headerlink" title="3. 根据任意字段进行分区"></a>3. 根据任意字段进行分区</h2><p>…</p>
<h2 id="4-通过-load-获取"><a href="#4-通过-load-获取" class="headerlink" title="4. 通过 load 获取"></a>4. 通过 load 获取</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> df = sqlContext.load(<span class="string">"jdbc"</span>, <span class="type">Map</span>(<span class="string">"url"</span> -&gt; <span class="string">"jdbc:mysql://..."</span>, </span><br><span class="line">              <span class="string">"dbtable"</span> -&gt; <span class="string">"mds_user_coupon_bhv"</span>)</span><br><span class="line">         )</span><br></pre></td></tr></table></figure>
<p>换一种更正式的写法如下 :</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> df = sqlContext.read.format(<span class="string">"jdbc"</span>).options(<span class="type">Map</span>(</span><br><span class="line">      <span class="string">"url"</span> -&gt; <span class="string">"jdbc:mysql://192.168.***.**:3306/your_lib_name?user= your_username&amp;password=your_password"</span>,</span><br><span class="line">      <span class="string">"dbtable"</span> -&gt; <span class="string">"mds_user_coupon_bhv"</span>)</span><br><span class="line">   ).load()</span><br></pre></td></tr></table></figure>
<p>options函数支持url、driver、dbtable、partitionColumn、lowerBound、upperBound以及numPartitions选项，这个和方法二的参数一致。其内部实现原理部分和方法二大体一致。同时load方法还支持json、orc等数据源的读取。</p>
<blockquote>
<p>Reading notes</p>
</blockquote>
<h2 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h2><blockquote>
<p>尊重原创，转载请注明： 转载自过往记忆（<a href="http://www.iteblog.com/）" target="_blank" rel="external">http://www.iteblog.com/）</a> </p>
</blockquote>
<p><a href="http://blog.csdn.net/mlljava1111/article/details/50432569" target="_blank" rel="external">Spark Read Mysql-csdn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[New Mac Install Brew Iterm Zsh]]></title>
      <url>http://iequa.com/2017/03/22/ops/ops-new-macosx-install-soft/</url>
      <content type="html"><![CDATA[<h2 id="1-install-homebrew"><a href="#1-install-homebrew" class="headerlink" title="1. install homebrew"></a>1. install homebrew</h2><p>Mac 下面的包管理工具，通过 Github 托管适合 Mac 的编译配置以及 Patch，可以方便的安装开发工具。</p>
<p>Mac 自带ruby 所以安装起来很方便，同时它也会自动把git也给你装上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装过程可能会有点慢，完成之后，建议执行一下自检，brew doctor<br>看到<br>Your system is ready to brew.<br>那么恭喜你的 brew 已经可以开始使用了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install wget tree</span><br></pre></td></tr></table></figure>
<hr>
<p>brew 常用命令： （所有软件以PHP5.5为例子）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update                        <span class="comment">#更新brew可安装包，建议每次执行一下</span></span><br><span class="line">brew search php55                  <span class="comment">#搜索php5.5</span></span><br><span class="line">brew tap josegonzalez/php          <span class="comment">#安装扩展&lt;gihhub_user/repo&gt; </span></span><br><span class="line">brew tap                          <span class="comment">#查看安装的扩展列表</span></span><br><span class="line">brew install php55                <span class="comment">#安装php5.5</span></span><br><span class="line">brew remove  php55                <span class="comment">#卸载php5.5</span></span><br><span class="line">brew upgrade php55                <span class="comment">#升级php5.5</span></span><br><span class="line">brew options php55                <span class="comment">#查看php5.5安装选项</span></span><br><span class="line">brew info    php55                <span class="comment">#查看php5.5相关信息</span></span><br><span class="line">brew home    php55                <span class="comment">#访问php5.5官方网站</span></span><br><span class="line">brew services list                <span class="comment">#查看系统通过 brew 安装的服务</span></span><br><span class="line">brew services cleanup              <span class="comment">#清除已卸载无用的启动配置文件</span></span><br><span class="line">brew services restart php55        <span class="comment">#重启php-fpm</span></span><br><span class="line"> </span><br><span class="line">注意：brew services 相关命令最好别经常用了，提示会被移除</span><br></pre></td></tr></table></figure>
<h2 id="2-install-zsh"><a href="#2-install-zsh" class="headerlink" title="2. install zsh"></a>2. install zsh</h2><p>ohmyzsh &amp; iTerm2 两个神器，在Mac os x下是一定要装的. </p>
<h3 id="2-1-install-onmyzsh"><a href="#2-1-install-onmyzsh" class="headerlink" title="2.1 install onmyzsh"></a>2.1 install onmyzsh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L http://install.ohmyz.sh | sh</span><br></pre></td></tr></table></figure>
<h3 id="2-2-install-zsh"><a href="#2-2-install-zsh" class="headerlink" title="2.2 install zsh"></a>2.2 install zsh</h3><p>在 Terminal 下，直接敲 zsh.</p>
<blockquote>
<p>下面请暂时忽略 </p>
</blockquote>
<hr>
<p>设置默认shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/shells </span><br><span class="line"># List of acceptable shells for chpass(1). </span><br><span class="line"># Ftpd will not allow users to connect who are not using </span><br><span class="line"># one of these shells. /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh zsh --version zsh 5.0.2 (x86_64-apple-darwin13.0) chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>虽然Mac自带了zsh，如果你想要最新版的zsh，那么你用 brew install zsh安装一个最新的吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/zsh --version</span><br></pre></td></tr></table></figure>
<p>zsh 5.0.5 (x86_64-apple-darwin13.3.0) 区别也不会很大， 默认的版本已经很新了。  </p>
<p>安装后最好备份 : cp ~/.zshrc ~/.zshrc.orig</p>
<h2 id="3-homebrew-cask"><a href="#3-homebrew-cask" class="headerlink" title="3. homebrew-cask"></a>3. homebrew-cask</h2><p>install brew cask</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap phinze/homebrew-cask</span><br></pre></td></tr></table></figure>
<p>cask常用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew cask search        #列出所有可以被安装的软件</span><br><span class="line">brew cask search php    #查找所有和php相关的应用</span><br><span class="line">brew cask list          #列出所有通过cask安装的软件</span><br><span class="line">brew cask info phpstorm #查看 phpstorm 的信息</span><br><span class="line">brew cask uninstall qq  #卸载 QQ</span><br></pre></td></tr></table></figure>
<blockquote>
<p>brew cask install sublime-text</p>
</blockquote>
<p>这里谈谈cask对比Mac App Store的优势：</p>
<ul>
<li>对常用软件支持更全面（特别是开发者），cask里面会给你一些惊喜；</li>
<li>软件更新速度快，一般都是最新版本 Store上很久很久才会更新版本；</li>
<li>命令安装感觉比打开Store方便，另外Store在国内的速度也是XXOO。</li>
</ul>
<blockquote>
<p>homebrew-cask 你可以先不安装</p>
</blockquote>
<h2 id="4-iterm2"><a href="#4-iterm2" class="headerlink" title="4. iterm2"></a>4. iterm2</h2><p> <a href="https://www.iterm2.com/" target="_blank" rel="external">https://www.iterm2.com/</a></p>
<h2 id="5-SimpleHTTPServer"><a href="#5-SimpleHTTPServer" class="headerlink" title="5. SimpleHTTPServer"></a>5. SimpleHTTPServer</h2><p>A computer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>
<p>B computer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://192.168.xx.xx:8000/your-filename</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nc 瑞士军刀，也可以两台电脑传输文件</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Machine Learning p4 - Build Recommendation System]]></title>
      <url>http://iequa.com/2016/11/23/spark/spark-machine-learning-p4-rs/</url>
      <content type="html"><![CDATA[<p>Spark build Recommendation System, 推荐引擎试图对用户与某类物品之间的联系建模</p>
<a id="more"></a>
<ul>
<li>推荐引擎的类型；</li>
<li>用用户偏好数据来建立一个推荐模型；</li>
<li>为用户进行推荐和求指定物品的类似物品；</li>
<li>评估该模型的预测能力。</li>
</ul>
<h2 id="1-推荐模型分类"><a href="#1-推荐模型分类" class="headerlink" title="1. 推荐模型分类"></a>1. 推荐模型分类</h2><ul>
<li>内容过滤</li>
<li>协同过滤</li>
<li>矩阵分解</li>
</ul>
<h3 id="1-1-内容过滤-类似物品"><a href="#1-1-内容过滤-类似物品" class="headerlink" title="1.1 内容过滤 - (类似物品)"></a>1.1 内容过滤 - (类似物品)</h3><p>利用物品相似度定义，来求出与该物品类似的物品。</p>
<blockquote>
<p>对用户的推荐可以根据用户的属性或描述得出，之后再通过相同的相似度定义来与物品属性做匹配。</p>
</blockquote>
<h3 id="1-2-协同过滤-估计未触"><a href="#1-2-协同过滤-估计未触" class="headerlink" title="1.2 协同过滤 - (估计未触)"></a>1.2 协同过滤 - (估计未触)</h3><p>协同过滤是一种利用大量已有的用户偏好来估计用户对其<code>未接触过</code>的物品的喜好程度。其内在思想是<strong>相似度的定义</strong>。</p>
<ul>
<li><p>基于用户</p>
<blockquote>
<p>如果两个用户表现出相似的偏好，认为他们的兴趣类似。要对他们中的一个用户推荐一个未知物品，便可选取若干与其类似的用户并根据他们的喜好计算出对各个物品的综合得分。</p>
</blockquote>
</li>
<li><p>基于物品</p>
<blockquote>
<p>据现有用户对物品的偏好或是评级情况，来计算物品之间的某种相似度。已有物品相似的物品被用来生成一个综合得分，而该得分用于评估未知物品的相似度。</p>
</blockquote>
</li>
</ul>
<p>基于<strong>用户</strong>或<strong>物品</strong>的方法得分取决于若干用户或是物品之间依据相似度所构成的集合（即邻居），故它们也常被称为KNN。</p>
<p>对“用户-物品”<code>偏好建模</code></p>
<h3 id="1-3-矩阵分解"><a href="#1-3-矩阵分解" class="headerlink" title="1.3 矩阵分解"></a>1.3 矩阵分解</h3><p>Spark推荐模型库 包含基于矩阵分解（matrix factorization）的实现，该模型在协同过滤中的表现十分出色。</p>
<h4 id="1-3-1-显式矩阵分解"><a href="#1-3-1-显式矩阵分解" class="headerlink" title="1.3.1 显式矩阵分解"></a>1.3.1 显式矩阵分解</h4><p>显式自身偏好数据</p>
<blockquote>
<p>这类数据包括如物品评级、赞、喜欢等用户对物品的评价。转换为以用户为行、物品为列的二维矩阵。</p>
<p>大部分情况下单个用户只会和少部分物品接触，所以该矩阵很稀疏。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tom, Star Wars, 5</span><br><span class="line">Jane, Titanic,　4</span><br><span class="line">Bill, Batman,　3</span><br><span class="line">Jane, Star Wars, 2</span><br><span class="line">Bill, Titanic, 3</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-4.1.png" alt="一个简单的电影评级矩阵"></p>
<p>用户-物品 矩阵的维度为 U × I</p>
<p><img src="/images/spark/spark-ml-4.2.jpg" alt="图4-2 一个稀疏的评级矩阵"> </p>
<p><strong>为了降维</strong></p>
<ul>
<li>表示用户的 U × k 维矩阵</li>
<li>表征物品的 I × k 维矩阵</li>
</ul>
<blockquote>
<p>这两个矩阵也称作因子矩阵, 乘积是原始评级矩阵的一个近似.</p>
<p>原始评级矩阵通常很稀疏，但因子矩阵却是稠密的</p>
</blockquote>
<p><img src="/images/spark/spark-ml-4.3.jpg" alt="图4-3 用户因子矩阵和物品因子矩阵"></p>
<blockquote>
<p>因子可能表示了某些含义，比如对电影的某个导演、种类、风格或某些演员的偏好。</p>
</blockquote>
<p><code>要计算给定用户对某个物品的预计评级</code> = 行（用户因子向量） 与 列（物品因子向量），两者点积</p>
<p><img src="/images/spark/spark-ml-4.4.jpg" alt="图4-4 用用户因子矩阵和物品因子矩阵计算推荐"></p>
<blockquote>
<p>物品之间相似度的计算，转换为对两物品因子向量之间相似度的计算</p>
</blockquote>
<p><img src="/images/spark/spark-ml-4.5.jpg" alt="图4-5 用物品因子矩阵计算相似度"></p>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>因子分解类模型建立，求解容易</td>
<td>物品或是用户的因子向量可能达到数以百万计。在存储和计算能力有挑战。</td>
</tr>
</tbody>
</table>
<h4 id="1-3-2-隐式矩阵分解"><a href="#1-3-2-隐式矩阵分解" class="headerlink" title="1.3.2. 隐式矩阵分解"></a>1.3.2. 隐式矩阵分解</h4><p>隐含在用户与物品的交互之中。二元数据（比如用户是否观看了某个电影或是否购买了某个商品）和计数数据（比如用户观看某电影的次数）便是这类数据。</p>
<p>MLlib 处理隐式数据：</p>
<ol>
<li>一个二元偏好矩阵 P </li>
<li>一个信心权重矩阵 C</li>
</ol>
<p><img src="/images/spark/spark-ml-4.6.png" alt="图4-6 用物品因子矩阵计算相似度"></p>
<p>隐式模型仍然会创建一个用户因子矩阵和一个物品因子矩阵。但是，模型所求解的是偏好矩阵而非评级矩阵的近似。</p>
<p><strong>3. 最小二乘法</strong></p>
<p>最小二乘法（Alternating Least Squares，ALS）是一种求解矩阵分解问题的最优化方法。且相对容易并行化。</p>
<blockquote>
<p>ALS的实现原理是迭代式求解一系列最小二乘回归问题。在每一次迭代时，固定用户因子矩阵或是物品因子矩阵中的一个，然后用固定的这个矩阵以及评级数据来更新另一个矩阵。之后，被更新的矩阵被固定住，再更新另外一个矩阵。如此迭代，直到模型收敛（或是迭代了预设好的次数）。</p>
</blockquote>
<h2 id="2-提取有效特征"><a href="#2-提取有效特征" class="headerlink" title="2. 提取有效特征"></a>2. 提取有效特征</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&gt;./bin/spark-shell –-driver-memory <span class="number">2</span>g</span><br><span class="line"><span class="keyword">val</span> rawData = sc.textFile(<span class="string">"/Users/hp/ghome/github/Recommendation/spark-ml/ml-100k/u.data"</span>)</span><br><span class="line">rawData.first()</span><br><span class="line"><span class="keyword">val</span> rawRatings = rawData.map(_.split(<span class="string">"\t"</span>).take(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.mllib.recommendation.<span class="type">ALS</span></span><br><span class="line"></span><br><span class="line"><span class="type">ALS</span>.</span><br><span class="line">asInstanceOf    isInstanceOf   main   toString        train           trainImplicit</span><br><span class="line"><span class="type">ALS</span>.train</span><br></pre></td></tr></table></figure>
<p>ALS模型需要一个由Rating记录构成的RDD，而Rating类则是对用户ID、影片ID（这里是通称product）和实际星级这些参数的封装。<br>我们可以调用map方法将原来的各ID和星级的数组转换为对应的Rating对象，从而创建所需的评级数据集。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> org.apache.spark.mllib.recommendation.<span class="type">Rating</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.mllib.recommendation.<span class="type">Rating</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ratings = rawRatings.map &#123; <span class="keyword">case</span> <span class="type">Array</span>(user, movie, rating) =&gt;</span><br><span class="line">     | <span class="type">Rating</span>(user.toInt, movie.toInt, rating.toDouble) &#125;</span><br><span class="line">ratings: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.mllib.recommendation.<span class="type">Rating</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">3</span>] at map at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; ratings.first()</span><br><span class="line">res3: org.apache.spark.mllib.recommendation.<span class="type">Rating</span> = <span class="type">Rating</span>(<span class="number">196</span>,<span class="number">242</span>,<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; ratings.take(<span class="number">10</span>)</span><br><span class="line">res4: <span class="type">Array</span>[org.apache.spark.mllib.recommendation.<span class="type">Rating</span>] = <span class="type">Array</span>(<span class="type">Rating</span>(<span class="number">196</span>,<span class="number">242</span>,<span class="number">3.0</span>), <span class="type">Rating</span>(<span class="number">186</span>,<span class="number">302</span>,<span class="number">3.0</span>), <span class="type">Rating</span>(<span class="number">22</span>,<span class="number">377</span>,<span class="number">1.0</span>), <span class="type">Rating</span>(<span class="number">244</span>,<span class="number">51</span>,<span class="number">2.0</span>), <span class="type">Rating</span>(<span class="number">166</span>,<span class="number">346</span>,<span class="number">1.0</span>), <span class="type">Rating</span>(<span class="number">298</span>,<span class="number">474</span>,<span class="number">4.0</span>), <span class="type">Rating</span>(<span class="number">115</span>,<span class="number">265</span>,<span class="number">2.0</span>), <span class="type">Rating</span>(<span class="number">253</span>,<span class="number">465</span>,<span class="number">5.0</span>), <span class="type">Rating</span>(<span class="number">305</span>,<span class="number">451</span>,<span class="number">3.0</span>), <span class="type">Rating</span>(<span class="number">6</span>,<span class="number">86</span>,<span class="number">3.0</span>))</span><br></pre></td></tr></table></figure>
<h2 id="3-训练推荐模型"><a href="#3-训练推荐模型" class="headerlink" title="3. 训练推荐模型"></a>3. 训练推荐模型</h2><p>从原始数据提取出这些简单特征后，便可训练模型。MLlib已实现模型训练的细节，这不需要我们担心。我们只需提供上述指定类型的新RDD以及其他所需参数来作为训练的输入即可。</p>
<h3 id="3-1-Movie-100k-train-model"><a href="#3-1-Movie-100k-train-model" class="headerlink" title="3.1 Movie-100k train model"></a>3.1 Movie-100k train model</h3><p>现在开始训练模型了，所需的其他参数有以下几个</p>
<ul>
<li><code>rank</code>：对应ALS模型中的因子个数，也就是在低阶近似矩阵中的隐含特征个数。因子个数一般越多越好。但它也会直接影响模型训练和保存时所需的内存开销，尤其是在用户和物品很多的时候。因此实践中该参数常作为训练效果与系统开销之间的调节参数。通常，其合理取值为10到200。</li>
<li><code>iterations</code>：对应运行时的迭代次数。ALS能确保每次迭代都能降低评级矩阵的重建误差，但一般经少数次迭代后ALS模型便已能收敛为一个比较合理的好模型。这样，大部分情况下都没必要迭代太多次（10次左右一般就挺好）。</li>
<li><code>lambda</code>：该参数控制模型的正则化过程，从而控制模型的过拟合情况。其值越高，正则化越严厉。该参数的赋值与实际数据的大小、特征和稀疏程度有关。和其他的机器学习模型一样，正则参数应该通过用非样本的测试数据进行交叉验证来调整。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> model = <span class="type">ALS</span>.train(ratings, <span class="number">50</span>, <span class="number">10</span>, <span class="number">0.01</span>)</span><br><span class="line">model: org.apache.spark.mllib.recommendation.<span class="type">MatrixFactorizationModel</span> = org.apache.spark.mllib.recommendation.<span class="type">MatrixFactorizationModel</span>@<span class="number">2e835760</span></span><br><span class="line"></span><br><span class="line">scala&gt; model.userFeatures</span><br><span class="line">res5: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Array</span>[<span class="type">Double</span>])] = users <span class="type">MapPartitionsRDD</span>[<span class="number">209</span>] at mapValues at <span class="type">ALS</span>.scala:<span class="number">255</span></span><br><span class="line"></span><br><span class="line">scala&gt; model.userFeatures.count</span><br><span class="line">res6: <span class="type">Long</span> = <span class="number">943</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>MatrixFactorizationModel</code> 对象将 用户因子和物品因子分别保存在一个 <code>(id,factor)</code> 对类型的RDD中。<br>它们分别称作<code>userFeatures</code> 和 <code>productFeatures</code>。</p>
</blockquote>
<h3 id="3-2-隐式反馈数据训练模型"><a href="#3-2-隐式反馈数据训练模型" class="headerlink" title="3.2 隐式反馈数据训练模型"></a>3.2 隐式反馈数据训练模型</h3><p>MLlib中标准的矩阵分解模型用于显式评级数据的处理。若要处理隐式数据，则可使用<code>trainImplicit</code>函数。其调用方式和标准的<code>train</code>模式类似，但多了一个可设置的<code>alpha</code>参数（也是一个正则化参数，<code>lambda</code>应通过测试和交叉验证法来设置）。</p>
<p>alpha参数指定了信心权重所应达到的基准线。该值越高则所训练出的模型越认为用户与他所没评级过的电影之间没有相关性。</p>
<h2 id="4-使用推荐模型"><a href="#4-使用推荐模型" class="headerlink" title="4. 使用推荐模型"></a>4. 使用推荐模型</h2><p>预测通常有两种：为某个用户推荐物品，或找出与某个物品相关或相似的其他物品。</p>
<h3 id="4-1-用户推荐"><a href="#4-1-用户推荐" class="headerlink" title="4.1 用户推荐"></a>4.1 用户推荐</h3><p>通过模型求出用户可能喜好程度最高的前K个商品。</p>
<ol>
<li>基于<strong>用户的模型</strong>，则会利用相似用户的评级来计算对某个用户的推荐。</li>
<li>基于<strong>物品的模型</strong>，则会依靠用户接触过的物品与候选物品之间的相似度来获得推荐。</li>
</ol>
<p>利用矩阵分解方法时，是直接对评级数据进行建模，所以预计得分可视作相应用户因子向量和物品因子向量的点积。</p>
<p><strong>1. 从MovieLens 100k数据集生成电影推荐</strong></p>
<p>MLlib的推荐模型基于矩阵分解，因此可用模型所求得的因子矩阵来计算用户对物品的预计评级。下面只针对利用MovieLens中显式数据做推荐的情形，使用隐式模型时的方法与之相同。</p>
<p><code>MatrixFactorizationModel</code>类 提供了一个<code>predict</code>函数，以方便地计算给定用户对给定物品的预期得分：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> predictedRating = model.predict(<span class="number">789</span>, <span class="number">123</span>)</span><br><span class="line"><span class="number">16</span>/<span class="number">05</span>/<span class="number">04</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">08</span> <span class="type">WARN</span> <span class="type">BLAS</span>: <span class="type">Failed</span> to load implementation from: com.github.fommil.netlib.<span class="type">NativeSystemBLAS</span></span><br><span class="line"><span class="number">16</span>/<span class="number">05</span>/<span class="number">04</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">08</span> <span class="type">WARN</span> <span class="type">BLAS</span>: <span class="type">Failed</span> to load implementation from: com.github.fommil.netlib.<span class="type">NativeRefBLAS</span></span><br><span class="line">predictedRating: <span class="type">Double</span> = <span class="number">1.8390368814083764</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> predictedRating = model.predict(<span class="number">789</span>, <span class="number">123</span>)</span><br><span class="line">predictedRating: <span class="type">Double</span> = <span class="number">1.8390368814083764</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> userId = <span class="number">789</span></span><br><span class="line">userId: <span class="type">Int</span> = <span class="number">789</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> <span class="type">K</span> = <span class="number">10</span></span><br><span class="line"><span class="type">K</span>: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> topKRecs = model.recommendProducts(userId, <span class="type">K</span>)</span><br><span class="line">topKRecs: <span class="type">Array</span>[org.apache.spark.mllib.recommendation.<span class="type">Rating</span>] = <span class="type">Array</span>(<span class="type">Rating</span>(<span class="number">789</span>,<span class="number">180</span>,<span class="number">5.352418839062572</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">887</span>,<span class="number">5.289455638310055</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">484</span>,<span class="number">5.0301818688410025</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">475</span>,<span class="number">5.011219778604191</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">150</span>,<span class="number">5.003965038415291</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">663</span>,<span class="number">4.991126084946501</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">56</span>,<span class="number">4.974685008959871</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">48</span>,<span class="number">4.965402351329832</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">9</span>,<span class="number">4.963265626841469</span>), <span class="type">Rating</span>(<span class="number">789</span>,<span class="number">127</span>,<span class="number">4.963069165947614</span>))</span><br><span class="line"></span><br><span class="line">scala&gt; println(topKRecs.mkString(<span class="string">"\n"</span>))</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">180</span>,<span class="number">5.352418839062572</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">887</span>,<span class="number">5.289455638310055</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">484</span>,<span class="number">5.0301818688410025</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">475</span>,<span class="number">5.011219778604191</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">150</span>,<span class="number">5.003965038415291</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">663</span>,<span class="number">4.991126084946501</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">56</span>,<span class="number">4.974685008959871</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">48</span>,<span class="number">4.965402351329832</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">9</span>,<span class="number">4.963265626841469</span>)</span><br><span class="line"><span class="type">Rating</span>(<span class="number">789</span>,<span class="number">127</span>,<span class="number">4.963069165947614</span>)</span><br></pre></td></tr></table></figure>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX"],
    tex2jax: {
      inlineMath: [ ['$','$'], ['\\(','\\)'] ],
      displayMath: [ ['$$','$$']],
      processEscapes: true
    }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML,http://myserver.com/MathJax/config/local/local.js">
</script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Machine Learning p3 - 数据的获取、处理与准备]]></title>
      <url>http://iequa.com/2016/09/09/spark/spark-machine-learning-p3/</url>
      <content type="html"><![CDATA[<p>《Spark Machine Learing》 Reading Notes ： Spark上数据的获取、处理与准备</p>
<a id="more"></a>
<p>MovieStream 包括网站提供的电影数据、用户的服务信息数据以及行为数据。</p>
<p>这些数据涉及电影和相关内容（比如标题、分类、图片、演员和导演）、用户信息（比如用户属性、位置和其他信息）以及用户活动数据（比如浏览数、预览的标题和次数、评级、评论，以及如赞、分享之类的社交数据，还有包括像Facebook和Twitter之类的社交网络属性）。</p>
<p>其外部数据来源则可能包括天气和地理定位信息，以及如IMDB和Rotten Tomators之类的第三方电影评级与评论信息等。</p>
<p>一个预测精准的好模型有着极高的商业价值（Netflix Prize 和 <strong>Kaggle</strong> 上机器学习比赛的成功就是很好的见证）</p>
<p><strong>focus on</strong></p>
<ul>
<li>数据的处理、清理、探索和可视化方法；</li>
<li>原始数据转换为可用于机器学习算法特征的各种技术；</li>
<li>学习如何使用外部库或Spark内置函数来正则化输入特征.</li>
</ul>
<h2 id="1-获取公开数据集"><a href="#1-获取公开数据集" class="headerlink" title="1. 获取公开数据集"></a>1. 获取公开数据集</h2><p><strong>UCL机器学习知识库</strong></p>
<blockquote>
<p>包括近300个不同大小和类型的数据集，可用于分类、回归、聚类和推荐系统任务。数据集列表位于：<a href="http://archive.ics.uci.edu/ml/。" target="_blank" rel="external">http://archive.ics.uci.edu/ml/。</a></p>
</blockquote>
<p><strong>Amazon AWS公开数据集</strong></p>
<blockquote>
<p>包含的通常是大型数据集，可通过Amazon S3访问。这些数据集包括人类基因组项目、Common Crawl网页语料库、维基百科数据和Google Books Ngrams。<br>相关信息可参见：<a href="http://aws.amazon.com/publicdatasets/。" target="_blank" rel="external">http://aws.amazon.com/publicdatasets/。</a></p>
</blockquote>
<p><strong>Kaggle</strong></p>
<blockquote>
<p>这里集合了Kaggle举行的各种机器学习竞赛所用的数据集。<br>它们覆盖分类、回归、排名、推荐系统以及图像分析领域，可从Competitions区域下载：<a href="http://www.kaggle.com/competitions。" target="_blank" rel="external">http://www.kaggle.com/competitions。</a></p>
</blockquote>
<p><strong>KDnuggets</strong></p>
<blockquote>
<p>这里包含一个详细的公开数据集列表，其中一些上面提到过的。<br>该列表位于：<a href="http://www.kdnuggets.com/datasets/index.html。" target="_blank" rel="external">http://www.kdnuggets.com/datasets/index.html。</a></p>
</blockquote>
<p><strong>MovieLens 100k数据集</strong></p>
<p>MovieLens 100k数据集包含表示多个用户对多部电影的10万次评级数据，也包含电影元数据和用户属性信息</p>
<p><a href="http://files.grouplens.org/datasets/movielens/ml-100k.zip" target="_blank" rel="external">http://files.grouplens.org/datasets/movielens/ml-100k.zip</a></p>
<p>ml-100k/  u.user（用户属性文件）、u.item（电影元数据）和u.data（用户对电影的评级）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;unzip ml-100k.zip</span><br><span class="line">  inflating: ml-100k/allbut.pl</span><br><span class="line">  inflating: ml-100k/mku.sh</span><br><span class="line">  inflating: ml-100k/README</span><br><span class="line">  ...</span><br><span class="line">  inflating: ml-100k/ub.base</span><br><span class="line">  inflating: ml-100k/ub.test</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>u.user</strong></p>
<p>user.id、age、gender、occupation、ZIP code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;head -5 u.user</span><br><span class="line">  1|24|M|technician|85711</span><br><span class="line">  2|53|F|other|94043</span><br><span class="line">  3|23|M|writer|32067</span><br><span class="line">  4|24|M|technician|43537</span><br><span class="line">  5|33|F|other|15213</span><br></pre></td></tr></table></figure>
<p><strong>u.item</strong></p>
<p>movie id、title、release date以及若干与IMDB link和电影分类相关的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;head -5 u.item</span><br><span class="line">  1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20 Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0</span><br><span class="line">  2|GoldenEye (1995)|01-Jan-1995||http://us.imdb.com/M/title- exact?GoldenEye%20(1995)|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0</span><br><span class="line">  3|Four Rooms (1995)|01-Jan-1995||http://us.imdb.com/M/title- exact?Four%20Rooms%20(1995)|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0</span><br><span class="line">  4|Get Shorty (1995)|01-Jan-1995||http://us.imdb.com/M/title- exact?Get%20Shorty%20(1995)|0|1|0|0|0|1|0|0|1|0|0|0|0|0|0|0|0|0|0</span><br><span class="line">  5|Copycat (1995)|01-Jan-1995||http://us.imdb.com/M/title- exact?Copycat%20(1995)|0|0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|1|0|0</span><br></pre></td></tr></table></figure>
<p><strong>u.data</strong></p>
<p>user id、movie id、rating（从1到5）和timestamp属性，各属性间用制表符（\t）分隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;head -5 u.data</span><br><span class="line">196    242    3    881250949</span><br><span class="line">186    302    3    891717742</span><br><span class="line">22     377    1    878887116</span><br><span class="line">244    51     2    880606923</span><br><span class="line">166    346    1    886397596</span><br></pre></td></tr></table></figure>
<h2 id="2-探索与可视化数据"><a href="#2-探索与可视化数据" class="headerlink" title="2. 探索与可视化数据"></a>2. 探索与可视化数据</h2><p>IPython的安装方法可参考如下指引：<a href="http://ipython.org/install.html。" target="_blank" rel="external">http://ipython.org/install.html。</a></p>
<p>如果这是你第一次使用IPython，这里有一个教程：<a href="http://ipython.org/ipython-doc/stable/interactive/tutorial.html。" target="_blank" rel="external">http://ipython.org/ipython-doc/stable/interactive/tutorial.html。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;IPYTHON=1 IPYTHON_OPTS=&quot;--pylab&quot; ./bin/pyspark</span><br></pre></td></tr></table></figure>
<blockquote>
<p>终端里的IPython 2.3.1 – An enhanced Interactive Python和Using matplotlib backend: MacOSX输出行表示IPython和pylab均已被PySpark启用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 1.5.2</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 2.7.10 (default, Jul 14 2015 19:46:27)</span><br><span class="line">SparkContext available as sc, HiveContext available as sqlContext.</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以将样本代码输入到IPython终端，也可通过IPython提供的Notebook 应用来完成。Notebook支持HTML显示，且在IPython终端的基础上提供了一些增强功能，如即时绘图、HTML标记，以及独立运行代码片段的功能。</p>
<p>IPython Notebook 使用指南：<a href="http://ipython.org/ipython-doc/stable/interactive/notebook.html" target="_blank" rel="external">http://ipython.org/ipython-doc/stable/interactive/notebook.html</a></p>
</blockquote>
<h3 id="2-1-探索用户数据"><a href="#2-1-探索用户数据" class="headerlink" title="2.1 探索用户数据"></a>2.1 探索用户数据</h3><figure class="highlight plain"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">user_data = sc.textFile(&quot;/Users/hp/ghome/ml/ml-100k/u.user&quot;)</span><br><span class="line">user_data.first()</span><br><span class="line">user_data.take(5)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">user_fields = user_data.map(lambda line: line.split(&quot;|&quot;))</span><br><span class="line">num_users = user_fields.map(lambda fields: fields[0]).count()</span><br><span class="line">num_genders = user_fields.map(lambda fields: fields[2]).distinct().count()</span><br><span class="line">num_occupations = user_fields.map(lambda fields: fields[3]).distinct().count()</span><br><span class="line">num_zipcodes = user_fields.map(lambda fields: fields[4]).distinct().count()</span><br><span class="line">print &quot;Users: %d, genders: %d, occupations: %d, ZIP codes: %d&quot; % (num_users, num_genders, num_occupations, num_zipcodes)</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Users: 943, genders: 2, occupations: 21, ZIP codes: 795</span><br></pre></td></tr></table></figure>
<p>matplotlib的hist个直方图，以分析用户年龄的分布情况：</p>
<p><strong>age distribution</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages = user_fields.map(lambda x: int(x[1])).collect()</span><br><span class="line">hist(ages, bins=20, color=&apos;lightblue&apos;, normed=True)</span><br><span class="line">fig = matplotlib.pyplot.gcf()</span><br><span class="line">fig.set_size_inches(16, 10)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-3.1.png" alt="screenshow?key=15055650f47cff956148"></p>
<p><strong>occupation distribution</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count_by_occupation = user_fields.map(lambda fields: (fields[3], 1)).reduceByKey(lambda x, y: x + y).collect()</span><br><span class="line"></span><br><span class="line">x_axis1 = np.array([c[0] for c in count_by_occupation])</span><br><span class="line"></span><br><span class="line">y_axis1 = np.array([c[1] for c in count_by_occupation])</span><br><span class="line"></span><br><span class="line">print x_axis1</span><br><span class="line">[u&apos;administrator&apos; u&apos;retired&apos; u&apos;lawyer&apos; u&apos;none&apos; u&apos;student&apos; u&apos;technician&apos;</span><br><span class="line"> u&apos;programmer&apos; u&apos;salesman&apos; u&apos;homemaker&apos; u&apos;writer&apos; u&apos;doctor&apos;</span><br><span class="line"> u&apos;entertainment&apos; u&apos;marketing&apos; u&apos;executive&apos; u&apos;scientist&apos; u&apos;educator&apos;</span><br><span class="line"> u&apos;healthcare&apos; u&apos;librarian&apos; u&apos;artist&apos; u&apos;other&apos; u&apos;engineer&apos;]</span><br><span class="line"></span><br><span class="line">print y_axis1</span><br><span class="line">[ 79  14  12   9 196  27  66  12   7  45   7  18  26  32  31  95  16  51</span><br><span class="line">  28 105  67]</span><br></pre></td></tr></table></figure>
<p>plt.xticks(rotation=30)之类的代码 是 美化条形图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pos = np.arange(len(x_axis))</span><br><span class="line">width = 1.0</span><br><span class="line"></span><br><span class="line">ax = plt.axes()</span><br><span class="line">ax.set_xticks(pos + (width / 2))</span><br><span class="line">ax.set_xticklabels(x_axis)</span><br><span class="line"></span><br><span class="line">plt.bar(pos, y_axis, width, color=&apos;lightblue&apos;)</span><br><span class="line">plt.xticks(rotation=30)</span><br><span class="line">fig = matplotlib.pyplot.gcf()</span><br><span class="line">fig.set_size_inches(16, 10)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-3.2.png" alt="screenshow?key=15057f015ac5712d9a83"></p>
<p>Spark对RDD提供了一个名为countByValue的便捷函数</p>
<figure class="highlight plain"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">count_by_occupation2 = user_fields.map(lambda fields: fields[3]).countByValue()</span><br><span class="line">print &quot;Map-reduce approach:&quot;</span><br><span class="line">print dict(count_by_occupation2)</span><br><span class="line">print &quot;&quot;</span><br><span class="line">print &quot;countByValue approach:&quot;</span><br><span class="line">print dict(count_by_occupation)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-探索电影数据"><a href="#2-2-探索电影数据" class="headerlink" title="2.2 探索电影数据"></a>2.2 探索电影数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movie_data = sc.textFile(&quot;/PATH/ml-100k/u.item&quot;)</span><br><span class="line">print movie_data.first()</span><br><span class="line">num_movies = movie_data.count()</span><br><span class="line">print &quot;Movies: %d&quot; % num_movies</span><br></pre></td></tr></table></figure>
<p>1|Toy Story (1995)|01-Jan-1995||<a href="http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0" target="_blank" rel="external">http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0</a><br>Movies: 1682</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def convert_year(x):</span><br><span class="line">  try:</span><br><span class="line">    return int(x[-4:])</span><br><span class="line">  except:</span><br><span class="line">    return 1900</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movie_fields = movie_data.map(lambda lines: lines.split(&quot;|&quot;))</span><br><span class="line">years = movie_fields.map(lambda fields: fields[2]).map(lambda x: convert_year(x))</span><br><span class="line"></span><br><span class="line">years_filtered = years.filter(lambda x: x != 1900)</span><br><span class="line"></span><br><span class="line">movie_ages = years_filtered.map(lambda yr: 1998-yr).countByValue()</span><br><span class="line">values = movie_ages.values()</span><br><span class="line">bins = movie_ages.keys()</span><br><span class="line">hist(values, bins=bins, color=&apos;lightblue&apos;, normed=True)</span><br><span class="line">fig = matplotlib.pyplot.gcf()</span><br><span class="line">fig.set_size_inches(16,10)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-3.3.png" alt="screenshow?key=150556f33e22a36bb651"></p>
<h3 id="2-3-探索评级数据"><a href="#2-3-探索评级数据" class="headerlink" title="2.3 探索评级数据"></a>2.3 探索评级数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rating_data = sc.textFile(&quot;/Users/hp/ghome/ml/ml-100k/u.data&quot;)</span><br><span class="line">print rating_data.first()</span><br><span class="line">num_ratings = rating_data.count()</span><br><span class="line">print &quot;Ratings: %d&quot; % num_ratings</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rating_data = rating_data.map(lambda line: line.split(&quot;\t&quot;))</span><br><span class="line">ratings = rating_data.map(lambda fields: int(fields[2]))</span><br><span class="line">max_rating = ratings.reduce(lambda x, y: max(x, y))</span><br><span class="line">min_rating = ratings.reduce(lambda x, y: min(x, y))</span><br><span class="line">mean_rating = ratings.reduce(lambda x, y: x + y) / num_ratings</span><br><span class="line">median_rating = np.median(ratings.collect())</span><br><span class="line">ratings_per_user = num_ratings / num_users</span><br><span class="line">ratings_per_movie = num_ratings / num_movies</span><br><span class="line">print &quot;Min rating: %d&quot; % min_rating</span><br><span class="line">print &quot;Max rating: %d&quot; % max_rating</span><br><span class="line">print &quot;Average rating: %2.2f&quot; % mean_rating</span><br><span class="line">print &quot;Median rating: %d&quot; % median_rating</span><br><span class="line">print &quot;Average # of ratings per user: %2.2f&quot; % ratings_per_user</span><br><span class="line">print &quot;Average # of ratings per movie: %2.2f&quot; % ratings_per_movie</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Max rating: 5<br>Average rating: 3.00<br>Median rating: 4<br>Average # of ratings per user: 106.00<br>Average # of ratings per movie: 59.00</p>
</blockquote>
<p>Spark对RDD也提供一个名为states的函数。该函数包含一个数值变量用于做类似的统计：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ratings.stats()</span><br><span class="line"></span><br><span class="line">其输出为：</span><br><span class="line">(count: 100000, mean: 3.52986, stdev: 1.12566797076, max: 5.0, min: 1.0)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count_by_rating = ratings.countByValue()</span><br><span class="line">x_axis = np.array(count_by_rating.keys())</span><br><span class="line">y_axis = np.array([float(c) for c in count_by_rating.values()])</span><br><span class="line"># 这里对y轴正则化，使它表示百分比</span><br><span class="line">y_axis_normed = y_axis / y_axis.sum()</span><br><span class="line">pos = np.arange(len(x_axis))</span><br><span class="line">width = 1.0</span><br><span class="line"></span><br><span class="line">ax = plt.axes()</span><br><span class="line">ax.set_xticks(pos + (width / 2))</span><br><span class="line">ax.set_xticklabels(x_axis)</span><br><span class="line"></span><br><span class="line">plt.bar(pos, y_axis_normed, width, color=&apos;lightblue&apos;)</span><br><span class="line">plt.xticks(rotation=30)</span><br><span class="line">fig = matplotlib.pyplot.gcf()</span><br><span class="line">fig.set_size_inches(16, 10)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-3.4.png" alt="screenshow?key=1505422e3494afb95855"></p>
<p><strong>各个用户评级次数的分布情况</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_ratings_grouped = rating_data.map(lambda fields: (int(fields[0]), int(fields[2]))).groupByKey()</span><br><span class="line"></span><br><span class="line">user_ratings_byuser = user_ratings_grouped.map(lambda (k, v): (k, len(v)))</span><br><span class="line">user_ratings_byuser.take(10)</span><br><span class="line"></span><br><span class="line">Out[91]:</span><br><span class="line">[(2, 62),</span><br><span class="line"> (4, 24),</span><br><span class="line"> (6, 211),</span><br><span class="line"> (8, 59),</span><br><span class="line"> (10, 184),</span><br><span class="line"> (12, 51),</span><br><span class="line"> (14, 98),</span><br><span class="line"> (16, 140),</span><br><span class="line"> (18, 277),</span><br><span class="line"> (20, 48)]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_ratings_byuser_local = user_ratings_byuser.map(lambda (k, v): v).collect()</span><br><span class="line">hist(user_ratings_byuser_local, bins=200, color=&apos;lightblue&apos;, normed=True)</span><br><span class="line">fig = matplotlib.pyplot.gcf()</span><br><span class="line">fig.set_size_inches(16,10)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spark/spark-ml-3.5.png" alt="screenshow?key=15056b5ffb7672cee5d1"></p>
<h2 id="3-处理与转换数据"><a href="#3-处理与转换数据" class="headerlink" title="3. 处理与转换数据"></a>3. 处理与转换数据</h2><p><strong>非规整数据和缺失数据的填充</strong></p>
<h2 id="4-从数据中提取有用特征"><a href="#4-从数据中提取有用特征" class="headerlink" title="4. 从数据中提取有用特征"></a>4. 从数据中提取有用特征</h2><p>在完成对数据的初步探索、处理和清理后，便可从中提取可供机器学习模型训练用的特征。</p>
<p>特征（<code>feature</code>）指那些用于<strong><em>模型训练的变量</em></strong>。每一行数据包含可供提取到训练样本中的各种信息。</p>
<p>几乎所有机器学习模型都是与用向量表示的数值特征打交道；需将原始数据转换为数值。</p>
<p>特征可以概括地分为如下几种。</p>
<ul>
<li>数值特征（numerical feature）：这些特征通常为实数或整数，比如之前例子中提到的年龄。</li>
<li>类别特征（categorical feature）：我们数据集中的用户性别、职业或电影类别便是这类。</li>
<li>文本特征（text feature）：它们派生自数据中的文本内容，比如电影名、描述或是评论。</li>
<li>其他特征：… 地理位置则可由经纬度或地理散列（geohash）表示。</li>
</ul>
<h3 id="4-1-数值特征"><a href="#4-1-数值特征" class="headerlink" title="4.1 数值特征"></a>4.1 数值特征</h3><p>原始的数值和一个数值特征之间的区别是什么？</p>
<p>机器学习模型中所学习的是各个特征所对应的向量的权值。这些权值在<code>特征值</code>到输出或是<code>目标变量</code>（指在监督学习模型中）is very important。</p>
<p>当数值特征仍处于原始形式时，其可用性相对较低，但可以转化为更有用的表示形式。</p>
<p>如 (位置信息 : 原始位置信息（比如用经纬度表示的），信息可用性很低。 然若对位置进行聚合（比如聚焦为一个city or country），和特定输出 之间存在某种关联。</p>
<h3 id="4-2-类别特征"><a href="#4-2-类别特征" class="headerlink" title="4.2 类别特征"></a>4.2 类别特征</h3><p>将类别特征表示为数字形式，常可借助 k 之1（1-of-k）方法进行</p>
<p>比如，可取<code>occupation</code> 所有可能取值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all_occupations = user_fields.map(lambda fields: fields[3]). distinct().collect()</span><br><span class="line">all_occupations.sort()</span><br></pre></td></tr></table></figure>
<p>然可依次对各可能的职业分配序号（注意 从0开始编号）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx = <span class="number">0</span></span><br><span class="line">all_occupations_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> all_occupations:</span><br><span class="line">    all_occupations_dict[o] = idx</span><br><span class="line">    idx +=<span class="number">1</span></span><br><span class="line"><span class="comment"># 看一下“k之1”编码会对新的例子分配什么值</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Encoding of 'doctor': %d"</span> % all_occupations_dict[<span class="string">'doctor'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Encoding of 'programmer': %d"</span> % all_occupations_dict[<span class="string">'programmer'</span>]</span><br></pre></td></tr></table></figure>
<p>其输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Encoding of &apos;doctor&apos;: 2</span><br><span class="line">Encoding of &apos;programmer&apos;: 14</span><br></pre></td></tr></table></figure>
<h3 id="4-3-派生特征"><a href="#4-3-派生特征" class="headerlink" title="4.3 派生特征"></a>4.3 派生特征</h3><p>从原始数据派生特征的例子包括计算平均值、中位值、方差、和、差、最大值或最小值以及计数。从电影的发行年份和当前年份派生了新的movie age特征的。这类转换背后的想法常常是对数值数据进行某种概括，并期望它能让模型学习更容易。</p>
<p>数值特征到类别特征的转换也很常见，比如划分为区间特征。进行这类转换的变量常见的有年龄、地理位置和时间。</p>
<p><strong>如 ： 将时间戳转为类别特</strong></p>
<p>电影评级发生的时间</p>
<p>[‘afternoon’, ‘evening’, ‘morning’, ‘morning’, ‘morning’]</p>
<h3 id="4-4-文本特征"><a href="#4-4-文本特征" class="headerlink" title="4.4 文本特征"></a>4.4 文本特征</h3><p>文本特征也是一种类别特征或派生特征</p>
<p>NLP 便是专注于文本内容的处理、表示和建模的一个领域。</p>
<p>介绍一种简单且标准化的文本特征提取方法。该方法被称为词袋（bag-of-word）表示法。</p>
<p>词袋法将一段文本视为由其中的文本或数字组成的集合，其处理过程如下。</p>
<p><strong>bag-of-word</strong></p>
<p><strong>(1) 分词（tokenization）</strong></p>
<p>首先会应用某些分词方法来将文本分隔为一个由词（一般如单词、数字等）组成的集合。</p>
<p><strong>(2) 删除停用词（stop words removal)</strong></p>
<p>删除常见的单词，比如the、and和but（这些词被称作停用词）。</p>
<p><strong>(3) 提取词干（stemming）</strong>：</p>
<p>是指将各个词简化为其基本的形式或者干词。常见的例子如复数变为单数（比如dogs变为dog等）。提取的方法有很多种，文本处理算法库中常常会包括多种词干提取方法。</p>
<p><strong>(4) 向量化（vectorization）</strong> ：</p>
<p>向量来表示处理好的词。二元向量可能是最为简单的表示方式。它用1和0来分别表示是否存在某个词。从根本上说，这与之前提到的 k 之1编码相同。与 k 之1相同，它需要一个词的字典来实现词到索引序号的映射。随着遇到的词增多，各种词可能达数百万。由此，使用稀疏矩阵来表示就很关键。这种表示只记录某个词是否出现过，从而节省内存和磁盘空间，以及计算时间。</p>
<p><strong>提取简单的文本特征</strong></p>
<p>参见 : <a href="http://www.ituring.com.cn/tupubarticle/5567" target="_blank" rel="external">http://www.ituring.com.cn/tupubarticle/5567</a></p>
<p>现在每一个电影标题都被转换为一个稀疏向量。</p>
<h3 id="4-5-正则化特征"><a href="#4-5-正则化特征" class="headerlink" title="4.5 正则化特征"></a>4.5 正则化特征</h3><p>在将特征提取为向量形式后，一种常见的预处理方式是将数值数据正则化（normalization）。其背后的思想是将各个数值特征进行转换，以将它们的值域规范到一个标准区间内。正则化的方法有如下几种。</p>
<ul>
<li>正则化特征：这实际上是对数据集中的单个特征进行转换。比如减去平均值（特征对齐）或是进行标准的正则转换（以使得该特征的平均值和标准差分别为0和1）。</li>
<li>正则化特征向量：这通常是对数据中的某一行的所有特征进行转换，以让转换后的特征向量的长度标准化。也就是缩放向量中的各个特征以使得向量的范数为1（常指一阶或二阶范数）。</li>
</ul>
<p>向量正则化可通过numpy的norm函数来实现。具体来说，先计算一个随机向量的二阶范数，然后让向量中的每一个元素都除该范数，从而得到正则化后的向量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.seed(42)</span><br><span class="line">x = np.random.randn(10)</span><br><span class="line">norm_x_2 = np.linalg.norm(x)</span><br><span class="line">normalized_x = x / norm_x_2</span><br><span class="line">print &quot;x:\n%s&quot; % x</span><br><span class="line">print &quot;2-Norm of x: %2.4f&quot; % norm_x_2</span><br><span class="line">print &quot;Normalized x:\n%s&quot; % normalized_x</span><br><span class="line">print &quot;2-Norm of normalized_x: %2.4f&quot; % np.linalg.norm(normalized_x)</span><br></pre></td></tr></table></figure>
<p>其输出应该如下（上面将随机种子的值设为42，保证每次运行的结果相同）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x: [ 0.49671415 -0.1382643  0.64768854  1.52302986 -0.23415337 -0.23413696</span><br><span class="line">1.57921282  0.76743473 -0.46947439  0.54256004]</span><br><span class="line">2-Norm of x: 2.5908</span><br><span class="line">Normalized x: [ 0.19172213 -0.05336737  0.24999534  0.58786029 -0.09037871 -0.09037237  0.60954584  0.29621508 -0.1812081  0.20941776]</span><br><span class="line">2-Norm of normalized_x: 1.0000</span><br></pre></td></tr></table></figure>
<p><strong>用 MLlib 正则化特征</strong></p>
<p>Spark在其MLlib机器学习库中内置了一些函数用于特征的缩放和标准化。它们包括供标准正态变换的<code>StandardScaler</code>，以及提供与上述相同的特征向量正则化的 <code>Normalizer</code>。</p>
<p>比较一下MLlib的Normalizer与我们自己函数的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pyspark.mllib.feature import Normalizer</span><br><span class="line">normalizer = Normalizer()</span><br><span class="line">vector =sc.parallelize([x])</span><br></pre></td></tr></table></figure>
<p>在导入所需的类后，会要初始化Normalizer（其默认使用与之前相同的二阶范数）。注意用Spark时，大部分情况下Normalizer所需的输入为一个RDD（它包含numpy数值或MLlib向量）。作为举例，我们会从x向量创建一个单元素的RDD。</p>
<p>之后将会对我们的RDD调用Normalizer的transform函数。由于该RDD只含有一个向量，可通过first函数来返回向量到驱动程序。接着调用toArray函数来将该向量转换为numpy数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">normalized_x_mllib = normalizer.transform(vector).first().toArray()</span><br><span class="line">#最后来看一下之前打印过的那些值，并做个比较：</span><br><span class="line"></span><br><span class="line">print &quot;x:\n%s&quot; % x</span><br><span class="line">print &quot;2-Norm of x: %2.4f&quot; % norm_x_2</span><br><span class="line">print &quot;Normalized x MLlib:\n%s&quot; % normalized_x_mllib</span><br><span class="line">print &quot;2-Norm of normalized_x_mllib: %2.4f&quot; % np.linalg.norm(normalized_x_mllib)</span><br></pre></td></tr></table></figure>
<p>相比自己编写的函数，使用 MLlib内置的函数 更方便</p>
<h3 id="4-6-用软件包提取特征"><a href="#4-6-用软件包提取特征" class="headerlink" title="4.6 用软件包提取特征"></a>4.6 用软件包提取特征</h3><p>特征提取可借助的软件包有scikit-learn、gensim、scikit-image、matplotlib、Python的NLTK、Java编写的OpenNLP以及用Scala编写的Breeze和Chalk。Breeze自Spark 1.0开始就成为Spark的一部分了。Breeze有线性代数功能。</p>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>了解 如何导入、处理和清理数据，如何将原始数据转为<strong>特征向量</strong>以供模型训练的常见方法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Machine Learning p2 - 设计机器学习系统]]></title>
      <url>http://iequa.com/2016/09/08/spark/spark-machine-learning-p2-design-ml-sys/</url>
      <content type="html"><![CDATA[<p>《Spark Machine Learing》 Reading Notes ： 如何设计机器学习系统 moiveStream</p>
<a id="more"></a>
<style>
img {
        display: block !important;
        height: 400px;
        width: 500px;
        margin-left: 180px !important;
}
</style>

<h2 id="1-原始-MovieStream-介绍"><a href="#1-原始-MovieStream-介绍" class="headerlink" title="1. 原始 MovieStream 介绍"></a>1. 原始 MovieStream 介绍</h2><p><img src="/images/spark/spark-ml-2.1.jpg" alt="MovieStream"></p>
<h3 id="1-1-个性化"><a href="#1-1-个性化" class="headerlink" title="1.1 个性化"></a>1.1 个性化</h3><p><code>个性化</code> 是根据各因素来改变用户体验和<code>呈现给用户内容</code>。这些因素可能包括用户的行为数据和外部因素。</p>
<p><code>推荐</code>（recommendation）, 常指向用户呈现一个他们可能感兴趣的物品列表。</p>
<p>个性化和推荐十分相似, 根据因素改变搜索的呈现不同用户不同内容，这是隐式个性化</p>
<h3 id="1-2-客户细分"><a href="#1-2-客户细分" class="headerlink" title="1.2 客户细分"></a>1.2 客户细分</h3><p>目标营销用与推荐类似的方法从用户群中找出要营销的对象。一般来说，推荐和个性化的应用场景都是一对一，根据用户的特征进行分组，并可能参考行为数据。也可能使用了某种机器学习模型，比如 <code>聚类</code>。</p>
<h3 id="1-3-预测建模"><a href="#1-3-预测建模" class="headerlink" title="1.3 预测建模"></a>1.3 预测建模</h3><p><code>预测性分析</code> 从某种意义上说还覆盖推荐、个性化和目标营销。用预测建模（predictive modeling）来表示其他做预测的模型。借助活动记录、收入数据以及内容属性，MovieStream 可以创建一个回归模型（regression model）来预测新电影的市场表现。</p>
<p>另外，我们也可使用分类模型（classificaiton model）来对只有部分数据的新电影自动分配标签、关键字或分类。</p>
<h2 id="2-机器学习模型的种类"><a href="#2-机器学习模型的种类" class="headerlink" title="2. 机器学习模型的种类"></a>2. 机器学习模型的种类</h2><p><code>supervised learning</code>：这种方法使用已标记数据来学习。<code>推荐引擎</code>、<code>回归</code>和<code>分类</code>便是例子。它们所使用的标记数据可以是用户对电影的评级（对推荐来说）、电影标签（对上述分类例子来说）或是收入数字（对回归预测来说）.</p>
<p><code>unsupervised learning</code>：一些模型的学习过程不需要标记数据，我们称其为无监督学习。这类模型试图学习或是提取数据背后的结构或从中抽取最为重要的特征。<code>聚类</code>、<code>降维</code>和<code>文本处理</code>的某些特征提取都是无监督学习.</p>
<h2 id="3-数据驱动ML系统的组成"><a href="#3-数据驱动ML系统的组成" class="headerlink" title="3. 数据驱动ML系统的组成"></a>3. 数据驱动ML系统的组成</h2><p><img src="/images/spark/spark-ml-2.2.jpg" alt="机器学习流程"></p>
<h3 id="3-1-数据获取与存储"><a href="#3-1-数据获取与存储" class="headerlink" title="3.1 数据获取与存储"></a>3.1 数据获取与存储</h3><p>MovieStream 的数据通常来自用户活动.</p>
<p>要存储的数据包括：原始数据、即时处理后的数据，以及可用于生产系统的最终建模结果。</p>
<p><strong>数据存储</strong></p>
<ol>
<li><strong>文件系统</strong> : 如 HDFS、Amazon S3 等；</li>
<li><strong>SQL数据库</strong> : 如 MySQL、PostgreSQL；</li>
<li><strong>NoSQL</strong> : -如 HBase、Cassandra、Mongodb；</li>
<li><strong>搜索引擎</strong> : 如 Solr 、Elasticsearch；</li>
<li><strong>流数据</strong> : – 如 Kafka、Flume、Amazon Kinesis</li>
</ol>
<h3 id="3-2-数据清理与转换"><a href="#3-2-数据清理与转换" class="headerlink" title="3.2 数据清理与转换"></a>3.2 数据清理与转换</h3><p>大部分机器学习模型所处理的都是 <code>feature</code>。特征 通常是输入变量所对应的可用于模型的数值表示。</p>
<p>原始数据 预处理 几种 情况</p>
<ol>
<li>数据过滤</li>
<li>合并多个数据源</li>
<li>数据汇总</li>
</ol>
<p>对许多模型类型来说，这种表示就是包含 <strong>数值数据的</strong> <code>向量</code> or <code>矩阵</code>。</p>
<p>将类别数据（比如地理位置所在的国家或是电影的类别）编码为对应的数值表示。</p>
<ol>
<li>文本数据提取有用信息。</li>
<li>处理图像或是音频数据。</li>
<li>数值数据常被转换为类别数据以减少某个变量的可能值的数目。例如将年龄分为 601, 602…</li>
<li>对特征进行正则化、标准化，以保证同一模型的不同输入变量的值域相同。</li>
</ol>
<p>这些数据清理、探索、聚合和转换步骤，都能通过Spark核心API、SparkSQL引擎和其他外部Scala、Java或Python包做到。借助 Spark 的 Hadoop功能 还能实现上述多种存储系统上的读写。</p>
<h3 id="3-3-模型训练与测试回路"><a href="#3-3-模型训练与测试回路" class="headerlink" title="3.3 模型训练与测试回路"></a>3.3 模型训练与测试回路</h3><p>当数据已转换为可用于模型的形式，便可开始模型的训练和测试。</p>
<p>在训练数据集上运行模型并在测试数据集（即为评估模型而预留的数据，在训练阶段模型没接触过该数据）上测试其效果，这个过程一般相对直接，被称作交叉验证（cross-validation）。</p>
<p>Spark MLlib 来实现对各种机器学习方法的模型训练、评估以及交叉验证。</p>
<h3 id="3-4-模型部署与整合"><a href="#3-4-模型部署与整合" class="headerlink" title="3.4 模型部署与整合"></a>3.4 模型部署与整合</h3><p>通过训练测试循环找出最佳模型后，要让它能得出可付诸实践的预测，还需将其部署到生产系统中。</p>
<p>这个过程一般要将已训练的模型导入特定的数据存储中。</p>
<h3 id="3-5-模型监控与反馈"><a href="#3-5-模型监控与反馈" class="headerlink" title="3.5 模型监控与反馈"></a>3.5 模型监控与反馈</h3><p>监控机器学习系统在生产环境下的表现十分重要。</p>
<p>同样值得注意的是，模型准确度和预测效果只是现实中系统表现的一部分。</p>
<p>我们可以尽可能在生产系统中部署不同的模型，通过调整它们而优化业务指标。实践中，这通常通过在线分割测试（<code>live split test</code>）进行。</p>
<p>模型反馈（<code>model feedback</code>），指通过用户的行为来对模型的预测进行反馈的过程。在现实系统中，模型的应用将影响用户的决策和潜在行为，从而反过来将从根本上改变模型自己将来的训练数据。</p>
<h3 id="3-6-批处理-实时方案选择"><a href="#3-6-批处理-实时方案选择" class="headerlink" title="3.6 批处理/实时方案选择"></a>3.6 批处理/实时方案选择</h3><p>常见的批处理方法。模型用所有数据或一部分数据进行周期性的重新训练。由于上述流程会花费一定的时间，这就使得批处理方法难以在新数据到达时立即完成模型的更新。</p>
<p>存在一类名为在线学习（online learning）的机器学习方法。它们在新数据到达时便能立即更新模型，从而使实时系统成为可能。常见的例子有对线性模型的在线优化算法，如<code>随机梯度下降法</code>。</p>
<h2 id="4-机器学习系统架构"><a href="#4-机器学习系统架构" class="headerlink" title="4. 机器学习系统架构"></a>4. 机器学习系统架构</h2><p><img src="/images/spark/spark-ml-2.3.jpg" alt="机器学习系统架构"></p>
<p>机器学习流程示意图的内容：</p>
<ul>
<li>收集与用户、用户行为和电影标题有关的数据；</li>
<li>将这些数据转为特征；</li>
<li>模型训练，包括训练-测试和模型选择环节；</li>
<li>将已训练模型部署到在线服务系统，并用于离线处理；</li>
<li>通过推荐和目标页面将模型结果反馈到MovieStream站点；</li>
<li>将模型结果返回到MovieStream的个性化营销渠道；</li>
<li>使用离线模型来为MovieSteam的各个团队提供工具，以帮助其理解用户的行为、内容目录的特点和业务收入的驱动因素。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Data Mining and Analysis environment]]></title>
      <url>http://iequa.com/2016/08/02/python/py-language-1-data-analysis-environment/</url>
      <content type="html"><![CDATA[<p>这是用 Python 进行数据分析挖掘的一小部分，包括 高维数组、数值计算、机器学习、神经网络 和 语言模型等。</p>
<a id="more"></a>
<h2 id="1-Python-data-analysis-intro"><a href="#1-Python-data-analysis-intro" class="headerlink" title="1. Python data analysis intro"></a>1. Python data analysis intro</h2><p><a href="http://www.python.org" target="_blank" rel="external">Python</a></p>
<ul>
<li>优雅的语法和动态类型</li>
<li>拥有高级数据结构、OO</li>
<li>Functional Programming</li>
<li>解释性、胶水语言，开发效率高</li>
<li>库丰富, NumPy, SciPy, Matplotlib, Pandas</li>
<li>适合于 Scientific Computing、Mathematical Modeling、Data mining …</li>
</ul>
<p><strong>import <code>future</code> feature</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __futrue__ import print_function</span><br><span class="line">from __futrue__ import division</span><br></pre></td></tr></table></figure>
<p><strong>install third package</strong></p>
<blockquote>
<p>三种方式  </p>
<ol>
<li>下载源代码自行安装 : 安装灵活， 但需要自行解决上级依赖问题。  </li>
<li>用 pip 安装 : 比较方便，自动解决上级依赖问题  </li>
<li>系统自带的安装方式 : apt-get or brew ..</li>
</ol>
</blockquote>
<h3 id="1-1-Install-pip"><a href="#1-1-Install-pip" class="headerlink" title="1.1 Install pip"></a>1.1 Install pip</h3><blockquote>
<p>pip 是安装python包的工具，提供了安装包，列出已经安装的包，升级包以及卸载包的功能。<br>pip 是对easy_install的取代，提供了和easy_install相同的查找包的功能</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo python get-pip.py</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改pip源 （可选）</span><br><span class="line">由于天朝原因,使用pip安装一些模块会特别慢甚至无法下载,因此我们需要修改pip的源到国内的一些镜像地址.</span><br><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">vim pip.conf</span><br><span class="line">添加以下两行</span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.v2ex.com/simple</span><br><span class="line">把index-url的值设置为自己实际源的地址.</span><br><span class="line">至此pip源修改成功,以后使用pip安装模块时都会从这个源去下载安装.</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  tar.gz ll</span><br><span class="line">-rw-r--r-- 1 hp staff   1138794 Mar 11 16:09 pip-8.1.0.tar.gz</span><br><span class="line">-rw-r--r-- 1 hp staff    630700 Mar 11 13:38 setuptools-18.1.tar.gz</span><br><span class="line">tar -xvf setuptools-18.1.tar.gz</span><br><span class="line">tar -xvf pip-8.1.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> setuptools-18.1</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> pip-9.0.1/</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>9.0.1 见 <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">https://pypi.python.org/pypi/pip</a></p>
</blockquote>
<p><strong>ipython</strong></p>
<blockquote>
<p>sudo pip install –upgrade ipython –ignore-installed six<br>sudo pip install notebook</p>
</blockquote>
<p>startup ipython notebook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ipython notebook</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PYSPARK_DRIVER_PYTHON=ipython PYSPARK_DRIVER_PYTHON_OPTS=<span class="string">"notebook --ip=192.168.140.159"</span> $SPARK_HOME/bin/pyspark</span><br></pre></td></tr></table></figure>
<h2 id="2-Python-Tools-for-data-analysis"><a href="#2-Python-Tools-for-data-analysis" class="headerlink" title="2. Python Tools for data analysis"></a>2. Python Tools for data analysis</h2><table>
<thead>
<tr>
<th>Extension lib</th>
<th>introduction</th>
</tr>
</thead>
<tbody>
<tr>
<td>Numpy</td>
<td>提供数组支持，以及相应的高效处理函数</td>
</tr>
<tr>
<td>Scipy</td>
<td>提供矩阵支持，以及矩阵相关的数值计算模块</td>
</tr>
<tr>
<td>Matplotlib</td>
<td>数据可视化工具，作图库</td>
</tr>
<tr>
<td>Pandas</td>
<td>数据分析和探索工具</td>
</tr>
<tr>
<td>StatsModels</td>
<td>统计建模和计量经济学，包括描述统计，统计模型估计和推断</td>
</tr>
<tr>
<td>Scikit-Learn</td>
<td>支持回归，分类，聚类 等强大的机器学习库</td>
</tr>
<tr>
<td>Keras</td>
<td>深度学习库，用于建立神经网络以及 deep learning model</td>
</tr>
<tr>
<td>Gensim</td>
<td>用来做 text topic model 的库</td>
</tr>
<tr>
<td>Pillow</td>
<td>旧版的PIL, 图片处理相关</td>
</tr>
<tr>
<td>OpenCV</td>
<td>video 处理相关</td>
</tr>
<tr>
<td>GMPY2</td>
<td>高精度计算相关</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="2-1-Numpy"><a href="#2-1-Numpy" class="headerlink" title="2.1 Numpy"></a>2.1 Numpy</h3><p><a href="www.numpy.prg">Numpy</a> 提供了数据功能, 后续 Scipy、Matplotlib、Pandas 等都依赖于它。    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo pip install numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"hello world 3.0 !"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Scipy"><a href="#2-2-Scipy" class="headerlink" title="2.2 Scipy"></a>2.2 Scipy</h3><blockquote>
<p>Numpy 提供了多维数据功能，但它只是数组，并不是矩阵。Scipy 提供了真正的矩阵，以及大量矩阵运算的对象和函数。<br>Scipy 依赖于 Numpy</p>
</blockquote>
<h3 id="2-3-Matplotlib"><a href="#2-3-Matplotlib" class="headerlink" title="2.3 Matplotlib"></a>2.3 Matplotlib</h3><blockquote>
<p>著名的绘图库，主要用于二维绘图，当然也可以进行三维绘图。<br>sudo pip install matplotlib </p>
</blockquote>
<h3 id="2-4-Pandas"><a href="#2-4-Pandas" class="headerlink" title="2.4 Pandas"></a>2.4 Pandas</h3><p>Pandas 是 Python 下最强大的数据分析 Tool，没有之一。Pandas 构建在 Numpy 之上。  </p>
<p><strong>Pandas Function</strong></p>
<ol>
<li>类SQL，CRUD</li>
<li>数据处理函数</li>
<li>时间序列分析功能</li>
<li>灵活处理缺失数据</li>
</ol>
<blockquote>
<p>sudo pip install pandas<br>sudo pip install xlrd<br>sudo pip install xlwt<br>《利用python进行数据分析》讲解详细，针对 Pandas。  </p>
</blockquote>
<p>Pandas 基本的数据结构是 : Series 和 DataFrame (它的每一列都是一个Series)。每个 Series 都会有一个对应的 Index，用来标记元。(Index类似于 SQL 主键)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]) <span class="comment"># 创建一个序列 s</span></span><br><span class="line">d2 = pd.DataFrame(s)</span><br><span class="line"></span><br><span class="line">d = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]) <span class="comment"># 创建一个 table</span></span><br><span class="line"></span><br><span class="line">d.head() <span class="comment"># 默认预览前 5 行</span></span><br><span class="line"></span><br><span class="line">d.describe() <span class="comment"># 数据基本统计量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">pd.read_excel(<span class="string">'data.xls'</span>) <span class="comment"># 读取 Excel 文件, 创建 DataFrame.</span></span><br><span class="line"><span class="comment"># pd.read_csv('data.csv', encoding='utf-8') # 读取文本, 一般指定 encoding</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-StatsModels"><a href="#2-5-StatsModels" class="headerlink" title="2.5 StatsModels"></a>2.5 StatsModels</h3><blockquote>
<p>StatsModels 主要是对，数据的读取、处理、探索，更加注重数据的统计建模分析，有 R 语言味道。<br>StatsModels 与 Pandas 结合, 成为 Python 下强大的数据挖掘组合。<br>sudo pip install StatsModels</p>
</blockquote>
<h3 id="2-6-Scikit-Learn"><a href="#2-6-Scikit-Learn" class="headerlink" title="2.6 Scikit-Learn"></a>2.6 Scikit-Learn</h3><blockquote>
<p>Scikit-Learn 强大的 ML 工具包。包括 数据预处理、分类、回归、聚类、预测 和 模型分析等。<br>Scikit-Learn 依赖于 Numpy、Scipy、Matplotlib。</p>
</blockquote>
<p><strong>install</strong></p>
<p>pip install scikit-learn 用 pip 安装这个包之后，在使用的时候会出现 ValueError: numpy.dtype has the wrong 等错误。</p>
<p><strong>solution fun</strong></p>
<p>sudo pip install cython<br>git clone <a href="https://github.com/scikit-learn/scikit-learn" target="_blank" rel="external">https://github.com/scikit-learn/scikit-learn</a><br>sudo make<br>sudo python setup.py install</p>
<blockquote>
<p>不安装 cython ，安装 scikit-learn 会报错。<br>这种方式 安装 scikit-learn 过程中的一些错误或警告不需要管。安装完成测试使用正常<br>pip list<br>scikit-learn (0.18.dev0)<br>scipy (0.13.0b1)</p>
</blockquote>
<h3 id="2-7-Keras"><a href="#2-7-Keras" class="headerlink" title="2.7 Keras"></a>2.7 Keras</h3><blockquote>
<p>神经网络model</p>
</blockquote>
<h3 id="2-8-Gensim"><a href="#2-8-Gensim" class="headerlink" title="2.8 Gensim"></a>2.8 Gensim</h3><blockquote>
<p>topic modelling for humans！NLP</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch installation plugins]]></title>
      <url>http://iequa.com/2016/05/17/elasticsearch/es-install-plugins/</url>
      <content type="html"><![CDATA[<p> Elasticsearch 扩展性非常好，有很多官方和第三方开发的插件</p>
<a id="more"></a>
<h2 id="1-Elasticsearch-Install"><a href="#1-Elasticsearch-Install" class="headerlink" title="1. Elasticsearch-Install"></a>1. Elasticsearch-Install</h2><p>官网 : <a href="https://www.elastic.co/" target="_blank" rel="external">https://www.elastic.co/</a></p>
<p><strong>Install es</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">download elasticsearch-1.7.5.tar.gz</span><br><span class="line">cd usr/local/mySoft/deploy</span><br><span class="line">tar -xvf elasticsearch-1.7.5.tar.gz</span><br><span class="line">ln -s /usr/local/mySoft/deploy/elasticsearch-1.7.5/ elasticsearch</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export ES_HOME=/usr/local/xSoft/elasticsearch</span><br></pre></td></tr></table></figure>
<p><strong>Config es</strong></p>
<p>$ES_HOME/config/elasticsearch.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.name: elasticsearch_x</span><br><span class="line">node.name=test-node1</span><br></pre></td></tr></table></figure>
<p><strong>Startup</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch</span><br><span class="line"></span><br><span class="line">./bin/elasticsearch -d -Xms512m -Xmx512m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行之后，会产生 data 和 logs 目录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  elasticsearch ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r--  1 hp staff 11358 Feb  2 17:24 LICENSE.txt</span><br><span class="line">-rw-r--r--  1 hp staff   150 Feb  2 17:24 NOTICE.txt</span><br><span class="line">-rw-r--r--  1 hp staff  8700 Feb  2 17:24 README.textile</span><br><span class="line">drwxr-xr-x 14 hp staff   476 May 26 15:42 bin/</span><br><span class="line">drwxr-xr-x  4 hp staff   136 May 27 11:03 config/</span><br><span class="line">drwxr-xr-x  3 hp staff   102 May 26 11:01 data/</span><br><span class="line">drwxr-xr-x 26 hp staff   884 May 26 09:58 lib/</span><br><span class="line">drwxr-xr-x  7 hp staff   238 May 27 09:58 logs/</span><br><span class="line">drwxr-xr-x  7 hp staff   238 May 27 10:48 plugins/</span><br><span class="line">➜  elasticsearch</span><br></pre></td></tr></table></figure>
<p><strong>Verify</strong></p>
<p>open <a href="http://ip:9200/" target="_blank" rel="external">http://ip:9200/</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span> : <span class="number">200</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"node01"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch_x"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"1.7.5"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"00f95f4ffca6de89d68b7ccaf80d148f1f70e4d4"</span>,</span><br><span class="line">    <span class="attr">"build_timestamp"</span> : <span class="string">"2016-02-02T09:55:30Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"4.10.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Elasticsearch-Head"><a href="#2-Elasticsearch-Head" class="headerlink" title="2. Elasticsearch-Head"></a>2. Elasticsearch-Head</h2><p>ElasticSearch-Head 是一个与Elastic集群（Cluster）相交互的 Web 前台。</p>
<p><img src="/images/elastic/es-header.png" alt="header.png"></p>
<p>ES-Head的主要作用</p>
<ul>
<li>它展现ES集群的拓扑结构，并且可以通过它来进行索引（Index）和节点（Node）级别的操作</li>
<li>它提供一组针对集群的查询API，并将结果以json和表格形式返回</li>
<li>它提供一些快捷菜单，用以展现集群的各种状态</li>
</ul>
<p><strong>Install-Verify</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch/bin/plugin install mobz/elasticsearch-head</span><br><span class="line">open ip:9200/_plugin/head/</span><br><span class="line">open ip:9200/_cluster/health?pretty</span><br></pre></td></tr></table></figure>
<h2 id="3-Elasticsearch-Kopf"><a href="#3-Elasticsearch-Kopf" class="headerlink" title="3. Elasticsearch-Kopf"></a>3. Elasticsearch-Kopf</h2><p>Kopf是一个ElasticSearch的管理工具，它也提供了对ES集群操作的API。</p>
<p><img src="/images/elastic/es-kopf.png" alt="613455-20160224102628443-1084839027.png"></p>
<p><strong>Install-Verify</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf/&#123;branch|version&#125;</span><br><span class="line">open http://localhost:9200/_plugin/kopf</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-Elasticsearch-bigdesk"><a href="#4-Elasticsearch-bigdesk" class="headerlink" title="4. Elasticsearch-bigdesk"></a>4. Elasticsearch-bigdesk</h2><p>Bigdesk为Elastic集群提供动态的图表与统计数据。</p>
<p><img src="/images/elastic/es-bigdesk.jpeg" alt="613455-20160224102646365-1432943551.jpg"></p>
<p><strong>Install-Verify</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/plugin -install lukas-vlcek/bigdesk</span><br><span class="line">删除bin/plugin --remove bigdesk</span><br><span class="line">open ip:9200/_plugin/bigdesk</span><br><span class="line">open ip:9200/_cluster/state?pretty</span><br></pre></td></tr></table></figure>
<h2 id="5-Elasticsearch-service"><a href="#5-Elasticsearch-service" class="headerlink" title="5. Elasticsearch-service"></a>5. Elasticsearch-service</h2><p>elasticsearch 作为一个系统service应用 ，可以安装elasticsearch-servicewrapper插件</p>
<p><a href="https://github.com/elastic/elasticsearch-servicewrapper" target="_blank" rel="external">github-es-service</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/elasticsearch/elasticsearch-servicewrapper</span><br><span class="line"></span><br><span class="line">下载该插件后，解压缩。将service目录拷贝到elasticsearch安装目录的bin目录下。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  service ll</span><br><span class="line">total 76</span><br><span class="line">-rwxr-xr-x  1 hp staff 55710 May 26 15:42 elasticsearch*</span><br><span class="line">-rw-r--r--  1 hp staff  2610 May 26 15:42 elasticsearch.bat</span><br><span class="line">-rw-r--r--  1 hp staff  4754 May 26 15:42 elasticsearch.conf</span><br><span class="line">-rwxr-xr-x  1 hp staff    64 May 26 15:42 elasticsearch32*</span><br><span class="line">-rwxr-xr-x  1 hp staff    64 May 26 15:42 elasticsearch64*</span><br><span class="line">drwxr-xr-x 16 hp staff   544 May 26 15:42 exec/</span><br><span class="line">drwxr-xr-x 17 hp staff   578 May 26 15:42 lib/</span><br><span class="line">➜  service</span><br></pre></td></tr></table></figure>
<p>运行这个插件的好处是：elasticsearch 需要的jvm参数和其它配置都已经配置好了，非常方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh elasticsearch start;</span><br><span class="line">sh elasticsearch restart;</span><br><span class="line">sh elasticsearch stop;</span><br></pre></td></tr></table></figure>
<p>在实际生产环境中，该插件基本把参数都配置好了。我们只需要修改一下jvm分配的内存空间就好了，如 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set.default.ES_HEAP_SIZE=16384</span><br><span class="line">set.default.ES_MIN_MEM=16384</span><br><span class="line">set.default.ES_MAX_MEM=19660</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次运行 elaticsearch 会产生 data-dir 与 log-dir</p>
<p>service log 在 logs/service.log 中。</p>
<p><a href="https://github.com/elastic/elasticsearch-servicewrapper" target="_blank" rel="external">more_info-service</a></p>
<p>Mac OS X Mountain Lion missing 32-bit Java<br>apple 6 maybe could</p>
</blockquote>
<hr>
<h2 id="6-Http-basic-server-plugin"><a href="#6-Http-basic-server-plugin" class="headerlink" title="6. Http-basic-server-plugin"></a>6. Http-basic-server-plugin</h2><p>不要裸奔，穿一套比基尼吧。</p>
<p>做一个简单的HTTP认证，elasticsearch-http-basic 提供了针对 ES HTTP 连接 的 IP白名单、密码权限 和  信任代理功能。</p>
<p>github :<br><a href="https://github.com/Asquera/elasticsearch-http-basic" target="_blank" rel="external">Asquera_http_basic</a></p>
<p><strong>Install-Verify</strong></p>
<p>elasticsearch-http-basic还不支持ES标准的bin/plugin install [github-name]/[repo-name]的安装方式, 所以按照如下方式安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p plugins/http-basic; </span><br><span class="line">mv elasticsearch-http-basic-1.5.1.jar plugins/http-basic</span><br></pre></td></tr></table></figure>
<p><strong>Config http-basic param</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.basic.enabled: true</span><br><span class="line">http.basic.user: &quot;admin&quot;</span><br><span class="line">http.basic.password: &quot;admin&quot;</span><br><span class="line">http.basic.ipwhitelist: [&quot;localhost&quot;, &quot;127.0.0.1&quot;]</span><br><span class="line">http.basic.trusted_proxy_chains: []</span><br><span class="line">http.basic.log: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="7-Elasticsearch-sql"><a href="#7-Elasticsearch-sql" class="headerlink" title="7. Elasticsearch-sql"></a>7. Elasticsearch-sql</h2><p><img src="/images/elastic/es-sql.jpeg" alt="图片描述"></p>
<p><strong>install</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./plugin -u https://github.com/NLPchina/elasticsearch-sql/releases/download/1.4.5/elasticsearch-sql-1.4.5.zip --install sql</span><br></pre></td></tr></table></figure>
<p><strong>Verify</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open http://node01:9200/_plugin/sql/</span><br></pre></td></tr></table></figure>
<p><strong>./bin/plugin –list</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  elasticsearch ./bin/plugin --list</span><br><span class="line">Installed plugins:</span><br><span class="line">    - bigdesk</span><br><span class="line">    - head</span><br><span class="line">    - http-basic</span><br><span class="line">    - jdbc</span><br><span class="line">    - kopf</span><br><span class="line">    - license</span><br><span class="line">    - shield</span><br><span class="line">    - sql</span><br></pre></td></tr></table></figure>
<h2 id="8-Elasticsearch-jdbc"><a href="#8-Elasticsearch-jdbc" class="headerlink" title="8. Elasticsearch-jdbc"></a>8. Elasticsearch-jdbc</h2><p>关系型数据库的同步插件</p>
<p><strong>install</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./plugin --install jdbc --url http://xbib.org/repository/org/xbib/elasticsearch/plugin/elasticsearch-river-jdbc/1.5.0.5/elasticsearch-river-jdbc-1.5.0.5-plugin.zip</span><br></pre></td></tr></table></figure>
<p>download and add mysql-driver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o mysql-connector-java-5.1.33.zip -L &apos;http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.33.zip/from/http://cdn.mysql.com/&apos;</span><br><span class="line"></span><br><span class="line">cp mysql-connector-java-5.1.33-bin.jar $ES_HOME/plugins/jdbc/</span><br><span class="line"></span><br><span class="line">chmod 644 $ES_HOME/plugins/jdbc/*</span><br></pre></td></tr></table></figure>
<p>停止river</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XDELETE &apos;localhost:9200/_river/my_jdbc_river/&apos;</span><br></pre></td></tr></table></figure>
<p><strong>Verify</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open http://node01:9200/_nodes/node01/plugins?pretty=true</span><br></pre></td></tr></table></figure>
<h2 id="9-Basic-operation"><a href="#9-Basic-operation" class="headerlink" title="9. Basic operation"></a>9. Basic operation</h2><p><strong>查看该节点安装的所有插件列表</strong></p>
<p><strong><em><a href="http://node01:9200/_nodes/node01/plugins?pretty=true" target="_blank" rel="external">http://node01:9200/_nodes/node01/plugins?pretty=true</a></em></strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch_x"</span>,</span><br><span class="line">  <span class="attr">"nodes"</span> : &#123;</span><br><span class="line">    <span class="attr">"nSitXzd8QvSxQRz3mni3BA"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"node01"</span>,</span><br><span class="line">      <span class="attr">"transport_address"</span> : <span class="string">"inet[/192.168.181.35:9300]"</span>,</span><br><span class="line">      <span class="attr">"host"</span> : <span class="string">"unix.local"</span>,</span><br><span class="line">      <span class="attr">"ip"</span> : <span class="string">"192.168.181.35"</span>,</span><br><span class="line">      <span class="attr">"version"</span> : <span class="string">"1.7.5"</span>,</span><br><span class="line">      <span class="attr">"build"</span> : <span class="string">"00f95f4"</span>,</span><br><span class="line">      <span class="attr">"http_address"</span> : <span class="string">"inet[/192.168.181.35:9200]"</span>,</span><br><span class="line">      <span class="attr">"plugins"</span> : [ &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"sql"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"1.4.5"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"Use sql to query elasticsearch."</span>,</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"/_plugin/sql/"</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"site"</span> : <span class="literal">true</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"http-basic-server-plugin"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"NA"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"HTTP Basic Server Plugin"</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"site"</span> : <span class="literal">false</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"bigdesk"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"NA"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"No description found."</span>,</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"/_plugin/bigdesk/"</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"site"</span> : <span class="literal">true</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"head"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"NA"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"No description found."</span>,</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"/_plugin/head/"</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"site"</span> : <span class="literal">true</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"kopf"</span>,</span><br><span class="line">        <span class="attr">"version"</span> : <span class="string">"1.5.7-SNAPSHOT"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"kopf - simple web administration tool for ElasticSearch"</span>,</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"/_plugin/kopf/"</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"site"</span> : <span class="literal">true</span></span><br><span class="line">      &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>XPUT data</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">curl -u admin:admin -XPUT http://node01:9200/megacorp/employee/1 -d '</span><br><span class="line"> &#123;</span><br><span class="line">     "first_name" : "John",</span><br><span class="line">     "last_name" :  "Smith",</span><br><span class="line">     "age" :        25,</span><br><span class="line">     "about" :      "I love to go rock climbing",</span><br><span class="line">     "interests": [ "sports", "music" ]</span><br><span class="line"> &#125;'</span><br></pre></td></tr></table></figure>
<p><strong>XGET data</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">curl -XGET 'localhost:9200/_count?pretty' -d '</span><br><span class="line"> &#123;</span><br><span class="line">     "query": &#123;</span><br><span class="line">         "match_all": &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;'</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"count"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-Reference-article"><a href="#10-Reference-article" class="headerlink" title="10. Reference article"></a>10. Reference article</h2><ol>
<li><a href="http://www.cnblogs.com/richaaaard/p/5212044.html" target="_blank" rel="external">csdn-004-Elasticsearch插件的介绍</a></li>
<li><a href="http://blog.csdn.net/shenfuli/article/details/49094935" target="_blank" rel="external">插件安装Head、Kopf与Bigdesk</a></li>
<li><a href="http://www.chepoo.com/elasticsearch-service-install.html" target="_blank" rel="external">chepoo.com/elasticsearch-service</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html" target="_blank" rel="external">elastic.co/guide/</a></li>
<li><a href="https://github.com/NLPchina/elasticsearch-sql" target="_blank" rel="external">NLPchina/elasticsearch-sql</a></li>
<li><a href="https://github.com/elasticfence/elasticsearch-http-user-auth" target="_blank" rel="external">elasticsearch-http-user-auth</a> (这个我没有使用)</li>
<li><a href="http://guoze.me/2015/05/28/elasticsearch-http-basic-authentication/" target="_blank" rel="external">建造者说</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch * 入门]]></title>
      <url>http://iequa.com/2016/05/17/elasticsearch/es-indoor/</url>
      <content type="html"><![CDATA[<p>Elasticsearch 是一个基于Apache Lucene(TM)的开源搜索引擎 、 实时分布式搜索 和 分析引擎。</p>
<a id="more"></a>
<blockquote>
<p>Lucene 是 成熟的<code>全文索引与信息检索(IR)库</code>，采用Java实现。信息检索式指文档搜索、文档内信息搜索或者文档相关的元数据搜索等操作。。</p>
<p>Solr是一个基于Lucene <code>java库的企业级搜索服务器</code>，包含XML/HTTP，JSON API，高亮查询结果，缓存，复制，还有一个WEB管理界面。Solr运行在Servlet容器中</p>
<p>2010 年 Elasticsearch 出现公开版本</p>
</blockquote>
<p><strong>Elasticsearch 涉及的技术</strong></p>
<ul>
<li>全文搜索</li>
<li>分析系统</li>
<li>分布式数据库</li>
</ul>
<p><strong>谁在使用 Elasticsearch?</strong></p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5" target="_blank" rel="external">维基百科</a></li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverflow</a></li>
<li><a href="https://github.com/libean" target="_blank" rel="external">Github</a><br>…</li>
</ul>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>Elasticsearch 是 开源搜索引擎.</p>
<p><strong>Elasticsearch 不仅是全文搜索，还是：</strong></p>
<ul>
<li>分布式 实时文件存储，每个字段都被索引并可被搜索</li>
<li>分布式 实时分析搜索引擎</li>
<li>可扩展服务器，处理<strong>PB</strong>级结构化或非结构化数据</li>
</ul>
<p>这些功能被集成到一个服务里面，应用可通过 <code>RESTful API</code>、各种语言的<code>客户端</code>、<code>命令行</code> 与之交互。</p>
<p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<code>RESTful API</code>来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>
<p><a href="http://es.xiaoleilu.com/010_Intro/10_Installing_ES.html" target="_blank" rel="external">more_info_install_elaticsearch</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[deploy@node196 config]$ ll</span><br><span class="line">total 20</span><br><span class="line">-rw-rw-r--  1 deploy deploy 13915 May 10 10:02 elasticsearch.yml</span><br><span class="line">-rw-rw-r--. 1 deploy deploy  2054 Jul 16  2015 logging.yml</span><br><span class="line">[deploy@node196 config]$ pwd</span><br><span class="line">/home/deploy/elasticsearch-1.7.1/config</span><br></pre></td></tr></table></figure>
<p><strong>编辑 elasticsearch.yml</strong> </p>
<p>替代cluster.name的默认值，这样可以防止一个新启动的节点加入到相同网络中的另一个同名的集群中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.name: elasticsearch_your-company-name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#################################### Node #####################################</span><br><span class="line"></span><br><span class="line"># Node names are generated dynamically on startup, so you&apos;re relieved</span><br><span class="line"># from configuring them manually. You can tie this node to a specific name:</span><br><span class="line">#</span><br><span class="line">node.name: &quot;node196&quot;</span><br></pre></td></tr></table></figure>
<h2 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h2><h3 id="2-1-Java-API"><a href="#2-1-Java-API" class="headerlink" title="2.1 Java API"></a>2.1 Java API</h3><p><strong>节点客户端(node client)</strong></p>
<p>节点客户端以无数据节点(none data node)身份加入集群，换言之，它自己不存储任何数据，但是它知道数据在集群中的具体位置，并且能直接转发请求到对应的节点上。</p>
<p><strong>传输客户端(Transport client)</strong></p>
<p>更轻量的传输客户端 能发送请求到远程集群。它自己不加入集群，只是简单转发请求给集群中的节点。</p>
<blockquote>
<p>两个Java客户端都通过 9300端口 与 集群交互，使用 Elasticsearch传输协议(<code>Elasticsearch Transport Protocol</code>)。集群中的节点之间也通过 9300 port 进行通信。</p>
</blockquote>
<p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="external">more_info_Java-API</a></p>
<h3 id="2-2-RESTful-API"><a href="#2-2-RESTful-API" class="headerlink" title="2.2 RESTful API"></a>2.2 RESTful API</h3><ul>
<li>基于 HTTP 协议，以 JSON 为数据交互格式的 RESTful API</li>
</ul>
<blockquote>
<p>向 Elasticsearch 发出的请求的组成部分与其它普通的HTTP请求是一样的：<br>curl -X<verb> ‘<protocol>://<host>:<port>/<path></path>?<query_string>‘ -d ‘<body>‘</body></query_string></port></host></protocol></verb></p>
<p>VERB HTTP方法：GET, POST, PUT, HEAD, DELETE<br>…</p>
</blockquote>
<p>example : 查询集群中 文档数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[deploy@node196 config]$ curl -u username:passwd -XGET &apos;localhost:9200/_count?pretty&apos; -d &apos;</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     &quot;query&quot;: &#123;</span><br><span class="line">&gt;         &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;count&quot; : 100001234,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 376,</span><br><span class="line">    &quot;successful&quot; : 376,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -u name:pass -X DELETE http://ip:9200/your_index</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /coupon_seeker/coupon_seeker/_search?q=source:dianping</span><br><span class="line"></span><br><span class="line">curl -u name:pass -XGET &apos;http://192.168.181.xxx:9200/coupon_seeker/coupon_seeker/_search?q=source:dianping</span><br></pre></td></tr></table></figure>
<p>有条件的精确匹配删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -u name:pass -XDELETE &apos;http://192.168.181.xxx:9200/coupon_seeker/coupon_seeker/_query?pretty=true&apos; -d &apos;&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;source:&quot;dianping&quot;&#125;&#125;&#125;&apos;</span><br></pre></td></tr></table></figure>
<h2 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a>3. 文档</h2><p><strong>面向文档</strong></p>
<p>Elasticsearch is document oriented，这意味着它可以存储整个 <code>object</code> 或 <code>document</code>。</p>
<p>Elasticsearch 还可以 索引(index) 每个文档的内容使之可以被 <strong>搜索</strong>。</p>
<p>可对 <code>document</code> （而非成行成列的数据）进行 <code>index</code>、<code>搜索</code>、<code>排序</code>、<code>过滤</code>。</p>
<p>这种理解数据的方式与以往完全不同，这也是 Elasticsearch 能够执行复杂的全文搜索的原因之一。</p>
<p><strong>JSON</strong> (JavaScript Object Notation)，文档序列化格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"email"</span>:      <span class="string">"john@smith.com"</span>,</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"John"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>:  <span class="string">"Smith"</span>,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">        <span class="attr">"bio"</span>:         <span class="string">"Eco-warrior and defender of the weak"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:         <span class="number">25</span>,</span><br><span class="line">        <span class="attr">"interests"</span>: [ <span class="string">"dolphins"</span>, <span class="string">"whales"</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"join_date"</span>: <span class="string">"2014/05/01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如下 user对象很复杂，但它的结构和对象的含义已经被完整的体现在JSON中了，在Elasticsearch中将对象转化为 JSON 并做 index索引 要比在表结构中做相同的事情简单的多。</p>
<h2 id="5-索引"><a href="#5-索引" class="headerlink" title="5. 索引"></a>5. 索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hdfs@node196 data_analysis]$ curl -u username:passwd -XPUT http://node190:9200/megacorp/employee/1 -d &apos;</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">&gt;     &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class="line">&gt;     &quot;age&quot; :        25,</span><br><span class="line">&gt;     &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class="line">&gt;     &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">&gt; &#125;&apos;</span><br><span class="line">&#123;&quot;_index&quot;:&quot;megacorp&quot;,&quot;_type&quot;:&quot;employee&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;[hdfs@node196 data_analysis]$</span><br></pre></td></tr></table></figure>
<ul>
<li>indexing</li>
<li>search</li>
<li>aggregations  /ˌæɡrɪˈɡeɪʃən/</li>
</ul>
<p><strong>Elasticsearch能做的事</strong></p>
<p>场景: 假设我们刚好在Megacorp工作，这时人力资源部门出于某种目的需要让我们创建一个员工目录，这个目录用于促进人文关怀和用于实时协同工作，所以它有以下不同的需求：</p>
<ul>
<li>数据能够包含多个值的标签、数字和纯文本。</li>
<li>检索任何员工的所有信息。</li>
<li>支持结构化搜索，例如查找30岁以上的员工。</li>
<li>支持简单的全文搜索和更复杂的短语(phrase)搜索</li>
<li>高亮搜索结果中的关键字</li>
<li>能够利用图表管理分析这些数据</li>
</ul>
<p><strong>索引员工文档</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">Elasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Elasticsearch</th>
<th>Relational DB</th>
</tr>
</thead>
<tbody>
<tr>
<td>Indices</td>
<td>Databases</td>
</tr>
<tr>
<td>Types</td>
<td>Tables</td>
</tr>
<tr>
<td>Documents</td>
<td>Rows</td>
</tr>
<tr>
<td>Fields</td>
<td>Columns</td>
</tr>
</tbody>
</table>
<p><strong>Elasticsearch</strong></p>
<blockquote>
<p>索引」含义的区分</p>
<p>  <strong>index_num.</strong> : index (数据库)，它是相关文档存储的地方，</p>
<p>  <strong>index_verb.</strong> 「索引一个文档」表示把一个文档存储到索引（名词）里，以便它可以被检索或者查询。这很像SQL 中的 INSERT关键字，差别是，如果文档已经存在，新的文档将覆盖旧的文档。</p>
<p><strong>倒排索引</strong> : 传统数据库为特定列增加一个索引，例如 B-Tree索引 来加速检索。Elasticsearch和Lucene使用倒排索引(inverted index)的数据结构来达到相同目的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /megacorp/employee/1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot; :        25,</span><br><span class="line">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class="line">    &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-1-检索文档"><a href="#4-1-检索文档" class="headerlink" title="4.1 检索文档"></a>4.1 检索文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; :   &quot;megacorp&quot;,</span><br><span class="line">  &quot;_type&quot; :    &quot;employee&quot;,</span><br><span class="line">  &quot;_id&quot; :      &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;found&quot; :    true,</span><br><span class="line">  &quot;_source&quot; :  &#123;</span><br><span class="line">      &quot;first_name&quot; :  &quot;John&quot;,</span><br><span class="line">      &quot;last_name&quot; :   &quot;Smith&quot;,</span><br><span class="line">      &quot;age&quot; :         25,</span><br><span class="line">      &quot;about&quot; :       &quot;I love to go rock climbing&quot;,</span><br><span class="line">      &quot;interests&quot;:  [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-简单搜索"><a href="#4-2-简单搜索" class="headerlink" title="4.2 简单搜索"></a>4.2 简单搜索</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br></pre></td></tr></table></figure>
<p>查询 last_name 为 Smith 的记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   &quot;hits&quot;: &#123;</span><br><span class="line">      &quot;total&quot;:      2,</span><br><span class="line">      &quot;max_score&quot;:  0.30685282,</span><br><span class="line">      &quot;hits&quot;: [</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">               &quot;first_name&quot;:  &quot;John&quot;,</span><br><span class="line">               &quot;last_name&quot;:   &quot;Smith&quot;,</span><br><span class="line">               &quot;age&quot;:         25,</span><br><span class="line">               &quot;about&quot;:       &quot;I love to go rock climbing&quot;,</span><br><span class="line">               &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">               &quot;first_name&quot;:  &quot;Jane&quot;,</span><br><span class="line">               &quot;last_name&quot;:   &quot;Smith&quot;,</span><br><span class="line">               &quot;age&quot;:         32,</span><br><span class="line">               &quot;about&quot;:       &quot;I like to collect rock albums&quot;,</span><br><span class="line">               &quot;interests&quot;: [ &quot;music&quot; ]</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-使用DSL语句查询"><a href="#4-3-使用DSL语句查询" class="headerlink" title="4.3 使用DSL语句查询"></a>4.3 使用DSL语句查询</h3><p> DSL(Domain Specific Language特定领域语言) </p>
<p><strong>查询字符串等价于</strong>  q=last_name:Smith <strong>DSL查询 : </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;last_name&quot; : &quot;Smith&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-更复杂的搜索"><a href="#4-4-更复杂的搜索" class="headerlink" title="4.4 更复杂的搜索"></a>4.4 更复杂的搜索</h3><p><strong>filter range</strong></p>
<p>GET /megacorp/employee/_search<br>{<br>    “query” : {<br>        “filtered” : {<br>            “filter” : {<br>                “range” : {<br>                    “age” : { “gt” : 30 } <1><br>                }<br>            },<br>            “query” : {<br>                “match” : {<br>                    “last_name” : “smith” <2><br>                }<br>            }<br>        }<br>    }<br>}</2></1></p>
<h3 id="4-5-全文搜索"><a href="#4-5-全文搜索" class="headerlink" title="4.5 全文搜索"></a>4.5 全文搜索</h3><p>一种传统数据库难以实现的功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   &quot;hits&quot;: &#123;</span><br><span class="line">      &quot;total&quot;:      2,</span><br><span class="line">      &quot;max_score&quot;:  0.16273327,</span><br><span class="line">      &quot;hits&quot;: [</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            &quot;_score&quot;:         0.16273327, &lt;1&gt;</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">               &quot;first_name&quot;:  &quot;John&quot;,</span><br><span class="line">               &quot;last_name&quot;:   &quot;Smith&quot;,</span><br><span class="line">               &quot;age&quot;:         25,</span><br><span class="line">               &quot;about&quot;:       &quot;I love to go rock climbing&quot;,</span><br><span class="line">               &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            &quot;_score&quot;:         0.016878016, &lt;2&gt;</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">               &quot;first_name&quot;:  &quot;Jane&quot;,</span><br><span class="line">               &quot;last_name&quot;:   &quot;Smith&quot;,</span><br><span class="line">               &quot;age&quot;:         32,</span><br><span class="line">               &quot;about&quot;:       &quot;I like to collect rock albums&quot;,</span><br><span class="line">               &quot;interests&quot;: [ &quot;music&quot; ]</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-短语搜索-–-phrases"><a href="#4-6-短语搜索-–-phrases" class="headerlink" title="4.6 短语搜索 – phrases"></a>4.6 短语搜索 – phrases</h3><p>想要确切的匹配若干个单词或者短语(phrases), 例如  我们想要查询同时包含”rock”和”climbing”（并且是相邻的）的员工记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>增加高亮</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-aggregations"><a href="#5-aggregations" class="headerlink" title="5. aggregations"></a>5. aggregations</h2><p>聚合相当于 group by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;last_name&quot;: &quot;smith&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;interests&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;all_interests&quot;: &#123;</span><br><span class="line">   &quot;buckets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;key&quot;: &quot;music&quot;,</span><br><span class="line">         &quot;doc_count&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;key&quot;: &quot;sports&quot;,</span><br><span class="line">         &quot;doc_count&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>聚合也允许分级汇总。例如，让我们统计每种兴趣下职员的平均年龄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;all_interests&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;interests&quot; &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_age&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;age&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>教程小结</strong></p>
<p> 为了保持简短，还有很多的特性未提及——像 推荐、定位、渗透、模糊 以及 部分匹配等。但这也突出了构建高级搜索功能是多么的容易。无需配置，只需要添加数据然后开始搜索！</p>
<h2 id="6-分布式的特性"><a href="#6-分布式的特性" class="headerlink" title="6. 分布式的特性"></a>6. 分布式的特性</h2><p>Elasticsearch 你不需要知道任何关于分布式系统、分片、集群发现或者其他大量的分布式概念。所有的教程你即可以运行在你的笔记本上，也可以运行在拥有100个节点的集群上，其工作方式是一样的。</p>
<p>Elasticsearch 致力于隐藏分布式系统的复杂性。以下这些操作都是在底层自动完成的：</p>
<ul>
<li>将你的文档分区到不同的容器或者分片(shards)中，它们可存于一或多个节点中。</li>
<li>将分片均匀的分配到各个节点，对索引和搜索做负载均衡。</li>
<li>冗余每一个分片，防止硬件故障造成的数据丢失。</li>
<li>将集群中任意一个节点上的请求路由到相应数据所在的节点。</li>
<li>无论是增加节点，还是移除节点，分片都可以做到无缝的扩展和迁移。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Machine Learning p1 - Spark编程入门]]></title>
      <url>http://iequa.com/2016/04/25/spark/spark-machine-learning-p1/</url>
      <content type="html"><![CDATA[<p>Spark 的环境搭建与运行, 接触了 RDD 与 SparkContext, 启动 Spark-Shell 以及如何使用 Scala、Python 编写 Spark 程序. </p>
<a id="more"></a>
<p><strong>Apache Spark</strong></p>
<p>Spark 的设计目标 即: <code>迭代式+低延迟</code> 适合 Machine Learning 算法的特性<br>Spark 分布式计算框架, 将中间数据和结果保存在内存中<br>Spark 提供函数式API, 并兼容 Hadoop 生态<br>Spark 框架对 资源调度、任务提交、执行、跟踪， 节点间通信以及数据并行处理的内在底层操作都进行了抽象</p>
<blockquote>
<p>简化了海量数据的存储(HDFS) 和 计算(MR) 流程。MapReduce 缺点, 如: 启动任务时的高开销、对中间数据 和 计算结果 写入磁盘的依赖。这使得 Hadoop 不适合 迭代式 或 低延迟 的任务。</p>
</blockquote>
<p><strong>Spark 的四种运行模式</strong></p>
<ol>
<li>本地单机模式 – Spark 进程 all run in one JVM</li>
<li>集群单机模式 – 使用 Spark 自己内置的 任务调度框架</li>
<li>基于 Mesos 一个开源集群计算框架</li>
<li>基于 YARN 与 Hadoop2 关联形成集群计算和资源调度框架</li>
</ol>
<h2 id="1-Spark运行"><a href="#1-Spark运行" class="headerlink" title="1. Spark运行"></a>1. Spark运行</h2><p>运行示例程序来测试是否一切正常：</p>
<blockquote>
<p>./bin/run-example org.apache.spark.examples.SparkPi</p>
</blockquote>
<p>该命令将在本地单机模式下执行SparkPi这个示例。在该模式下，所有的Spark进程均运行于同一个JVM中，而并行处理则通过多线程来实现。默认情况下，该示例会启用与本地系统的CPU核心数目相同的线程。</p>
<p>要在本地模式下设置并行的级别，以local[N]的格式来指定一个master变量即可。比如只使用两个线程时，可输入如下命令：</p>
<blockquote>
<p>MASTER=local[2] ./bin/run-example org.apache.spark.examples.SparkPi</p>
</blockquote>
<h2 id="2-Spark集群"><a href="#2-Spark集群" class="headerlink" title="2. Spark集群"></a>2. Spark集群</h2><p>Spark集群由两类程序构成: </p>
<ol>
<li>一个驱动程序</li>
<li>多个执行程序</li>
</ol>
<blockquote>
<p>本地模式下所有的处理都运行在同一个JVM内，而在集群模式时它们通常运行在不同的节点上。</p>
</blockquote>
<p>一个采用单机模式的Spark集群包括：</p>
<ol>
<li>一个运行Spark单机主进程和驱动程序的 Master；</li>
<li>各自运行一个执行程序进程的多个 Worker。</li>
</ol>
<p>比如在一个Spark单机集群上运行，只需传入主节点的URL即可：</p>
<blockquote>
<p>MASTER=spark://IP:PORT ./bin/run-example org.apache.spark.examples.SparkPi<br>其中的IP和PORT分别是主节点IP地址和端口号。这是告诉Spark让示例程序运行在主节点所对应的集群上</p>
</blockquote>
<h2 id="3-Spark编程模型"><a href="#3-Spark编程模型" class="headerlink" title="3. Spark编程模型"></a>3. Spark编程模型</h2><h3 id="3-1-SparkContext类"><a href="#3-1-SparkContext类" class="headerlink" title="3.1 SparkContext类"></a>3.1 SparkContext类</h3><p><strong>SparkContext类与SparkConf类</strong></p>
<p>任何Spark程序的编写都是从SparkContext开始的。SparkContext的初始化需要一个SparkConf对象，后者包含了Spark集群配置的各种参数（比如主节点的URL）。</p>
<p>初始化后，我们便可用SparkContext对象所包含的各种方法来创建和操作RDD。Spark shell（在Scala和Python下可以，但不支持Java）能自动完成上述初始化。若要用Scala代码来实现的话，可参照下面的代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Test Spark App"</span>).setMaster(<span class="string">"local[4]"</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br></pre></td></tr></table></figure>
<p>这段代码会创建一个4线程的SparkContext对象，并将其相应的任务命名为Test Spark APP。我们也可通过如下方式调用SparkContext的简单构造函数</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="string">"local[4]"</span>, <span class="string">"Test Spark App"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-Spark-shell"><a href="#3-2-Spark-shell" class="headerlink" title="3.2 Spark shell"></a>3.2 Spark shell</h3><p>Spark支持 用 Scala or Python REPL（Read-Eval-Print-Loop，即交互式shell）来进行交互式的程序编写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/spark-shell</span><br></pre></td></tr></table></figure>
<p>会启动Scala shell 并初始化一个SparkContext对象。我们可以通过 sc这个Scala值来调用这个对象</p>
<h3 id="3-3-RDD"><a href="#3-3-RDD" class="headerlink" title="3.3 RDD"></a>3.3 RDD</h3><p>一个 RDD 代表一系列的“记录”（严格来说，某种类型的对象）。<br>这些记录被分配或分区到一个集群的多个节点上（在本地模式下，可以类似地理解为单个进程里的多个线程上）。</p>
<p>Spark中的RDD具备容错性，即当某个节点或任务失败时（因非用户代码原因而引起，如硬件故障、网络不通等），RDD会在余下的节点上自动重建，以便任务能最终完成。</p>
<p><strong>1. 创建RDD</strong></p>
<p>RDD可从现有的集合创建 ：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> collection = <span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>)</span><br><span class="line"><span class="keyword">val</span> rddFromCollection = sc.parallelize(collection)</span><br></pre></td></tr></table></figure>
<p>RDD也可以基于Hadoop的输入源创建，比如本地文件系统、HDFS。基于Hadoop的RDD可以使用任何实现了Hadoop InputFormat接口的输入格式，包括文本文件、其他Hadoop标准格式、HBase等。以下举例说明如何用一个本地文件系统里的文件创建RDD：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val rddFromTextFile = sc.textFile(&quot;LICENSE&quot;)</span><br></pre></td></tr></table></figure>
<p>上述代码中的textFile函数（方法）会返回一个RDD对象。该对象的每一条记录都是一个表示文本文件中某一行文字的String（字符串）对象。</p>
<p><strong>2. Spark操作</strong></p>
<p>在Spark编程模式下，所有的操作被分为 <code>transformation</code> 和 <code>action</code> 两种。</p>
<p><strong>transformation</strong> 操作是对一个数据集里的所有记录执行某种函数，从而使记录发生改变；</p>
<p><strong>action</strong> 通常是运行某些计算或聚合操作，并将结果返回运行 SparkContext 的那个驱动程序。</p>
<p>Spark 的操作通常采用<code>函数式</code>风格。</p>
<p>Spark程序中最常用的转换操作便是map操作。该操作对一个RDD里的每一条记录都执行某个函数，从而将输入映射成为新的输出。</p>
<p>比如，下面这段代码便对一个从本地文本文件创建的RDD进行操作。它对该RDD中的每一条记录都执行size函数。<br>创建一个这样的由若干String构成的RDD对象。通过map函数，我们将每一个字符串都转换为一个整数，从而返回一个由若干Int构成的RDD对象。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; rddFromTextFile.count</span><br><span class="line">res2: <span class="type">Long</span> = <span class="number">294</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> intsFromStringsRDD = rddFromTextFile.map(line =&gt; line.size)</span><br><span class="line">intsFromStringsRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">3</span>] at map at &lt;console&gt;:<span class="number">23</span></span><br><span class="line"></span><br><span class="line">scala&gt; intsFromStringsRDD.count</span><br><span class="line">res3: <span class="type">Long</span> = <span class="number">294</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> sumOfRecords = intsFromStringsRDD.sum</span><br><span class="line">sumOfRecords: <span class="type">Double</span> = <span class="number">17062.0</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> numRecords = intsFromStringsRDD.count</span><br><span class="line">numRecords: <span class="type">Long</span> = <span class="number">294</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> aveLengthOfRecord = sumOfRecords / numRecords</span><br><span class="line">aveLengthOfRecord: <span class="type">Double</span> = <span class="number">58.034013605442176</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> aveLengthOfRecordChained = rddFromTextFile.map(line =&gt; line.size).sum / rddFromTextFile.count</span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例中 <strong>=&gt;</strong> 是Scala下表示匿名函数的语法。语法 <strong>line =&gt; line.size</strong> 表示以 <strong>=&gt;</strong> 操作符左边的部分作为输入，对其执行一个函数，并以 <strong>=&gt;</strong> 操作符右边代码的执行结果为输出。在这个例子中，输入为line，输出则是 <strong>line.size</strong> 函数的执行结果。在Scala语言中，这种将一个String对象映射为一个Int的函数被表示为String =&gt; Int。</p>
</blockquote>
<p>Spark的大多数操作都会返回一个新RDD，但多数的Action操作则是返回计算的结果</p>
<blockquote>
<p>注 : Spark 中的转换操作是延后的。也就是说，在RDD上调用一个转换操作并不会立即触发相应的计算。 只有必要时才计算结果并将其返回给驱动程序，从而提高了Spark的效率。</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> transformedRDD = rddFromTextFile.map(line =&gt; line.size).</span><br><span class="line">     | filter(size =&gt; size &gt; <span class="number">10</span>).map(size =&gt; size * <span class="number">2</span>)</span><br><span class="line">transformedRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">7</span>] at map at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure>
<p>没有触发任何计算，也没有结果被返回。<br>如果我们现在在新的RDD上调用一个执行操作，比如sum，该计算将会被触发：</p>
<p><strong><em>触发计算</em></strong></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> computation = transformedRDD.sum</span><br><span class="line">computation: <span class="type">Double</span> = <span class="number">34106.0</span></span><br></pre></td></tr></table></figure>
<p><strong>3. RDD缓存策略</strong></p>
<p>Spark最为强大的功能之一便是能够把数据缓存在集群的内存里。这通过调用RDD的cache函数来实现：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; rddFromTextFile.cache</span><br><span class="line">res4: rddFromTextFile.<span class="keyword">type</span> = <span class="type">MapPartitionsRDD</span>[<span class="number">2</span>] at textFile at &lt;console&gt;:<span class="number">21</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> aveLengthOfRecordChainedFromCached = rddFromTextFile.map(line =&gt; line.size).sum / rddFromTextFile.count</span><br><span class="line">aveLengthOfRecordChainedFromCached: <span class="type">Double</span> = <span class="number">58.034013605442176</span></span><br></pre></td></tr></table></figure>
<p>在RDD首次调用一个执行操作时，这个操作对应的计算会立即执行，数据会从数据源里读出并保存到内存。因此，首次调用cache函数所需要的时间会部分取决于Spark从输入源读取数据所需要的时间。但是，当下一次访问该数据集的时候，数据可以直接从内存中读出从而减少低效的I/O操作，加快计算。多数情况下，这会取得数倍的速度提升。</p>
<blockquote>
<p>Spark支持更为细化的缓存策略。通过persist函数可以指定Spark的数据缓存策略。关于RDD缓存的更多信息可参见：<a href="http://spark.apache.org/docs/latest/programming-guide.html#rdd-persistence。" target="_blank" rel="external">http://spark.apache.org/docs/latest/programming-guide.html#rdd-persistence。</a></p>
</blockquote>
<h3 id="3-4-广播变量和累加器"><a href="#3-4-广播变量和累加器" class="headerlink" title="3.4 广播变量和累加器"></a>3.4 广播变量和累加器</h3><p>Spark的另一个核心功能是能创建两种特殊类型的变量：<strong>广播变量</strong> 和 累加器。</p>
<p>广播变量（broadcast variable）为只读变量，它由运行SparkContext的驱动程序创建后发送给会参与计算的节点。对那些需要让各工作节点高效地访问相同数据的应用场景，比如机器学习，这非常有用。</p>
<p>Spark下创建广播变量只需在SparkContext上调用一个方法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val broadcastAList = sc.broadcast(List(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;))</span><br><span class="line">broadcastAList: org.apache.spark.broadcast.Broadcast[List[String]] = Broadcast(11)</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure>
<p><strong>广播变量</strong> 也可以被非驱动程序所在的节点（即工作节点）访问，访问的方法是调用该变量的<code>value</code>方法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> broadcastAList = sc.broadcast(<span class="type">List</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>))</span><br><span class="line">broadcastAList: org.apache.spark.broadcast.<span class="type">Broadcast</span>[<span class="type">List</span>[<span class="type">String</span>]] = <span class="type">Broadcast</span>(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; sc.parallelize(<span class="type">List</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)).map(x =&gt; broadcastAList.value ++ x).collect</span><br><span class="line">res5: <span class="type">Array</span>[<span class="type">List</span>[<span class="type">Any</span>]] = <span class="type">Array</span>(<span class="type">List</span>(a, b, c, d, e, <span class="number">1</span>), <span class="type">List</span>(a, b, c, d, e, <span class="number">2</span>), <span class="type">List</span>(a, b, c, d, e, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，collect 函数一般仅在的确需要将整个结果集返回驱动程序并进行后续处理时才有必要调用。如果在一个非常大的数据集上调用该函数，可能耗尽驱动程序的可用内存，进而导致程序崩溃。</p>
</blockquote>
<p>高负荷的处理应尽可能地在整个集群上进行，从而避免驱动程序成为系统瓶颈。然而在不少情况下，将结果收集到驱动程序的确是有必要的。很多机器学习算法的迭代过程便属于这类情况。</p>
<p><strong>累加器</strong>（accumulator）也是一种被广播到工作节点的变量。累加器与广播变量的关键不同，是后者只能读取而前者却可累加。</p>
<blockquote>
<p>关于累加器的更多信息，可参见《Spark编程指南》：<a href="http://spark.apache.org/docs/latest/programming-guide.html#shared-variables。" target="_blank" rel="external">http://spark.apache.org/docs/latest/programming-guide.html#shared-variables。</a></p>
</blockquote>
<h2 id="4-Spark-Scala-编程入门"><a href="#4-Spark-Scala-编程入门" class="headerlink" title="4. Spark Scala 编程入门"></a>4. Spark Scala 编程入门</h2><p><a href="https://github.com/blair1/spark/tree/master/Spark-Machine-Learning_8519OSCode/Chapter%2001/scala-spark-app" target="_blank" rel="external">scala-spark-app</a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span>._</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * A simple Spark app in Scala</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="string">"local[2]"</span>, <span class="string">"First Spark App"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we take the raw data in CSV format and convert it into a set of records of the form (user, product, price)</span></span><br><span class="line">    <span class="keyword">val</span> data = sc.textFile(<span class="string">"data/UserPurchaseHistory.csv"</span>)</span><br><span class="line">      .map(line =&gt; line.split(<span class="string">","</span>))</span><br><span class="line">      .map(purchaseRecord =&gt; (purchaseRecord(<span class="number">0</span>), purchaseRecord(<span class="number">1</span>), purchaseRecord(<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's count the number of purchases</span></span><br><span class="line">    <span class="keyword">val</span> numPurchases = data.count()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's count how many unique users made purchases</span></span><br><span class="line">    <span class="keyword">val</span> uniqueUsers = data.map &#123; <span class="keyword">case</span> (user, product, price) =&gt; user &#125;.distinct().count()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's sum up our total revenue</span></span><br><span class="line">    <span class="keyword">val</span> totalRevenue = data.map &#123; <span class="keyword">case</span> (user, product, price) =&gt; price.toDouble &#125;.sum()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's find our most popular product</span></span><br><span class="line">    <span class="keyword">val</span> productsByPopularity = data</span><br><span class="line">      .map &#123; <span class="keyword">case</span> (user, product, price) =&gt; (product, <span class="number">1</span>) &#125;</span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      .collect()</span><br><span class="line">      .sortBy(-_._2)</span><br><span class="line">    <span class="keyword">val</span> mostPopular = productsByPopularity(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// finally, print everything out</span></span><br><span class="line">    println(<span class="string">"Total purchases: "</span> + numPurchases)</span><br><span class="line">    println(<span class="string">"Unique users: "</span> + uniqueUsers)</span><br><span class="line">    println(<span class="string">"Total revenue: "</span> + totalRevenue)</span><br><span class="line">    println(<span class="string">"Most popular product: %s with %d purchases"</span>.format(mostPopular._1, mostPopular._2))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-Spark-Java-编程入门"><a href="#5-Spark-Java-编程入门" class="headerlink" title="5. Spark Java 编程入门"></a>5. Spark Java 编程入门</h2><p>Java API与Scala API本质上很相似。Scala代码可以很方便地调用Java代码，但某些Scala代码却无法在Java里调用，特别是那些使用了隐式类型转换、默认参数和采用了某些Scala反射机制的代码。</p>
<p>SparkContext有了对应的Java版本JavaSparkContext，而RDD则对应JavaRDD。<br>Spark提供对Java 8匿名函数（lambda）语法的支持。</p>
<p>用Scala编写时，键/值对记录的RDD能支持一些特别的操作（比如reduceByKey和saveAsSequenceFile）。这些操作可以通过隐式类型转换而自动被调用。用Java编写时，则需要特别类型的JavaRDD来支持这些操作。它们包括用于键/值对的JavaPairRDD，以及用于数值记录的JavaDoubleRDD。</p>
<p>Java 8 RDD以及Java 8 lambda表达式更多信息可参见《Spark编程指南》：<a href="http://spark.apache.org/docs/latest/programming-guide.html#rdd-operations。" target="_blank" rel="external">http://spark.apache.org/docs/latest/programming-guide.html#rdd-operations。</a></p>
<h2 id="6-Spark-Python-编程入门"><a href="#6-Spark-Python-编程入门" class="headerlink" title="6. Spark Python 编程入门"></a>6. Spark Python 编程入门</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">"""用Python编写的一个简单Spark应用"""</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"></span><br><span class="line">sc = SparkContext(<span class="string">"local[2]"</span>, <span class="string">"First Spark App"</span>)</span><br><span class="line"><span class="comment"># 将CSV格式的原始数据转化为(user,product,price)格式的记录集</span></span><br><span class="line">data = sc.textFile(<span class="string">"data/UserPurchaseHistory.csv"</span>).map(<span class="keyword">lambda</span> line:</span><br><span class="line">line.split(<span class="string">","</span>)).map(<span class="keyword">lambda</span> record: (record[<span class="number">0</span>], record[<span class="number">1</span>], record[<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># 求总购买次数</span></span><br><span class="line">numPurchases = data.count()</span><br><span class="line"><span class="comment"># 求有多少不同客户购买过商品</span></span><br><span class="line">uniqueUsers = data.map(<span class="keyword">lambda</span> record: record[<span class="number">0</span>]).distinct().count()</span><br><span class="line"><span class="comment"># 求和得出总收入</span></span><br><span class="line">totalRevenue = data.map(<span class="keyword">lambda</span> record: float(record[<span class="number">2</span>])).sum()</span><br><span class="line"><span class="comment"># 求最畅销的产品是什么</span></span><br><span class="line">products = data.map(<span class="keyword">lambda</span> record: (record[<span class="number">1</span>], <span class="number">1.0</span>)).</span><br><span class="line">reduceByKey(<span class="keyword">lambda</span> a, b: a + b).collect()</span><br><span class="line">mostPopular = sorted(products, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Total purchases: %d"</span> % numPurchases</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Unique users: %d"</span> % uniqueUsers</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Total revenue: %2.2f"</span> % totalRevenue</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Most popular product: %s with %d purchases"</span> % (mostPopular[<span class="number">0</span>], mostPopular[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>匿名函数在Python语言中亦称lambda函数，lambda也是语法表达上的关键字。</p>
<p>用Scala编写时，一个将输入x映射为输出y的匿名函数表示为x =&gt; y，而在Python中则是lambda x : y。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  python-spark-app git:(master) ✗ <span class="built_in">pwd</span></span><br><span class="line">/Users/hp/ghome/hadoop-spark/spark/Spark-Machine-Learning_8519OSCode/Chapter01/python-spark-app</span><br><span class="line">➜  python-spark-app git:(master) ✗ <span class="variable">$SPARK_HOME</span>/bin/spark-submit pythonapp.py</span><br><span class="line">Using Spark<span class="string">'s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">16/08/26 15:56:02 INFO SparkContext: Running Spark version 1.5.2</span><br><span class="line">...</span><br><span class="line">Total purchases: 5</span><br><span class="line">Unique users: 4</span><br><span class="line">Total revenue: 39.91</span><br><span class="line">Most popular product: iPhone Cover with 2 purchases</span><br><span class="line">16/08/26 15:56:07 INFO SparkUI: Stopped Spark web UI at http://192.168.143.84:4040</span><br><span class="line">...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Spark的Python API几乎覆盖了所有Scala API所能提供的功能. 但的确有些特性，比如Spark Streaming和个别的API方法，暂不支持。<br><a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">具体参见《Spark编程指南》的Python部分</a></p>
</blockquote>
<h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><p>体会了 函数式 编程的威力， scala、python 都可以。java 不适合写 spark 程序</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SBT Hello]]></title>
      <url>http://iequa.com/2016/03/16/spark/spark-scala-sbt-hello/</url>
      <content type="html"><![CDATA[<ol>
<li>什么是 SBT ?</li>
<li>SBT 项目工程目录</li>
<li>SBT 编译打包 Scala HelloWorld</li>
</ol>
<a id="more"></a>
<h2 id="1-SBT-What"><a href="#1-SBT-What" class="headerlink" title="1. SBT, What?"></a>1. SBT, What?</h2><p>SBT 是 Simple Build Tool 的简称. SBT 可以认为是 Scala 世界的 maven。</p>
<p>SBT的着迷特性，比如：</p>
<ol>
<li>DSL build构建, 并可混合构建 Java 和 Scala 项目；</li>
<li>通过触发执行 (trigger execution) 特性支持持续的编译与测试；</li>
<li>可以重用 Maven 或者 ivy的repository 进行依赖管理；</li>
<li>增量编译、并行任务等等…</li>
</ol>
<h2 id="2-Hello-SBT"><a href="#2-Hello-SBT" class="headerlink" title="2. Hello, SBT"></a>2. Hello, SBT</h2><p>一个极致简单的 Scala项目 （hello simple project）</p>
<p>hello/HelloWorld.scala</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">        println(<span class="string">"Hello, SBT"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sbt run</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  hello git:(master) ✗ sbt</span><br><span class="line">[info] Set current project to hello (in build file:/Users/hp/ghome/Spark-Scala/hello/)</span><br><span class="line">&gt; run</span><br><span class="line">[info] Updating &#123;file:/Users/hp/ghome/Spark-Scala/hello/&#125;hello...</span><br><span class="line">[info] Resolving org.fusesource.jansi#jansi;1.4 ...</span><br><span class="line">[info] Done updating.</span><br><span class="line">[info] Compiling 1 Scala source to /Users/hp/ghome/Spark-Scala/hello/target/scala-2.10/classes...</span><br><span class="line">[info] Running HelloWorld</span><br><span class="line">Hello, SBT</span><br><span class="line">[success] Total time: 3 s, completed 2016-3-17 9:38:44</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-SBT-项目工程结构详解"><a href="#3-SBT-项目工程结构详解" class="headerlink" title="3. SBT 项目工程结构详解"></a>3. SBT 项目工程结构详解</h2><p>一个典型的SBT项目工程结构如下图所示：</p>
<p><img src="https://image-static.segmentfault.com/396/971/3969713528-56ea0c71e094e_articlex" alt="segmentfault"></p>
<p><strong>build.sbt 详解</strong></p>
<p>build.sbt 相当于 maven-pom.xml，它是build定义文件。 </p>
<p>SBT 运行 使用 2 种形式 的 build 定义文件，</p>
<ol>
<li>one, put your project’s base directory，– build.sbt， a simple build definition； </li>
<li>other one, put project directory，can Use Scala language, more expressive。</li>
</ol>
<p>一个简单的build.sbt文件内容如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">name := <span class="string">"hello"</span>      <span class="comment">// 项目名称</span></span><br><span class="line"></span><br><span class="line">organization := <span class="string">"xxx.xxx.xxx"</span>  <span class="comment">// 组织名称</span></span><br><span class="line"></span><br><span class="line">version := <span class="string">"0.0.1-SNAPSHOT"</span>  <span class="comment">// 版本号</span></span><br><span class="line"></span><br><span class="line">scalaVersion := <span class="string">"2.9.2"</span>   <span class="comment">// 使用的Scala版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它build定义</span></span><br></pre></td></tr></table></figure>
<p> name 和 version的定义是必须的，因为如果想生成jar包的话，这两个属性的值将作为jar包名称的一部分, 各行之间以空行分隔。<br>除了定义以上项目相关信息，我们还可以在build.sbt中添加项目依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 添加源代码编译或者运行期间使用的依赖</span><br><span class="line">libraryDependencies += &quot;ch.qos.logback&quot; % &quot;logback-core&quot; % &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line">libraryDependencies += &quot;ch.qos.logback&quot; % &quot;logback-classic&quot; % &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">libraryDependencies ++= Seq(</span><br><span class="line">                            &quot;ch.qos.logback&quot; % &quot;logback-core&quot; % &quot;1.0.0&quot;,</span><br><span class="line">                            &quot;ch.qos.logback&quot; % &quot;logback-classic&quot; % &quot;1.0.0&quot;,</span><br><span class="line">                            ...</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">// 添加测试代码编译或者运行期间使用的依赖</span><br><span class="line">libraryDependencies ++= Seq(&quot;org.scalatest&quot; %% &quot;scalatest&quot; % &quot;1.8&quot; % &quot;test&quot;)</span><br></pre></td></tr></table></figure>
<p>当然， build.sbt文件中还可以定义很多东西，比如添加插件，声明额外的repository，声明各种编译参数等等</p>
<p><strong>project目录即相关文件介绍</strong></p>
<p>project目录下的几个文件可以根据情况添加。</p>
<p>build.properties 文件声明使用的要使用哪个版本的SBT来编译当前项目， 最新的sbt boot launcher可以能够兼容编译所有0.10.x版本的SBT构建项目，比如如果我使用的是0.12版本的sbt，但却想用0.11.3版本的sbt来编译当前项目，则可以在build.properties文件中添加sbt.version=0.11.3来指定。</p>
<p>plugins.sbt 文件用来声明当前项目希望使用哪些插件来增强当前项目使用的sbt的功能，比如像assembly功能，清理ivy local cache功能，都有相应的sbt插件供使用， 要使用这些插件只需要在 plugins.sbt 中声明即可.</p>
<p>为了能够成功加载这些sbt插件，我们将他们的查找位置添加到resolovers当中.</p>
<p><strong>其他</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ touch build.sbt</span><br><span class="line">$ mkdir src</span><br><span class="line">$ mkdir src/main</span><br><span class="line">$ mkdir src/main/java</span><br><span class="line">$ mkdir src/main/resources</span><br><span class="line">$ mkdir src/main/scala</span><br><span class="line">$ mkdir src/test</span><br><span class="line">$ mkdir src/test/java</span><br><span class="line">$ mkdir src/test/resources</span><br><span class="line">$ mkdir src/test/scala</span><br><span class="line">$ mkdir project</span><br><span class="line">$ ...</span><br></pre></td></tr></table></figure>
<p>可以使用giter8来自动化以上步骤.<br>giter8的更多信息可参考<a href="https://github.com//giter8" target="_blank" rel="external">https://github.com//giter8</a>.</p>
<h2 id="4-SBT-Cmd"><a href="#4-SBT-Cmd" class="headerlink" title="4. SBT Cmd"></a>4. SBT Cmd</h2><ol>
<li>actions – 显示对当前工程可用的命令</li>
<li>update – 下载依赖</li>
<li>compile – 编译代码</li>
<li>test – 运行测试代码</li>
<li>package – 创建一个可发布的jar包</li>
<li>publish-local – 把构建出来的jar包安装到本地的ivy缓存</li>
<li>publish – 把jar包发布到远程仓库（如果配置了的话)</li>
</ol>
<p>more cmd</p>
<ol>
<li>test-failed – 运行失败的spec</li>
<li>test-quick – 运行所有失败的以及/或者是由依赖更新的spec</li>
<li>clean-cache – 清除所有的sbt缓存。类似于sbt的clean命令</li>
<li>clean-lib – 删除lib_managed下的所有内容</li>
</ol>
<h2 id="5-Scala-HelloWorld"><a href="#5-Scala-HelloWorld" class="headerlink" title="5. Scala HelloWorld"></a>5. Scala HelloWorld</h2><p>SBT Scala HelloWorld 具体请看 : <a href="https://github.com/blair1/language/tree/master/scala/ScalaWorld" target="_blank" rel="external">Scala-Projects/HelloWorld</a></p>
<p>➜  HelloWorld&gt; sbt package</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[info] Loading project definition from /Users/hp/spark/HelloWorld/project</span><br><span class="line">[info] Set current project to HelloWorld (in build file:/Users/hp/spark/HelloWorld/)</span><br><span class="line">[info] Packaging /Users/hp/spark/HelloWorld/target/scala-2.11/helloworld_2.11-0.0.1-SNAPSHOT.jar ...</span><br><span class="line">[info] Done packaging.</span><br><span class="line">[success] Total time: 1 s, completed 2016-3-17 9:05:44</span><br></pre></td></tr></table></figure>
<p>➜  HelloWorld&gt; sbt run</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[info] Loading project definition from /Users/hp/spark/HelloWorld/project</span><br><span class="line">[info] Set current project to HelloWorld (in build file:/Users/hp/spark/HelloWorld/)</span><br><span class="line">[info] Running Hi</span><br><span class="line">Hi!</span><br><span class="line">[success] Total time: 1 s, completed 2016-3-17 9:07:43</span><br></pre></td></tr></table></figure>
<h2 id="6-Spark-HelloWorld"><a href="#6-Spark-HelloWorld" class="headerlink" title="6. Spark HelloWorld"></a>6. Spark HelloWorld</h2><p>Spark HelloWorld 具体请看 : <a href="https://github.com/blair101/bigdata-tools/tree/master/spark/HelloWorld" target="_blank" rel="external">Spark-Projects/HelloWorld</a></p>
<p>➜  HelloWorld&gt; sbt compile<br>➜  HelloWorld&gt; sbt package</p>
<pre><code class="shell">$SPARK_HOME/bin/spark-submit \
  --class &quot;HelloWorld&quot; \
    target/scala-2.11/helloworld_2.11-1.0.jar
</code></pre>
<h2 id="7-Referenced"><a href="#7-Referenced" class="headerlink" title="7. Referenced"></a>7. Referenced</h2><p>参考 : <a href="http://www.scala-sbt.org/0.13/docs/zh-cn/Getting-Started.html" target="_blank" rel="external">scala-sbt.org/0.13/docs/zh-cn/Getting-Started.html</a><br>参考 : <a href="https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown" target="_blank" rel="external">CSUG/real_world_scala/blob/master/02_sbt.markdown</a><br>参考 : <a href="http://www.scala-sbt.org/0.13.1/docs/Getting-Started/Hello.html" target="_blank" rel="external">scala-sbt.org/0.13.1/docs/Getting-Started</a><br>参考 : <a href="http://article.yeeyan.org/view/442873/404261" target="_blank" rel="external">译言网</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大数据平台CDH集群在线安装]]></title>
      <url>http://iequa.com/2016/03/14/hadoop/hadoop-cdh-install-online/</url>
      <content type="html"><![CDATA[<p>介绍了 CDH 集群的搭建与安装，其中 Server 安装步骤非常准确, Agent 需要进一步验证.</p>
<a id="more"></a>
<p>标签： Cloudera-Manager CDH Hadoop 部署 集群</p>
<blockquote>
<p>摘要：管理、部署Hadoop集群需要工具，Cloudera Manager便是其一。本文详细记录了以在线方式部署CDH集群&gt;的步骤。</p>
</blockquote>
<p>以Apache Hadoop为主导的大数据技术的出现，使得中小型公司对于大数据的存储与处理也拥有了武器。</p>
<p>目前Hadoop比较流行的主要有2个版本，Apache和Cloudera版本。</p>
<p>Apache Hadoop：维护人员比较多，更新频率比较快，但是稳定性比较差。<br>Cloudera Hadoop（CDH）：CDH：Cloudera公司的发行版本，基于Apache Hadoop的二次开发，优化了组件兼容和交互接口、简化安装配置、增加Cloudera兼容特性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据平台CDH集群 cdh-5.70-rpm_install 详细过程</span><br></pre></td></tr></table></figure>
<h1 id="Part-1-install-cdh-server"><a href="#Part-1-install-cdh-server" class="headerlink" title="Part 1 install cdh server"></a>Part 1 install cdh server</h1><h2 id="1-1-Ready-install-resources"><a href="#1-1-Ready-install-resources" class="headerlink" title="1.1 Ready install resources"></a>1.1 Ready install resources</h2><ol>
<li>CentOS Linux release 7.1.1503 (Core) cm-5.7.0 </li>
<li>cloudera-manager-installer.bin</li>
<li>adduser deploy</li>
</ol>
<p>centos7.1 在安装过程时，网络配置，设置静态IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>
<p>设置静态ip，以及指定ip地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE=&quot;eth0&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">IPADDR=192.168.1.110</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=8.8.4.4</span><br><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure>
<h2 id="1-2-网络配置（所有节点）"><a href="#1-2-网络配置（所有节点）" class="headerlink" title="1.2 网络配置（所有节点）"></a>1.2 网络配置（所有节点）</h2><p><strong>修改hostname为 cdh-server7</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　RedHat 的 hostname，就修改 /etc/sysconfig/network文件，将里面的 HOSTNAME 这一行修改成 HOSTNAME=NEWNAME，其中 NEWNAME 就是你要设置的 hostname。</span><br><span class="line"></span><br><span class="line">　　Debian发行版的 hostname 的配置文件是 /etc/hostname</span><br></pre></td></tr></table></figure>
<p><strong>修改ip与主机名的对应关系</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 ~]# vi /etc/hosts #修改ip与主机名的对应关系:</span><br><span class="line">192.168.181.190 node190</span><br><span class="line">192.168.181.198 node198</span><br><span class="line">192.168.181.196 node196</span><br></pre></td></tr></table></figure>
<p><strong>重启网络服务生效</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 ~]# service network restart</span><br></pre></td></tr></table></figure>
<p><strong>关闭SELINUX</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看SELINUX状态</span><br><span class="line"></span><br><span class="line">[root@cdh-server7 ~]#getenforce</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">若 SELINUX 没有关闭，按照下述方式关闭</span><br><span class="line"></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">修改SELinux=disabled。重启生效，可以等后面都设置完了重启主机</span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#       enforcing - SELinux security policy is enforced.</span><br><span class="line">#       permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#       disabled - SELinux is fully disabled.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= type of policy in use. Possible values are:</span><br><span class="line">#       targeted - Only targeted network daemons are protected.</span><br><span class="line">#       strict - Full SELinux protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 ~]# ping www.baidu.com</span><br></pre></td></tr></table></figure>
<p>以上步骤执行完毕后，重启主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启后再次检查下以上几点，确保环境配置正确。</p>
<h2 id="1-3-卸载-openjdk-所有节点"><a href="#1-3-卸载-openjdk-所有节点" class="headerlink" title="1.3 卸载 openjdk (所有节点)"></a>1.3 卸载 openjdk (所有节点)</h2><blockquote>
<p>注意 : 如果没有openjdk, 则不需要卸载，默认 centos7 没有</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep java</span><br><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep jdk</span><br><span class="line"></span><br><span class="line"># if exist java or jdk, uninstall, erase it.  example under this...</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.5.0-gcj-1.5.0.0-29.1.el6.x86_64</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.x86_64</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.45-2.4.3.3.el6.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="1-4-卸载-centOS7-默认mysql"><a href="#1-4-卸载-centOS7-默认mysql" class="headerlink" title="1.4 卸载 centOS7 默认mysql"></a>1.4 卸载 centOS7 默认mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep mariadb</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps mariadb-libs-5.5.41-2.el7_0.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="1-5-Cloudera-Manager安装"><a href="#1-5-Cloudera-Manager安装" class="headerlink" title="1.5 Cloudera Manager安装"></a>1.5 Cloudera Manager安装</h2><p>下载资源文件<a href="https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo" target="_blank" rel="external">https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo</a></p>
<p>将cloudera-manager.repo文件拷贝到所有节点的/etc/yum.repos.d/文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node196 ]# cd /home/deploy/cdh</span><br><span class="line">[root@node196 cdh]# wget https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/cloudera-manager.repo</span><br><span class="line">[root@cdh-server7 cdh]# mv cloudera-manager.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<p>验证repo文件是否起效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list|grep cloudera</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# yum list | grep cloudera</span><br><span class="line">cloudera-manager-agent.x86_64           5.7.0-1.cm560.p0.54.el7        cloudera-manager</span><br><span class="line">cloudera-manager-daemons.x86_64         5.7.0-1.cm560.p0.54.el7        cloudera-manager</span><br><span class="line">cloudera-manager-server.x86_64          5.7.0-1.cm560.p0.54.el7        cloudera-manager</span><br><span class="line">cloudera-manager-server-db-2.x86_64     5.7.0-1.cm560.p0.54.el7        cloudera-manager</span><br><span class="line">enterprise-debuginfo.x86_64             5.7.0-1.cm560.p0.54.el7        cloudera-manager</span><br><span class="line">oracle-j2sdk1.7.x86_64                  1.7.0+update67-1               cloudera-manager</span><br></pre></td></tr></table></figure>
<p>如果列出的不是你安装的版本，执行下面命令重试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all </span><br><span class="line">yum list | grep cloudera</span><br></pre></td></tr></table></figure>
<p>上传下列 <strong>rpm 包</strong> 到 [root@cdh-server7] 的 /home/deploy/cdh/cloudera-rpms (任意目录)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/deploy/cdh/cloudera-rpms</span><br><span class="line">cloudera-manager-agent-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-daemons-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-server-5.7.0-1.cm560.p0.54.el7.x86_64.rpm   ## agent not use</span><br><span class="line">cloudera-manager-server-db-2-5.7.0-1.cm560.p0.54.el7.x86_64.rpm  ## agent not use</span><br><span class="line">enterprise-debuginfo-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明 : 可从<a href="https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5/RPMS/x86_64/" target="_blank" rel="external">https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5/RPMS/x86_64/</a> 下载相关rpm包</p>
</blockquote>
<p>切换到rpms目录下，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# cd /home/deploy/cdh/cloudera-rpms/</span><br><span class="line">[root@cdh-server7 cloudera-rpms]# yum -y install *.rpm</span><br></pre></td></tr></table></figure>
<h2 id="1-6-拷贝资源包到目标目录"><a href="#1-6-拷贝资源包到目标目录" class="headerlink" title="1.6 拷贝资源包到目标目录"></a>1.6 拷贝资源包到目标目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从 http://archive.cloudera.com/cdh5/parcels/5.7.0/ 下载资源包</span><br></pre></td></tr></table></figure>
<p>将之前下载的Parcel那3个文件拷贝到/opt/cloudera/parcel-repo目录下（如果没有该目录，请自行创建）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# cp CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel /opt/cloudera/parcel-repo/CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel</span><br><span class="line">[root@cdh-server7 cdh]# cp CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha1 /opt/cloudera/parcel-repo/CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha</span><br><span class="line">[root@cdh-server7 cdh]# cp manifest.json /opt/cloudera/parcel-repo/manifest.json</span><br></pre></td></tr></table></figure>
<h2 id="1-7-配置-java-环境变量"><a href="#1-7-配置-java-环境变量" class="headerlink" title="1.7 配置 java 环境变量"></a>1.7 配置 java 环境变量</h2><p>设置JAVA_HOME</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]#vi /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_67-cloudera/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">[root@cdh-server7 cdh]#source /etc/profile</span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]#systemctl stop firewalld.service  #centos7,关闭防火墙</span><br></pre></td></tr></table></figure>
<p>以上步骤执行完毕后，重启主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="1-8-安装CM-只在主节点"><a href="#1-8-安装CM-只在主节点" class="headerlink" title="1.8 安装CM (只在主节点)"></a>1.8 安装CM (只在主节点)</h2><p><strong>以下两步骤请只在主节点上执行 :</strong></p>
<ul>
<li><p>进入该目录，给bin文件赋予可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# chmod a+x ./cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装CM (该步骤, 可能是不需要的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# ./cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>开始启动server端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# cd /etc/init.d/</span><br><span class="line">[root@cdh-server7 init.d]# ./cloudera-scm-server-db start</span><br><span class="line"></span><br><span class="line">[root@cdh-server7 init.d]# ./cloudera-scm-server start</span><br><span class="line">Starting cloudera-scm-server:                              [  OK  ]</span><br><span class="line">[root@cdh-server7 init.d]# tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 :<br> 机器重启之后，默认启动会导致异常<br> 需要按照该先启动cloudera-scm-server-db，再启动cloudera-scm-server的顺序执行</p>
</blockquote>
<h2 id="1-9-浏览器访问验证-主节点"><a href="#1-9-浏览器访问验证-主节点" class="headerlink" title="1.9 浏览器访问验证(主节点)"></a>1.9 浏览器访问验证(主节点)</h2><p>CM安装成功后浏览器输入<a href="http://ip:7180" target="_blank" rel="external">http://ip:7180</a>, 用户名和密码都输入admin，进入web管理界面。</p>
<p>通过浏览器访问验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.181.190:7180/</span><br></pre></td></tr></table></figure>
<p>如果打不开改网页，等待2分钟后。这个服务启动是需要一定时间的。</p>
<p>选择部署的版本，这里我们选择免费版的就可以了。</p>
<blockquote>
<p>如果不会设置，那么请参考 最靠谱的安装指南 <a href="http://www.jianshu.com/p/57179e03795f" target="_blank" rel="external">http://www.jianshu.com/p/57179e03795f</a></p>
</blockquote>
<p>安装服务时，数据库选择默认的嵌入式数据库</p>
<h1 id="Part-2-安装-agent"><a href="#Part-2-安装-agent" class="headerlink" title="Part 2 安装 agent"></a>Part 2 安装 agent</h1><blockquote>
<p>this step is similar， but I can’t be sure, exactly right. </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装 agent ，可以在单独的机器，主节点，可以只当做主，随意你</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为agent做配置,启动agent (所有节点)<br>agent 不需要装server，其他绝大部分步骤和 安装 server 相同。</p>
</blockquote>
<h2 id="2-1-网络配置"><a href="#2-1-网络配置" class="headerlink" title="2.1 网络配置"></a>2.1 网络配置</h2><p><strong>修改ip与主机名的对应关系</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-agent1 ~]# vi /etc/hosts #修改ip与主机名的对应关系:</span><br><span class="line">192.168.181.190 cdh-server7(node190)</span><br><span class="line">192.168.181.198 cdh-agent1(node198)</span><br><span class="line">192.168.181.196 cdh-agent2(node196)</span><br></pre></td></tr></table></figure>
<p><strong>重启网络服务生效</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 ~]# service network restart</span><br></pre></td></tr></table></figure>
<p><strong>关闭SELINUX</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看SELINUX状态</span><br><span class="line"></span><br><span class="line">[root@cdh-server7 ~]#getenforce</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">若 SELINUX 没有关闭，按照下述方式关闭</span><br><span class="line"></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">修改SELinux=disabled。重启生效，可以等后面都设置完了重启主机</span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#       enforcing - SELinux security policy is enforced.</span><br><span class="line">#       permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#       disabled - SELinux is fully disabled.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= type of policy in use. Possible values are:</span><br><span class="line">#       targeted - Only targeted network daemons are protected.</span><br><span class="line">#       strict - Full SELinux protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 ~]# ping www.baidu.com</span><br></pre></td></tr></table></figure>
<h2 id="2-2-卸载-openjdk-所有节点"><a href="#2-2-卸载-openjdk-所有节点" class="headerlink" title="2.2 卸载 openjdk (所有节点)"></a>2.2 卸载 openjdk (所有节点)</h2><blockquote>
<p>注意 : 如果没有openjdk, 则不需要卸载，默认 centos7 没有</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep java</span><br><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep jdk</span><br><span class="line"></span><br><span class="line"># if exist java or jdk, uninstall, erase it.  example under this...</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.5.0-gcj-1.5.0.0-29.1.el6.x86_64</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.x86_64</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.45-2.4.3.3.el6.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="2-3-卸载centOS7默认mysql"><a href="#2-3-卸载centOS7默认mysql" class="headerlink" title="2.3 卸载centOS7默认mysql"></a>2.3 卸载centOS7默认mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]# rpm -qa | grep mariadb</span><br><span class="line">[root@cdh-server7 deploy]# rpm -e --nodeps mariadb-libs-5.5.41-2.el7_0.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="2-4-cloudera-manager-repo"><a href="#2-4-cloudera-manager-repo" class="headerlink" title="2.4 cloudera-manager.repo"></a>2.4 cloudera-manager.repo</h2><blockquote>
<p>上传cloudera-manager.repo 到 cdh-agent1</p>
</blockquote>
<p>[root@cdh-agent1 cdh]# cp cloudera-manager.repo /etc/yum.repos.d/</p>
<p><strong>transparent_hugepage</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
<p><strong>vi /etc/rc.local 在文件尾放入 如下两条语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>
<p><strong>调整swappiness</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 10 &gt; /proc/sys/vm/swappiness</span><br><span class="line"># vi /etc/sysctl.conf</span><br><span class="line">vm.swappiness = 10</span><br></pre></td></tr></table></figure>
<h2 id="2-5-cdh-cloudera-rpms"><a href="#2-5-cdh-cloudera-rpms" class="headerlink" title="2.5 ~/cdh/cloudera-rpms"></a>2.5 ~/cdh/cloudera-rpms</h2><blockquote>
<p>上传下列rpm包到cdh-agent1的/home/deploy/cdh/cloudera-rpms</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cloudera-manager-agent-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-daemons-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">enterprise-debuginfo-5.7.0-1.cm560.p0.54.el7.x86_64.rpm</span><br><span class="line">oracle-j2sdk1.7-1.7.0+update67-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">[root@cdh-agent1 init.d]# cd /home/deploy/cdh/cloudera-rpms/</span><br><span class="line">[root@cdh-agent1 init.d]# yum -y install *.rpm</span><br></pre></td></tr></table></figure>
<p><strong>设置JAVA_HOME</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]#vi /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_67-cloudera/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">[root@cdh-server7 cdh]#source /etc/profile</span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 deploy]#systemctl stop firewalld.service  #centos7,关闭防火墙</span><br></pre></td></tr></table></figure>
<p>以上步骤执行完毕后，重启主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-agent1 init.d]# vi /etc/cloudera-scm-agent/config.ini</span><br><span class="line"></span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"># Hostname of the CM server.</span><br><span class="line">#server_host=localhost</span><br><span class="line">server_host=cdh-server7(node190)</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# cd /etc/init.d/</span><br><span class="line">[root@cdh-server7 init.d]# ./cloudera-scm-agent start</span><br><span class="line">Starting cloudera-scm-agent:                               [  OK  ]</span><br><span class="line">[root@cdh-server deploy]# tail -f /var/log//cloudera-scm-agent/cloudera-scm-agent.log</span><br></pre></td></tr></table></figure>
<hr>
<p>注意 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装YARN NodeManager失败时，需要删除 /yarn /var/lib/hadoop-yarn 目录再重新添加</span><br></pre></td></tr></table></figure>
<hr>
<p>CDH最靠谱的安装指南 : <a href="http://www.jianshu.com/p/57179e03795f" target="_blank" rel="external">http://www.jianshu.com/p/57179e03795f</a></p>
<h1 id="Part-3-恢复启动-Our-集群"><a href="#Part-3-恢复启动-Our-集群" class="headerlink" title="Part 3 恢复启动 Our 集群"></a>Part 3 恢复启动 Our 集群</h1><h2 id="3-1-确定-firewalld-close"><a href="#3-1-确定-firewalld-close" class="headerlink" title="3.1 确定 firewalld close"></a>3.1 确定 firewalld close</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld.service#启动firewall</span><br><span class="line">systemctl stop firewalld.service#停止firewall</span><br><span class="line">systemctl disable firewalld.service#禁止firewall开机启动</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 : 操作之前确定 firewalld 是关闭的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node19x flag]$ vim /etc/rc.local (/etc/rc.local 对应貌似相对dir /ect/init.d)</span><br><span class="line"></span><br><span class="line">  1 #!/bin/bash</span><br><span class="line">  2 # THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span><br><span class="line">  3 #</span><br><span class="line">  4 # It is highly advisable to create own systemd services or udev rules</span><br><span class="line">  5 # to run scripts during boot instead of using this file.</span><br><span class="line">  6 #</span><br><span class="line">  7 # In contrast to previous versions due to parallel execution during boot</span><br><span class="line">  8 # this script will NOT be run after all other services.</span><br><span class="line">  9 #</span><br><span class="line"> 10 # Please note that you must run &apos;chmod +x /etc/rc.d/rc.local&apos; to ensure</span><br><span class="line"> 11 # that this script will be executed during boot.</span><br><span class="line"> 12</span><br><span class="line"> 13 touch /var/lock/subsys/local</span><br><span class="line"> 14 echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"> 15 echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"> 16 service ntpd start</span><br><span class="line"> 17 service elasticsearch start</span><br></pre></td></tr></table></figure>
<h2 id="3-2-启动server端、cm"><a href="#3-2-启动server端、cm" class="headerlink" title="3.2 启动server端、cm"></a>3.2 启动server端、cm</h2><p>only at server node</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cdh-server7 cdh]# cd /etc/init.d/</span><br><span class="line">[root@cdh-server7 init.d]# ./cloudera-scm-server-db start</span><br><span class="line"></span><br><span class="line">[root@cdh-server7 init.d]# ./cloudera-scm-server start</span><br><span class="line">Starting cloudera-scm-server:                              [  OK  ]</span><br><span class="line">[root@cdh-server7 init.d]# tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br><span class="line"></span><br><span class="line">// 等待日志 7180 启动成功， 访问 : http://node190:7180/cmf/home</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 :<br>机器重启之后，默认启动会导致异常<br>需要按照该先启动cloudera-scm-server-db，再启动cloudera-scm-server的顺序执行</p>
</blockquote>
<p>一般以下 agent 是自动启动的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node190 init.d]# ./cloudera-scm-agent start</span><br><span class="line">cloudera-scm-agent is already running</span><br><span class="line">node190:./cloudera-scm-agent start</span><br><span class="line">node19x:./cloudera-scm-agent start</span><br><span class="line">node19x:./cloudera-scm-agent start</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="3-3-CM页面上启动各服务"><a href="#3-3-CM页面上启动各服务" class="headerlink" title="3.3 CM页面上启动各服务"></a>3.3 CM页面上启动各服务</h2><ol>
<li>CM 页面上重启 service monitor</li>
<li>CM 页面上重启 host monitor</li>
<li>CM 页面上启动各项服务 (如 : ZK, Flume, YARN, HDFS, Hive, Sqoop, Spark etc..)</li>
</ol>
<hr>
<h2 id="3-4-各个节点启动-ES"><a href="#3-4-各个节点启动-ES" class="headerlink" title="3.4 各个节点启动 ES"></a>3.4 各个节点启动 ES</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[deploy@node190 init.d]# ll</span><br><span class="line">total 44</span><br><span class="line">-rwxr-xr-x  1 root root  8671 Apr  2 04:52 cloudera-scm-agent</span><br><span class="line">lrwxrwxrwx. 1 root root    58 Apr 18 16:55 elasticsearch -&gt; /home/deploy/elasticsearch-1.7.1/bin/service/elasticsearch</span><br><span class="line">-rw-r--r--. 1 root root 13948 Sep 16  2015 functions</span><br><span class="line">-rwxr-xr-x. 1 root root  2989 Sep 16  2015 netconsole</span><br><span class="line">-rwxr-xr-x. 1 root root  6630 Sep 16  2015 network</span><br><span class="line">-rw-r--r--. 1 root root  1160 Apr  1 00:45 README</span><br></pre></td></tr></table></figure>
<p><strong>deploy</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/deploy/elasticsearch-1.7.1/bin/service</span><br><span class="line">[deploy@node190 init.d]<span class="comment"># ./elasticsearch start</span></span><br><span class="line">[deploy@node19x init.d]<span class="comment"># ./elasticsearch start</span></span><br><span class="line">[deploy@node19x init.d]<span class="comment"># ./elasticsearch start</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://node190:9200/_plugin/bigdesk/#cluster</span><br></pre></td></tr></table></figure>
<blockquote>
<p>等待同步数据完成，一般会很快，等待 Status 从 RED 变为 green 状态</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://node190:9200/_plugin/head/</span><br></pre></td></tr></table></figure>
<h2 id="3-5-启动-kibana"><a href="#3-5-启动-kibana" class="headerlink" title="3.5 启动 kibana"></a>3.5 启动 kibana</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[deploy@node196 ~]#</span><br><span class="line">cd /home/deploy/kibana-4.1.1-linux-x64</span><br><span class="line">    ./bin/kibana &gt; kibana.log 2&gt;&amp;1 &amp;              --@deploy</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 install spark ipython nodebook]]></title>
      <url>http://iequa.com/2016/03/11/ops/ops-centos7-ipython-nodebook-install/</url>
      <content type="html"><![CDATA[<blockquote>
<p>IPython notebook 目前已经成为用 Python 做教学、计算、科研的一个重要工具。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>IPython Notebook 使用浏览器作为界面，向后台的 IPython 服务器发送请求，并显示结果。</li>
<li>IPython Notebook 在浏览器的界面中使用单元(Cell)保存各种信息。Cell 有多种类型，经常使用的有表示格式化文本的 Markdown单元，和表示代码的 Code单元。</li>
</ul>
<h2 id="1-install-ifconfig"><a href="#1-install-ifconfig" class="headerlink" title="1. install ifconfig"></a>1. install ifconfig</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search ifconfig</span><br><span class="line">yum install net-tools.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="2-install-vim"><a href="#2-install-vim" class="headerlink" title="2. install vim"></a>2. install vim</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search vim</span><br><span class="line">yum install vim-enhanced</span><br></pre></td></tr></table></figure>
<h2 id="3-install-wget"><a href="#3-install-wget" class="headerlink" title="3. install wget"></a>3. install wget</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [libin@centos-linux-1 x]$ yum search wget</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.skyshe.cn</span><br><span class="line"> * extras: mirrors.163.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">============================================================================================ N/S matched: wget =============================================================================================</span><br><span class="line">wget.x86_64 : A utility <span class="keyword">for</span> retrieving files using the HTTP or FTP protocols</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use <span class="string">"search all"</span> <span class="keyword">for</span> everything.</span><br><span class="line"> </span><br><span class="line"> [libin@centos-linux-1 x]$ yum install wget.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="4-install-Jdk"><a href="#4-install-Jdk" class="headerlink" title="4. install Jdk"></a>4. install Jdk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># green install jdk-7u80-linux-x64.gz</span></span><br><span class="line"><span class="comment"># edit /etc/profile add</span></span><br><span class="line"><span class="comment">## libin add ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### JAVA ###</span></span><br><span class="line">JAVA_HOME=/home/x/jdk</span><br><span class="line">JAVA_BIN=<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JAVA_BIN PATH CLASSPATH</span><br><span class="line"><span class="string">"/etc/profile"</span> 86L, 2035C</span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/profile：该文件是用户登录时，操作系统定制用户环境时使用的第一个文件，应用于登录到系统的每一个用户。 对所有用户有效 ##</span></span><br></pre></td></tr></table></figure>
<h2 id="5-install-Scala"><a href="#5-install-Scala" class="headerlink" title="5. install Scala"></a>5. install Scala</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># green install scala-2.10.4.tgz</span></span><br><span class="line"><span class="comment"># edit /etc/profile add</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Scala ###</span></span><br><span class="line"><span class="comment">#export SCALA_HOME=/usr/local/xSoft/scala</span></span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/home/x/scala</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;SCALA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h2 id="6-install-Spark-Standalone"><a href="#6-install-Spark-Standalone" class="headerlink" title="6. install Spark (Standalone)"></a>6. install Spark (Standalone)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green install spark-1.5.2-bin-hadoop2.6.tgz</span><br><span class="line">cp conf/spark-env.sh.template conf/spark-env.sh</span><br></pre></td></tr></table></figure>
<p>edit conf/spark-env.sh add</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/x/jdk</span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/home/x/scala</span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/home/x/spark</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=192.168.181.113</span><br><span class="line"><span class="built_in">export</span> MASTER=spark://192.168.181.113:7077</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_EXECUTOR_INSTANCES=2</span><br><span class="line"><span class="built_in">export</span> SPARK_EXECUTOR_CORES=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=1000m</span><br><span class="line"><span class="built_in">export</span> SPARK_EXECUTOR_MEMORY=300m</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_LIBRARY_PATH=<span class="variable">$&#123;SPARK_HOME&#125;</span>/lib</span><br><span class="line"></span><br><span class="line"><span class="comment">#export SPARK_LAUNCH_WITH_SCALA=0</span></span><br><span class="line"><span class="comment">#export SCALA_LIBRARY_PATH=$&#123;SPARK_HOME&#125;/lib</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#export SPARK_LIBRARY_PATH=/home/deploy/spark/spark-1.5.2-bin-hadoop2.6/lib</span></span><br></pre></td></tr></table></figure>
<h2 id="7-install-ipython-nodebook"><a href="#7-install-ipython-nodebook" class="headerlink" title="7. install ipython-nodebook"></a>7. install ipython-nodebook</h2><p>openssh、zlib<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-clients</span><br><span class="line">yum install zlib</span><br></pre></td></tr></table></figure></p>
<p>setuptools、pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf setuptools-18.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> setuptools-18.1</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line">tar xvf pip-8.1.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pip-8.1.0</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<p>ipython、matplotlib</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip install ipython</span><br><span class="line">sudo pip install matplotlib</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mymac : sudo pip install –upgrade ipython –ignore-installed six</p>
</blockquote>
<p>python-dev、g++</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install python-devel （如果没有安装 python 源代码，会报找不到 Python.h 的头文件错误）</span><br><span class="line">sudo yum install gcc-c++</span><br></pre></td></tr></table></figure>
<p><strong>install python-notebook</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前面install的各种py相关, 为个这一步</span></span><br><span class="line"></span><br><span class="line">sudo pip install notebook</span><br></pre></td></tr></table></figure>
<h2 id="8-start-up-notebook"><a href="#8-start-up-notebook" class="headerlink" title="8. start-up notebook"></a>8. start-up notebook</h2><p><strong>startup ipython notebook</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_dir</span><br><span class="line">ipython notebook</span><br></pre></td></tr></table></figure>
<p><strong>startup ipython spark notebook</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PYSPARK_DRIVER_PYTHON=ipython PYSPARK_DRIVER_PYTHON_OPTS=<span class="string">"notebook --ip=192.168.181.113"</span> /home/x/spark/bin/pyspark</span><br></pre></td></tr></table></figure>
<p>浏览器访问 <a href="http://192.168.181.113:8888/notebooks" target="_blank" rel="external">http://192.168.181.113:8888/notebooks</a></p>
<p><img src="/images/ops/ops-ipython-01.png" alt="ipython"></p>
<h2 id="9-spark-notebook-example1"><a href="#9-spark-notebook-example1" class="headerlink" title="9. spark-notebook example1"></a>9. spark-notebook example1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%pylab inline</span><br><span class="line">%matplotlib inline</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">data =[33,25,20,12,10]</span><br><span class="line">plt.figure(num=1, figsize=(6,6))</span><br><span class="line">plt.axes(aspect=1)</span><br><span class="line">plt.title(<span class="string">'Plot 3'</span>, size=14)</span><br><span class="line">plt.pie(data, labels=(<span class="string">'Group 1'</span>,<span class="string">'Group 2'</span>,<span class="string">'Group 3'</span>,<span class="string">'Group 4'</span>,<span class="string">'Group 5'</span>))</span><br><span class="line">plt.savefig(<span class="string">'/home/x/spark/test_libin/plot3.png'</span>, format=<span class="string">'png'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/ops/ops-ipython-02.png" alt="ipython"></p>
<h2 id="maybe-attention-point"><a href="#maybe-attention-point" class="headerlink" title="maybe attention point"></a>maybe attention point</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -V</span><br><span class="line"></span><br><span class="line"><span class="comment">#若系统默认是python2.6，需要升级到2.7</span></span><br><span class="line">tar xvf Python-2.7.tgz</span><br><span class="line">./configure --with-zlib=/usr/include --prefix=/usr/<span class="built_in">local</span>/python27 --prefix=/usr/<span class="built_in">local</span>/python27</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">mv /usr/bin/python /usr/bin/python_old</span><br><span class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python27/bin/python /usr/bin/</span><br><span class="line">python</span><br><span class="line">此处已经可以正常使用python2.7了</span><br><span class="line">但是因为yum是使用的2.6的版本来用的，所以 还需要修改一下</span><br><span class="line">[root@wangyuelou Python-2.7.2]<span class="comment"># vim /usr/bin/yum</span></span><br><span class="line"><span class="comment">#!/usr/bin/python   #修改此处为2.6的位置</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sqoop introduce]]></title>
      <url>http://iequa.com/2016/02/16/hadoop/hadoop-sqoop-learn-use01/</url>
      <content type="html"><![CDATA[<p>Sqoop 即 SQL to Hadoop, 是一款方便的在传统关系数据库与 Hadoop 之间进行数据迁移的工具，充分利用 MapReduce 并行特点以批处理的方式加快数据传输.</p>
<a id="more"></a>
<h2 id="1-Sqoop-what"><a href="#1-Sqoop-what" class="headerlink" title="1. Sqoop what ?"></a>1. Sqoop what ?</h2><p>sqoop 即 SQL to Hadoop ，是一款方便的在传统关系数据库与 Hadoop 之间进行数据迁移的工具，充分利用 MapReduce 并行特点以批处理的方式加快数据传输，发展至今主要演化了二大版本，sqoop1和sqoop2。 </p>
<p>sqoop : clouder 公司开发</p>
<p><strong>生产背景</strong></p>
<ol>
<li>mysql  导入 Hadoop </li>
<li>Hadoop 导入 mysql</li>
</ol>
<p>注 : 以上 Hadoop 指 Hive、HBase、HDFS 等</p>
<h2 id="2-Sqoop-特点"><a href="#2-Sqoop-特点" class="headerlink" title="2. Sqoop 特点"></a>2. Sqoop 特点</h2><p>sqoop架构非常简单，其整合了Hive、Hbase和Oozie，通过map-reduce任务来传输数据，从而提供并发特性和容错。</p>
<p>   Sqoop 由两部分组成：客户端(client)和服务端(server)。需要在集群的其中某个节点上安装server，该节点的服务端可以作为其他 Sqoop 客户端的入口点。</p>
<p>   在 server 端的节点上必须安装有 Hadoop。client 可以安装在任意数量的机子上。在装有客户端的机子上不需要安装 Hadoop。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop 官网 : https://sqoop.apache.org</span><br><span class="line"></span><br><span class="line">1.4.5官方文档 : https://sqoop.apache.org/docs/1.4.5/</span><br><span class="line"></span><br><span class="line">sqoop2不推荐的原因 : http://blog.csdn.net/robbyo/article/details/50737356</span><br></pre></td></tr></table></figure>
<h2 id="3-Sqoop-优缺点"><a href="#3-Sqoop-优缺点" class="headerlink" title="3. Sqoop 优缺点"></a>3. Sqoop 优缺点</h2><p><strong>优点</strong></p>
<ol>
<li>高效可控的利用资源，任务并行度，超时时间。</li>
<li>数据类型映射与转化，可自动进行，用户也可自定义 .</li>
<li>支持多种主流数据库，MySQL,Oracle，SQL Server，DB2等等 。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>基于命令行的操作方式，易出错，且不安全。</li>
<li>数据传输和数据格式是紧耦合的，这使得connector无法支持所有的数据格式</li>
<li>用户名和密码暴漏出来</li>
</ol>
<h2 id="4-Sqoop-原理"><a href="#4-Sqoop-原理" class="headerlink" title="4. Sqoop 原理"></a>4. Sqoop 原理</h2><h3 id="4-1-Sqoop的import原理"><a href="#4-1-Sqoop的import原理" class="headerlink" title="4.1 Sqoop的import原理"></a>4.1 Sqoop的import原理</h3><p>Sqoop 在 import 时，需要制定 split-by 参数。</p>
<p>Sqoop 根据不同的 split-by参数值 来进行切分, 然后将切分出来的区域分配到不同 map 中。每个map中再处理数据库中获取的一行一行的值，写入到 HDFS 中。同时split-by 根据不同的参数类型有不同的切分方法，如比较简单的int型，Sqoop会取最大和最小split-by字段值，然后根据传入的 num-mappers来确定划分几个区域。 </p>
<p>比如 select max(split_by),min(split-by) from 得到的 max(split-by)和 min(split-by) 分别为 1000 和 1, 而 num-mappers 为 2 的话，则会分成两个区域 (1,500) 和 (501-100), 同时也会分成 2个sql 给 2个map 去进行导入操作，分别为 select XXX from table where split-by&gt;=1 and split-by<500 和="" select="" xxx="" from="" table="" where="" split-by="">=501 and split-by&lt;=1000。最后每个map各自获取各自SQL中的数据进行导入工作。</500></p>
<h3 id="4-2-Sqoop的export原理"><a href="#4-2-Sqoop的export原理" class="headerlink" title="4.2. Sqoop的export原理"></a>4.2. Sqoop的export原理</h3><p>根据 mysql 表名称，生成一个以表名称命名的 Java类，该类继承了 sqoopRecord的，是一个只有 Map 的 MR，且自定义了输出字段。</p>
<p>sqoop export –connect jdbc:mysql://$url:3306/$3?characterEncoding=utf8 –username $username –password $password –table $1 –export-dir $2 –input-fields-terminated-by ‘|’ –null-non-string ‘0’ –null-string ‘0’;</p>
<h2 id="5-Sqoop-使用实例"><a href="#5-Sqoop-使用实例" class="headerlink" title="5. Sqoop 使用实例"></a>5. Sqoop 使用实例</h2><p><strong>环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop: sqoop-1.4.5+cdh5.3.6+78</span><br><span class="line">hive : hive-0.13.1+cdh5.3.6+397</span><br><span class="line">hbase: hbase-0.98.6+cdh5.3.6+115</span><br></pre></td></tr></table></figure>
<h3 id="5-1-Mysql-to-Hadoop"><a href="#5-1-Mysql-to-Hadoop" class="headerlink" title="5.1. Mysql to Hadoop"></a>5.1. Mysql to Hadoop</h3><ul>
<li>Mysql to Hdfs</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">  --connect $&#123;jdbc_url&#125; --username $&#123;jdbc_username&#125; --password  $&#123;jdbc_passwd&#125; \</span><br><span class="line">  --query &quot;$&#123;exec_sql&#125;&quot; \</span><br><span class="line">  --split-by $&#123;id&#125; -m 10 \</span><br><span class="line">  --target-dir $&#123;target_dir&#125; \</span><br><span class="line">  --fields-terminated-by &quot;\001&quot; --lines-terminated-by &quot;\n&quot; \</span><br><span class="line">  --hive-drop-import-delims \</span><br><span class="line">  --null-string &apos;\\N&apos; --null-non-string &apos;\\N&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>Mysql To Hive</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">  --connect $&#123;jdbc_url&#125; \</span><br><span class="line">  --username $&#123;jdbc_username&#125; --password  $&#123;jdbc_passwd&#125; \</span><br><span class="line">  --table $&#123;jdbc_table&#125; --fields-terminated-by &quot;\001&quot; --lines-terminated-by &quot;\n&quot; \</span><br><span class="line">  --hive-import --hive-overwrite --hive-table $&#123;hive_table&#125; \</span><br><span class="line">  --null-string &apos;\\N&apos; --null-non-string &apos;\\N&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>Mysql To HBase</li>
</ul>
<h3 id="5-2-Hadoop-to-Mysql"><a href="#5-2-Hadoop-to-Mysql" class="headerlink" title="5.2 Hadoop to Mysql"></a>5.2 Hadoop to Mysql</h3><ul>
<li>Hdfs To Mysql</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqoop <span class="built_in">export</span> -D sqoop.export.records.per.statement=10 \</span><br><span class="line">--connect jdbc:mysql://192.168.***.**:3306/***?autoReconnect=<span class="literal">true</span> </span><br><span class="line">--username *** </span><br><span class="line">--password *** </span><br><span class="line">--table mds_dm_rs_shop_result \</span><br><span class="line">--fields-terminated-by <span class="string">'\t'</span> </span><br><span class="line">--export-dir <span class="string">"/dc_ext/xbd/dm/mds/mds_dm_rs_shop_result/dt=20170410"</span> </span><br><span class="line">--null-string <span class="string">'\\N'</span> </span><br><span class="line">--null-non-string <span class="string">'\\N'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>refence article</strong></p>
<p><a href="http://www.zihou.me/html/2014/01/28/9114.html" target="_blank" rel="external">Sqoop中文文档</a><br><a href="http://www.aboutyun.com/thread-12684-1-1.html" target="_blank" rel="external">Hive to Mysql 常遇九大问题总结</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive Introduce 1]]></title>
      <url>http://iequa.com/2016/02/15/hadoop/hadoop-hive-brief/</url>
      <content type="html"><![CDATA[<ol>
<li>初步了解 Hadoop 生态圈</li>
<li>初步了解 Hive 架构图</li>
</ol>
<a id="more"></a>
<h2 id="1-Hive-Introduce"><a href="#1-Hive-Introduce" class="headerlink" title="1. Hive Introduce"></a>1. Hive Introduce</h2><h3 id="1-1-Hive-Preface"><a href="#1-1-Hive-Preface" class="headerlink" title="1.1 Hive Preface"></a>1.1 Hive Preface</h3><p><strong>Hadoop</strong></p>
<ol>
<li>Hadoop 生态系统 是 处理大数据集而产生的解决方案。</li>
<li>Hadoop 实现计算模型 MapReduce, 可将计算任务分割成多个处理单元，这个计算模型下面是一个 HDFS。</li>
</ol>
<p><strong>Hive</strong></p>
<ol>
<li>Hive 提供了一个 Hive查询语言 HiveQL, 查询转换为 MapReduce job</li>
<li>Hive 适合做数据仓库，可离线维护海量数据，可对数据进行挖掘, 形成报告等</li>
<li>Hadoop、HDFS 设计本身限制了 Hive 所能胜任的工作, Hive 不支持记录级别的更新、插入 或者 删除 操作。</li>
</ol>
<p><strong>Hive 运行架构</strong></p>
<ol>
<li>使用 HQL 作为查询接口；</li>
<li>使用 MapReduce 作为执行层；</li>
<li>使用 HDFS 作为存储层；</li>
</ol>
<h3 id="1-2-Hadoop-Mapreduce"><a href="#1-2-Hadoop-Mapreduce" class="headerlink" title="1.2 Hadoop / Mapreduce"></a>1.2 Hadoop / Mapreduce</h3><p><code>Input -&gt; Mappers -&gt; Sort,Shuffle -&gt; Reducers -&gt; Output</code></p>
<h3 id="1-3-Hive-系统架构"><a href="#1-3-Hive-系统架构" class="headerlink" title="1.3 Hive 系统架构"></a>1.3 Hive 系统架构</h3><p><img src="/images/hadoop/hive-02.png" alt="Hive 系统架构"></p>
<h2 id="2-Hive-架构组件分析"><a href="#2-Hive-架构组件分析" class="headerlink" title="2. Hive 架构组件分析"></a>2. Hive 架构组件分析</h2><p><strong>本章重点 :</strong></p>
<ol>
<li>初步了解 Hive 的工作流</li>
<li>初步了解 hive 的工作组件</li>
</ol>
<h3 id="2-1-元数据存储Metastore"><a href="#2-1-元数据存储Metastore" class="headerlink" title="2.1 元数据存储Metastore"></a>2.1 元数据存储Metastore</h3><ul>
<li><p>Hive的数据由两部分组成：数据文件 和 元数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元数据存储，Derby只能用于一个Hive连接，一般存储在MySQL。</span><br><span class="line"></span><br><span class="line">元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2-驱动-Driver"><a href="#2-2-驱动-Driver" class="headerlink" title="2.2 驱动 (Driver)"></a>2.2 驱动 (Driver)</h3><ul>
<li>编译器</li>
<li>优化器</li>
<li>执行器</li>
</ul>
<p>用户通过下面的接口提交Hive给Driver，由Driver进行HQL语句解析，此时从Metastore中获取表的信息，先生成逻辑计划，再生成物理计划，再由Executor生成Job交给Hadoop运行，然后由Driver将结果返回给用户。</p>
<p>编译器（Hive的核心）：1，语义解析器（ParseDriver），将查询字符串转换成解析树表达式；2，语法解析器（SemanticAnalyzer），将解析树转换成基于语句块的内部查询表达式；3，逻辑计划生成器（Logical Plan Generator），将内部查询表达式转换为逻辑计划，这些计划由逻辑操作树组成，操作符是Hive的最小处理单元，每个操作符处理代表一道HDFS操作或者是MR作业；4，查询计划生成器（QueryPlan Generator），将逻辑计划转化成物理计划（MR Job）。</p>
<p>优化器：优化器是一个演化组件，当前它的规则是：列修剪，谓词下压。</p>
<p>执行器：编译器将操作树切分成一个Job链（DAG），执行器会顺序执行其中所有的Job；如果Task链不存在依赖关系，可以采用并发执行的方式进行Job的执行。</p>
<h3 id="2-3-接口"><a href="#2-3-接口" class="headerlink" title="2.3 接口"></a>2.3 接口</h3><p><strong>CLI、HWI、ThriftServer</strong></p>
<ol>
<li><p>CLI：为命令行工具，默认服务。bin/hive或bin/hive–service cli；</p>
</li>
<li><p>HWI：为Web接口，可以用过浏览器访问Hive，默认端口9999，启动方式为bin/hive –service hwi;</p>
</li>
<li><p>ThriftServer：通过Thrift对外提供服务，默认端口是10000，启动方式为bin/hive –service hiveserver;</p>
</li>
</ol>
<p><strong> 连接hive-metastore(如mysql)的三种方式 </strong></p>
<ol>
<li>单用户模式。此模式连到数据库Derby，一般用于Unit Test。<br><img src="/images/hadoop/hive-longdis-model.jpeg" alt="单用户模式"></li>
<li>多用户模式。通过网络连接到一个数据库中，是最经常使用到的模式。<br><img src="/images/hadoop/hive-more-user-model.jpeg" alt="多用户模式"></li>
<li>远程服务器模式。用于非Java客户端访问元数据库，在服务器端启动MetaStoreServer，客户端利用Thrift协议通过MetaStoreServer访问元数据库。<br><img src="/images/hadoop/hive-longdis-model.jpeg" alt="远程服务器模式"></li>
</ol>
<h3 id="2-4-其他服务"><a href="#2-4-其他服务" class="headerlink" title="2.4 其他服务"></a>2.4 其他服务</h3><p><strong>bin/hive –service -help</strong></p>
<ol>
<li><p>metastore   (bin/hive –service metastore)</p>
</li>
<li><p>hiveserver2（bin/hive –service hiveserver2）</p>
</li>
</ol>
<p><strong>HiveServer2</strong></p>
<ol>
<li><p>HiveServer2是HieServer改进版本，它提供给新的ThriftAPI来处理JDBC或者ODBC客户端，进行Kerberos身份验证，多个客户端并发</p>
</li>
<li><p>HS2还提供了新的CLI：BeeLine，是Hive 0.11引入的新的交互式CLI，基于SQLLine，可以作为Hive JDBC Client 端访问HievServer2，启动一个beeline就是维护了一个session.</p>
</li>
</ol>
<p><strong>Hive下载地址</strong></p>
<ol>
<li><p>cdh-hive : <a href="https://repository.cloudera.com/artifactory/cloudera-repos/org/apache/hive/hive-exec/0.13.1-cdh5.3.6/" target="_blank" rel="external">hive0.13.1-cdh5.3.6 jar 包</a> (没用)</p>
</li>
<li><p>apache-hive : <a href="http://archive.apache.org/dist/hive/" target="_blank" rel="external">Apache-Hive</a></p>
</li>
</ol>
<p><strong>Hive-Beeline 试验成功</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">下载 apache-hive-0.13.1-bin, apache-hadoop2.5，配置 HADOOP_HOME, 启动 </span><br><span class="line"></span><br><span class="line">➜  ./apache-hive-0.13.1-bin/bin/beeline</span><br><span class="line">Beeline version 0.13.1 by Apache Hive</span><br><span class="line">beeline&gt; !connect jdbc:hive2://node190:10000 hdfs 1</span><br><span class="line">scan complete in 3ms</span><br><span class="line">Connecting to jdbc:hive2://node190:10000</span><br><span class="line">Connected to: Apache Hive (version 0.13.1-cdh5.3.6)</span><br><span class="line">Driver: Hive JDBC (version 0.13.1)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">0: jdbc:hive2://node190:10000&gt; select count(*) from ods_dm_shop_tmp;</span><br><span class="line">+-------+</span><br><span class="line">|  _c0  |</span><br><span class="line">+-------+</span><br><span class="line">| 1091  |</span><br><span class="line">+-------+</span><br><span class="line">1 row selected (24.815 seconds)</span><br><span class="line">0: jdbc:hive2://node190:10000&gt;</span><br><span class="line"></span><br><span class="line">说明 : beeline 可以成功，用代码 jdbc 就可以成功</span><br><span class="line"></span><br><span class="line">安装 hadoop 参考了 《Spark大数据处理》高彦杰@著, 不用配置直接绿色简单版</span><br></pre></td></tr></table></figure>
<p><strong>Hive table</strong></p>
<p>  table 中的一个 Partition 对应表下的一个子目录<br>  每一个 Bucket 对应一个文件；<br>  Hive的默认数据仓库目录是/user/hive/warehouse<br>  在hive-site.xml中由hive.metastore.warehouse.dir项定义；</p>
<h2 id="reference-article"><a href="#reference-article" class="headerlink" title="reference article"></a>reference article</h2><p>参考 : <a href="http://blog.csdn.net/lalaguozhe/article/details/11776055" target="_blank" rel="external">CSDN - Hive Server 2 调研，安装和部署</a><br>参考 : <a href="http://www.geedoo.info/beeline-abnormal-connection-hiveserver2.html" target="_blank" rel="external">极豆技术博客 - Beeline连接hiveserver2异常</a><br>参考 : <a href="http://blog.csdn.net/skywalker_only/article/details/38366347" target="_blank" rel="external">Hive学习之HiveServer2 JDBC客户端</a><br>参考 : <a href="https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-Beeline" target="_blank" rel="external">HiveServer2 Clients beeline</a><br>参考 : <a href="http://www.aboutyun.com/blog-6-1855.html" target="_blank" rel="external">Beeline连接hiveserver2异常</a><br>参考 : <a href="http://blog.csdn.net/skywalker_only/article/details/38335235" target="_blank" rel="external">Hive学习之HiveServer2服务端配置与启动</a></p>
<p><strong>other tmp</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Chap 7 HiveQL 视图 ##</span><br><span class="line">## Chap 8 HiveQL 索引 ##</span><br><span class="line">## Chap 9 模式设计 ##</span><br><span class="line">## Chap 10 调优 ##</span><br><span class="line">## Chap 11 其他文件格式和压缩方法 ##</span><br><span class="line">## Chap 12 开发 ##</span><br><span class="line">## Chap 13 函数 ##</span><br><span class="line">## Chap 14 Streaming ##</span><br><span class="line">## Chap 15 自定义Hive文件和记录格式 ##</span><br><span class="line">## Chap 16 Hive 的 Thrift 服务 ##</span><br><span class="line">## Chap 11 其他文件格式和压缩方法 ##</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Introduce and Install]]></title>
      <url>http://iequa.com/2016/02/01/spark/spark-introduce-and-install/</url>
      <content type="html"><![CDATA[<p>介绍 Spark 的历史，介绍 Spark 的安装与部署，介绍 Spark 的代码架构 等</p>
<a id="more"></a>
<p>Spark 发源于 美国加州大学伯克利分校 AMPLap 大数据分析平台<br>Spark 立足于内存计算、从多迭代批量处理出发<br>Spark 兼顾数据仓库、流处理、图计算 等多种计算范式，大数据系统领域全栈计算平台  </p>
<p><a href="http://spark.apache.org" target="_blank" rel="external">spark.apache.org</a> </p>
<blockquote>
<p>University of California, Berkeley </p>
</blockquote>
<h2 id="1-Spark-的历史与发展"><a href="#1-Spark-的历史与发展" class="headerlink" title="1. Spark 的历史与发展"></a>1. Spark 的历史与发展</h2><ul>
<li>2009 年 : Spark 诞生于 AMPLab  </li>
<li>2014-02 : Apache 顶级项目  </li>
<li>2014-05 : Spark 1.0.0 发布</li>
</ul>
<h2 id="2-Spark-之于-Hadoop"><a href="#2-Spark-之于-Hadoop" class="headerlink" title="2. Spark 之于 Hadoop"></a>2. Spark 之于 Hadoop</h2><p> Spark 是 MapReduce 的替代方案, 且兼容 HDFS、Hive 等分布式存储层。</p>
<p> Spark 相比 Hadoop MapReduce 的优势如下 :</p>
<ol>
<li>中间结果输出</li>
<li>数据格式和内存布局</li>
<li>执行策略  </li>
<li>任务调度的开销</li>
</ol>
<blockquote>
<p>Spark用事件驱动类库AKKA来启动任务, 通过线程池复用线程避免进线程启动切换开销</p>
</blockquote>
<h2 id="3-Spark-能带来什么"><a href="#3-Spark-能带来什么" class="headerlink" title="3. Spark 能带来什么 ?"></a>3. Spark 能带来什么 ?</h2><ol>
<li>打造全栈多计算范式的高效数据流水线</li>
<li>轻量级快速处理, 并支持 Scala、Python、Java</li>
<li>与 HDFS 等 存储层 兼容</li>
</ol>
<h2 id="4-Spark-安装与部署"><a href="#4-Spark-安装与部署" class="headerlink" title="4. Spark 安装与部署"></a>4. Spark 安装与部署</h2><p>Spark 主要使用 HDFS 充当持久化层，所以完整的安装 Spark 需要先安装 Hadoop.<br>Spark 是计算框架, 它主要使用 HDFS 充当持久化层。</p>
<p><strong>Linux 集群安装 Spark</strong></p>
<ol>
<li>安装 JDK</li>
<li>安装 Scala</li>
<li>配置 SSH 免密码登陆 (可选)</li>
<li>安装 Hadoop</li>
<li>安装 Spark</li>
<li>启动 Spark 集群</li>
</ol>
<p><a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">Spark官网下载</a></p>
<h3 id="4-1-安装-Spark"><a href="#4-1-安装-Spark" class="headerlink" title="4.1 安装 Spark"></a>4.1 安装 Spark</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(1). download  spark-1.5.2-bin-hadoop2.6.tgz</span><br><span class="line"></span><br><span class="line">(2). tar -xzvf spark-1.5.2-bin-hadoop2.6.tgz</span><br><span class="line"></span><br><span class="line">(3). 配置 conf/spark-env.sh</span><br><span class="line">    1) 详细复杂参数配置参见 官网 Configuration</span><br><span class="line">    2) vim conf/spark-env.sh</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</span><br><span class="line">    <span class="built_in">export</span> SCALA_HOME=/usr/<span class="built_in">local</span>/Cellar/scala/2.11.5</span><br><span class="line">    <span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/xSoft/spark</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">export</span> SPARK_MASTER_IP=ip</span><br><span class="line">    <span class="built_in">export</span> MASTER=spark://ip:7077</span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> SPARK_EXECUTOR_INSTANCES=2</span><br><span class="line">    <span class="built_in">export</span> SPARK_EXECUTOR_CORES=1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> SPARK_WORKER_MEMORY=1000m</span><br><span class="line">    <span class="built_in">export</span> SPARK_EXECUTOR_MEMORY=300m</span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> SPARK_LIBRARY_PATH=<span class="variable">$&#123;SPARK_HOME&#125;</span>/lib</span><br><span class="line"></span><br><span class="line">(4). 配置 conf/slaves (测试可选)</span><br><span class="line">(5). 一般需要 startup ssh server.</span><br></pre></td></tr></table></figure>
<h3 id="4-2-启动-Spark-集群"><a href="#4-2-启动-Spark-集群" class="headerlink" title="4.2 启动 Spark 集群"></a>4.2 启动 Spark 集群</h3><p>在 Spark 根目录启动 Spark</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br><span class="line">./sbin/stop-all.sh</span><br></pre></td></tr></table></figure>
<p>启动后 jps 查看 会有 Master 进程存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  spark-1.5.2-bin-hadoop2.6  jps</span><br><span class="line">11262 Jps</span><br><span class="line">11101 Master</span><br><span class="line">11221 Worker</span><br></pre></td></tr></table></figure>
<h3 id="4-3-Spark-集群初试"><a href="#4-3-Spark-集群初试" class="headerlink" title="4.3 Spark 集群初试"></a>4.3 Spark 集群初试</h3><p>可以通过两种方式运行 Spark 样例 :</p>
<ul>
<li>以 ./run-example 的方式执行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/xSoft/spark</span><br><span class="line">➜  spark ./sbin/start-all.sh</span><br><span class="line">➜  spark ./bin/run-example org.apache.spark.examples.SparkPi</span><br></pre></td></tr></table></figure>
<ul>
<li>以 ./Spark Shell 方式执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; import org.apache.spark._</span><br><span class="line">import org.apache.spark._</span><br><span class="line"></span><br><span class="line">scala&gt; object SparkPi &#123;</span><br><span class="line">     |</span><br><span class="line">     |   def main(args: Array[String]) &#123;</span><br><span class="line">     |</span><br><span class="line">     |     val slices = 2</span><br><span class="line">     |     val n = 100000 * slices</span><br><span class="line">     |</span><br><span class="line">     |     val count = sc.parallelize(1 to n, slices).map &#123; i =&gt;</span><br><span class="line">     |</span><br><span class="line">     |       val x = math.random * 2 - 1</span><br><span class="line">     |       val y = math.random * 2 - 1</span><br><span class="line">     |</span><br><span class="line">     |       if (x * x + y * y &lt; 1) 1 else 0</span><br><span class="line">     |</span><br><span class="line">     |     &#125;.reduce(_ + _)</span><br><span class="line">     |</span><br><span class="line">     |     println(&quot;Pi is rounghly &quot; + 4.0 * count / n)</span><br><span class="line">     |</span><br><span class="line">     |   &#125;</span><br><span class="line">     | &#125;</span><br><span class="line">defined module SparkPi</span><br><span class="line">scala&gt;</span><br><span class="line"></span><br><span class="line">// Spark Shell 已默认将 SparkContext 类初始化为对象 sc, 用户代码可直接使用。</span><br><span class="line">// Spark 自带的交互式的 Shell 程序，方便进行交互式编程。</span><br></pre></td></tr></table></figure>
<ul>
<li><p>通过 Web UI 查看集群状态</p>
<pre><code>http：//masterIp:8080
</code></pre></li>
</ul>
<p><img src="/images/spark/spark-introduce-05.png" width="740" height="400" img=""></p>
<h3 id="4-4-Spark-quick-start"><a href="#4-4-Spark-quick-start" class="headerlink" title="4.4 Spark quick start"></a>4.4 Spark quick start</h3><p>quick-start : <a href="https://spark.apache.org/docs/latest/quick-start.html" target="_blank" rel="external">https://spark.apache.org/docs/latest/quick-start.html</a></p>
<p>./bin/spark-shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val textFile = sc.textFile(&quot;README.md&quot;)</span><br><span class="line">textFile: spark.RDD[String] = spark.MappedRDD@2ee9b6e3</span><br><span class="line">RDDs have actions, which return values, and transformations, which return pointers to new RDDs. Let’s start with a few actions:</span><br><span class="line"></span><br><span class="line">scala&gt; textFile.count() // Number of items in this RDD</span><br><span class="line">res0: Long = 126</span><br><span class="line"></span><br><span class="line">scala&gt; textFile.first() // First item in this RDD</span><br><span class="line">res1: String = # Apache Spark</span><br></pre></td></tr></table></figure>
<h2 id="5-Spark-生态-BDAS"><a href="#5-Spark-生态-BDAS" class="headerlink" title="5. Spark 生态 BDAS"></a>5. Spark 生态 BDAS</h2><ul>
<li>Spark 框架、架构、计算模型、数据管理策略</li>
<li>Spark BDAS 项目及其子项目进行了简要介绍</li>
<li>Spark 生态系统包含的多个子项目 : SparkSql、Spark Streaming、GraphX、MLlib</li>
</ul>
<p><img src="/images/spark/spark-introduce-01.png" alt="Spark EcoSystem = BDAS = 伯克利数据分析栈"></p>
<ul>
<li>Spark 是 BDAS 核心, 是一 大数据分布式编程框架</li>
</ul>
<h2 id="6-Spark-架构"><a href="#6-Spark-架构" class="headerlink" title="6. Spark 架构"></a>6. Spark 架构</h2><ul>
<li>Spark 的代码结构</li>
<li>Spark 的架构</li>
<li>Spark 运行逻辑</li>
</ul>
<h3 id="6-1-Spark-的代码结构"><a href="#6-1-Spark-的代码结构" class="headerlink" title="6.1 Spark 的代码结构"></a>6.1 Spark 的代码结构</h3><p><img src="/images/spark/spark-introduce-02.jpeg" alt="spark code"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheduler：文件夹中含有负责整体的Spark应用、任务调度的代码。</span><br><span class="line">broadcast：含有Broadcast（广播变量）的实现代码，API中是Java和Python API的实现。</span><br><span class="line"></span><br><span class="line">deploy：含有Spark部署与启动运行的代码。</span><br><span class="line">common：不是一个文件夹，而是代表Spark通用的类和逻辑实现，有5000行代码。</span><br><span class="line"></span><br><span class="line">metrics：是运行时状态监控逻辑代码，Executor中含有Worker节点负责计算的逻辑代码。</span><br><span class="line">partial：含有近似评估代码。</span><br></pre></td></tr></table></figure>
<h3 id="6-2-Spark-的架构"><a href="#6-2-Spark-的架构" class="headerlink" title="6.2 Spark 的架构"></a>6.2 Spark 的架构</h3><p>Spark架构采用了分布式计算中的Master-Slave模型。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Role</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Master</td>
<td style="text-align:center">对应集群中的含有Master进程的节点, 集群的控制器</td>
</tr>
<tr>
<td style="text-align:center">Slave</td>
<td style="text-align:center">集群中含有Worker进程的节点</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Client</td>
<td style="text-align:center">作为用户的客户端负责提交应用</td>
</tr>
<tr>
<td style="text-align:center">Driver</td>
<td style="text-align:center">运行Application的main()函数并创建SparkContext。负责作业的调度，即Task任务的分发</td>
</tr>
<tr>
<td style="text-align:center">Worker</td>
<td style="text-align:center">管理计算节点和创建Executor，启动Executor 或 Driver. 接收主节点命令与进行状态汇报</td>
</tr>
<tr>
<td style="text-align:center">Executor</td>
<td style="text-align:center">Worker node执行任务的组件,负责 Task 的执行,用于启动线程池运行任务</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ClusterManager</td>
<td style="text-align:center">Standalone 模式中为 Master, 控制整个集群, 监控Worker</td>
</tr>
<tr>
<td style="text-align:center">SparkContext</td>
<td style="text-align:center">整个应用的上下文, 控制App的生命周期</td>
</tr>
<tr>
<td style="text-align:center">RDD</td>
<td style="text-align:center">Spark的基本计算单元，一组RDD可形成执行的 DAG</td>
</tr>
</tbody>
</table>
<p><img src="/images/spark/spark-introduce-03.jpeg" alt="spark"></p>
<table>
<thead>
<tr>
<th style="text-align:center">Num</th>
<th style="text-align:center">Spark App 流程 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1.</td>
<td style="text-align:center">Client 提交应用</td>
</tr>
<tr>
<td style="text-align:center">2.</td>
<td style="text-align:center">Master 找到一个 Worker 启动 Driver</td>
</tr>
<tr>
<td style="text-align:center">3.</td>
<td style="text-align:center">Driver 向 Master 或者 资源管理器申请资源，之后将应用转化为 RDD Graph </td>
</tr>
<tr>
<td style="text-align:center">4.</td>
<td style="text-align:center">DAGScheduler 将 RDD Graph 转化为 Stage的有向无环图 提交给 TaskScheduler</td>
</tr>
<tr>
<td style="text-align:center">5.</td>
<td style="text-align:center">TaskScheduler 提交 task 给Executor执行</td>
</tr>
<tr>
<td style="text-align:center">6.</td>
<td style="text-align:center">在任务执行的过程中，其他组件协同工作，确保整个应用顺利执行 </td>
</tr>
</tbody>
</table>
<blockquote>
<p>在执行阶段，Driver 会将 Task 和 Task所依赖的file 和 jar 序列化后传递给对应的 Worker机器，同时 Executor对相应数据分区的任务进行处理。</p>
</blockquote>
<h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><p>由于 Spark 主要使用 HDFS 充当持久化层，所以完整的使用 Spark 需要预先安装 Hadoop.</p>
<p>Spark 将分布式的内存数据抽象为弹性分布式数据集 (RDD), 并在其上实现了丰富的算子，从而对 RDD 进行计算，最后将 算子序列 转化为 DAG 进行执行和调度。</p>
<blockquote>
<p>Spark的Python API几乎覆盖了所有Scala API所能提供的功能. 但的确有些特性，比如Spark Streaming和个别的API方法，暂不支持。<br><a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">具体参见《Spark编程指南》的Python部分</a></p>
</blockquote>
<p>体会了 函数式 编程. 个人认为 scala、python 比较适合写 spark 程序.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kettle ETL]]></title>
      <url>http://iequa.com/2016/01/22/hadoop/ops-etl-kettle/</url>
      <content type="html"><![CDATA[<p>Kettle 的使用初步介绍</p>
<a id="more"></a>
<ol>
<li>ETL 是数据抽取（Extract）、清洗（Cleaning）、转换（Transform）、装载（Load）的过程。</li>
<li>ETL 是构建 <strong>DW</strong> 的重要一环，用户从数据源抽取出数据，经 数据清洗,按照预定义好的 DW模型，将数据加载到 DW 中去。</li>
<li>ETL 是将业务系统的数据经过抽取、清洗转换之后加载到 DW 的过程，目的是将企业中的分散零乱、标准不统一的数据到一起，为企业的决策提供分析依据。</li>
<li>ETL 是 <strong>BI</strong> 项目中一个重要环节。</li>
</ol>
<p><strong>ETL的设计分三个部分：</strong></p>
<ol>
<li>数据抽取</li>
<li>数据的清洗转换</li>
<li>数据的加载</li>
</ol>
<h2 id="1-Kettle-开源的-ETL-工具"><a href="#1-Kettle-开源的-ETL-工具" class="headerlink" title="1. Kettle 开源的 ETL 工具"></a>1. Kettle 开源的 ETL 工具</h2><h3 id="1-1-Kettle-的介绍"><a href="#1-1-Kettle-的介绍" class="headerlink" title="1-1. Kettle 的介绍"></a>1-1. Kettle 的介绍</h3><p>  ETL（Extract-Transform-Load的缩写，即数据抽取、转换、装载的过程， 我们经常会遇到各种数据的处理，转换，迁移，所以掌握一种 ETL 工具的使用必不可少。</p>
<p>  Kettle 支持图形化的GUI设计界面，然后可以以工作流的形式流转，熟练它可以减少非常多的研发工作量，提高工作效率。</p>
<p>  Kettle 允许你管理来自不同数据库的数据，通过提供一个图形化的用户环境来描述你想做什么。</p>
<p>  Kettle 中有两种脚本文件，transformation 和 job.</p>
<ul>
<li>transformation 完成针对数据的基础转换.</li>
<li>job 则完成整个工作流的控制。</li>
</ul>
<h3 id="1-2-Kettle-家族产品"><a href="#1-2-Kettle-家族产品" class="headerlink" title="1-2. Kettle 家族产品"></a>1-2. Kettle 家族产品</h3><p> <strong> Kettle家族目前包括 4 个产品：Spoon、Pan、CHEF、Kitchen。</strong></p>
<p> Spoon 允许你通过图形界面来设计 ETL 转换过程（Transformation）。</p>
<p> Pan   允许你批量运行由 Spoon 设计的 ETL 转换 (例如使用一个时间调度器)。Pan 是一后台执行的程序，没图界面。</p>
<p> Chef  允许你创建任务（Job）。 任务通过允许每个转换，任务，脚本等等，更有利于自动化更新数据仓库的复杂工作。任务通过允许每个转换，任务，脚本等等。任务将会被检查，看看是否正确地运行了。</p>
<p> Kitchen 允许你批量使用由 Chef 设计的任务 (例如使用一个时间调度器)。Kitchen 也是后台运行的程序。</p>
<h2 id="2-下载和部署安装"><a href="#2-下载和部署安装" class="headerlink" title="2. 下载和部署安装"></a>2. 下载和部署安装</h2><p>Kettle可以在<a href="http://kettle.pentaho.org/" target="_blank" rel="external">http://kettle.pentaho.org/</a> 网站下载<br><br>下载 kettle 压缩包，因 kettle 为绿色软件，解压缩到任意本地路径即可</p>
<p>安装需要 : JDK、JAVA_HOME、CLASSPATH、PENTAHO_JAVA_HOME 等环境变量。</p>
<blockquote>
<p>如需连接mysql，则需将 mysql-connector-java-5.1.38.jar 放入到 lib 中。</p>
</blockquote>
<h3 id="2-1-kettle-windows-安装"><a href="#2-1-kettle-windows-安装" class="headerlink" title="2-1 kettle windows 安装"></a>2-1 kettle windows 安装</h3><ul>
<li>建议在 windows 下使用操作练习 kettle<br> windows 对图形化 支持好 </li>
<li>直接启动 Spoon.bat 即可</li>
</ul>
<h3 id="2-2-kettle-Linux-安装"><a href="#2-2-kettle-Linux-安装" class="headerlink" title="2-2 kettle Linux 安装"></a>2-2 kettle Linux 安装</h3><p> linux 图形化不强，如需要在 linux 中查看一下 kettle 资源库是否连接正常，以及在 linux 上调度 kettle 的 job，就需要在 Linux上 配置 kettle 环境了。</p>
<p>验证 kettle 部署成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd data-integration</span><br><span class="line">输入命令./kitchen.sh。如果出现帮助信息说明部署成功</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如出现错误，请 chmod +x *.sh，再试。</p>
</blockquote>
<h3 id="2-3-kettle-osx-安装"><a href="#2-3-kettle-osx-安装" class="headerlink" title="2-3 kettle osx 安装"></a>2-3 kettle osx 安装</h3><p> 已经存在</p>
<h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h2><p>这里简单概括一下几种具体的应用场景，按网络环境划分主要包括：</p>
<h3 id="3-1-表视图模式："><a href="#3-1-表视图模式：" class="headerlink" title="3-1 表视图模式："></a>3-1 表视图模式：</h3><p>  这种情况我们经常遇到，就是在同一网络环境下，我们对各种数据源的表数据进行抽取、过滤、清洗等，例如历史数据同步、异构系统数据交互、数据对称发布或备份等都归属于这个模式；传统的实现方式一般都要进行研发（一小部分例如两个相同表结构的表之间的数据同步，如果sqlserver数据库可以通过发布/订阅实现），涉及到一些复杂的一些业务逻辑如果我们研发出来还容易出各种bug；</p>
<h3 id="3-2-前置机模式"><a href="#3-2-前置机模式" class="headerlink" title="3-2 前置机模式"></a>3-2 前置机模式</h3><p>  数据交换的双方 A 和 B 网络不通，但是 A 和 B 都可以和前置机 C 连接..</p>
<h3 id="3-3-文件模式"><a href="#3-3-文件模式" class="headerlink" title="3-3 文件模式"></a>3-3 文件模式</h3><p>  数据交互的双方 A 和 B 是完全的物理隔离，这样就只能通过以文件的方式来进行数据交互了，例如 XML 格式.</p>
<h2 id="4-DEMO实战"><a href="#4-DEMO实战" class="headerlink" title="4. DEMO实战"></a>4. DEMO实战</h2><h3 id="4-1-简单表同步"><a href="#4-1-简单表同步" class="headerlink" title="4-1 简单表同步"></a>4-1 简单表同步</h3><p>功能描述 : 数据库 TestDB01 中的 UsersA表 到 数据库TestDB02 的UsersB表；<br>实现流程 : 建立一个转换和一个作业Job；</p>
<p><strong>一、建立转换</strong></p>
<ol>
<li><p>进入主界面，新建一个转换，转换的后缀名为 ktr.<br>  创建 DB连接，选择新建 DB连接, Test按钮测试是否配置正确！</p>
<p>  我们需要建立两个 DB连接，分别为 TestDB01 和 TestDB02；</p>
<p>  (如报错可以 : 下载 mysql-connect jar 放入 lib 目录下)</p>
</li>
<li><p>建立步骤和步骤关系 <strong>:</strong> [输入] -&gt; [表输入]<br>  点击核心对象，我们从步骤树中选择【表输入】, 这样拖拽一个 表输入<br>  之后，我们双击表输入之后，我们自己可以随意写一个 sql 语句，这个语句表示<br>  可以在这个库中随意组合，只要 sql 语句没有错误即可，我这里只是最简单的把<br>  TestA 中的所有数据查出来，语句为 select * from usersA。</p>
</li>
<li><p>建立步骤和步骤关系 <strong>:</strong> [输出] -&gt; [插入/更新]<br>  同上类似</p>
</li>
<li><p>建立 连接 关系<br>  然后在【表输入】上同时按住 shift 键和鼠标左键滑向【插入/更新】，这样建立两个步骤之间的连接</p>
</li>
<li><p>运行<br>  建立好转换之后，我们可以直接运行(点击上面的小三角形)这个转换，检查一下是否有错，如图，有错误都会在下面的控制台上输出。</p>
</li>
</ol>
<p><strong>二、建立作业 :</strong></p>
<p>如果我们需要让这个转换定时执行怎么办呢，那么我们需要建立一个作业job</p>
<ol>
<li><p>新建 Job</p>
<p> 文件-&gt;新建-&gt;Job</p>
</li>
<li><p>在 Job 中 添加 转换</p>
<p> 在新建的作业中, 打开刚才新建的 [简单表同步] 的 transformation</p>
</li>
<li><p>添加 START</p>
<p> 通用 -&gt; START</p>
<p> 使 START 关联 -&gt;  [简单表同步] Transformation</p>
</li>
<li><p>这样我们在【Start】步骤上面双击</p>
<p> 设置时间间隔、定时执行 等需要的参数</p>
<p>这样这个作业就制定好了，点击保存之后，就可以在图形化界面上点击开始执行了。</p>
</li>
</ol>
<h2 id="5-win-linux-后台运行"><a href="#5-win-linux-后台运行" class="headerlink" title="5. win/linux 后台运行"></a>5. win/linux 后台运行</h2><h3 id="5-1-win-后台运行"><a href="#5-1-win-后台运行" class="headerlink" title="5-1 win 后台运行"></a>5-1 win 后台运行</h3><p>simpleTableSync.bat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off </span><br><span class="line"></span><br><span class="line">if &quot;%1&quot; == &quot;h&quot; goto begin </span><br><span class="line"></span><br><span class="line">mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit </span><br><span class="line"></span><br><span class="line">:begin</span><br><span class="line">C:</span><br><span class="line">cd C:\WorkSoft\data-integration</span><br><span class="line">kitchen /file:C:\WorkJob\ETL\tSyncTestJob.kjb /level:Basic&gt;&gt;C:\WorkJob\ETL\MyTest.log /level:Basic&gt;&gt;C:\WorkJob\ETL\MyTest.log</span><br></pre></td></tr></table></figure>
<h3 id="5-2-linux-后台运行"><a href="#5-2-linux-后台运行" class="headerlink" title="5-2 linux 后台运行"></a>5-2 linux 后台运行</h3><p>simpleTableSync.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#################################################################</span><br><span class="line">#</span><br><span class="line"># @date:   2016.01.28</span><br><span class="line"># @desc:   simpleTableSync @kettle</span><br><span class="line">#</span><br><span class="line">#################################################################</span><br><span class="line"></span><br><span class="line">cd `dirname $0`/.. &amp;&amp; wk_dir=`pwd` &amp;&amp; cd -</span><br><span class="line">source $&#123;wk_dir&#125;/util/env</span><br><span class="line"></span><br><span class="line">echo_ex &quot;$&#123;data_integration&#125;/kitchen.sh -file=$&#123;data_dir&#125;/tSyncTestJob.kjb&quot;</span><br><span class="line">$&#123;data_integration&#125;/kitchen.sh -file=$&#123;data_dir&#125;/tSyncTestJob.kjb</span><br><span class="line">check_success</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>注意 : kjb 与 ktr 最好放在一个目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hdfs@node196 simpleTableSync]$ cd data/</span><br><span class="line">[hdfs@node196 data]$ ll</span><br><span class="line">total 24</span><br><span class="line">-rw-rw-r--. 1 hdfs hdfs  6944 Jan 29 18:22 tSyncTestJob.kjb</span><br><span class="line">-rw-rw-r--. 1 hdfs hdfs 13450 Jan 29 18:22 tSyncTestTrans.ktr</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从 win 拷贝过来的文件，fileformat 可能是 dos 格式，可以 :set ff=unix.</p>
</blockquote>
<h2 id="Reference-article"><a href="#Reference-article" class="headerlink" title="Reference article"></a>Reference article</h2><p><a href="http://www.cnblogs.com/limengqiang/archive/2013/01/16/KettleApply2.html#sz" target="_blank" rel="external">kettle系列</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux, profile / bashrc Brief Introduce]]></title>
      <url>http://iequa.com/2014/05/18/ops/ops-linux-bashrc-profile/</url>
      <content type="html"><![CDATA[<p>/etc/profile、/etc/bashrc、~/.bash_profile、~/.bashrc </p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">config file</th>
<th style="text-align:center">desc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/etc/profile，/etc/bashrc</td>
<td style="text-align:center">系统全局环境变量设定</td>
</tr>
<tr>
<td style="text-align:center">~/.profile，~/.bashrc</td>
<td style="text-align:center">用户家目录下的私有环境变量设定 </td>
</tr>
</tbody>
</table>
<h2 id="1-login-env-steps"><a href="#1-login-env-steps" class="headerlink" title="1. login env steps"></a>1. login env steps</h2><blockquote>
<p>以下是 登入系统,环境设定档 流程</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Read step</th>
<th style="text-align:center">desc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/etc/profile</td>
<td style="text-align:center">/etc/profile.d 和 /etc/inputrc 。 从/etc/profile.d目录的配置文件搜集shell的设置</td>
</tr>
<tr>
<td style="text-align:center">~/.bash_profile</td>
<td style="text-align:center">~/.bash_profile，如无则读取 ~/.bash_login，如无则读取 ~/.profile</td>
</tr>
<tr>
<td style="text-align:center">~/.bashrc</td>
<td style="text-align:center">~/.bashrc (交互式 non-login 方式进入 bash 运行的)</td>
</tr>
</tbody>
</table>
<h2 id="2-profile-与-bashrc"><a href="#2-profile-与-bashrc" class="headerlink" title="2. .profile 与 .bashrc"></a>2. .profile 与 .bashrc</h2><p>~/.profile 与 ~/.bashrc </p>
<h3 id="2-1-相同点"><a href="#2-1-相同点" class="headerlink" title="2.1 相同点"></a>2.1 相同点</h3><p>都具有个性化定制功能</p>
<blockquote>
<p>~/.profile 可以设定本用户专有的路径，环境变量，等，它只能登入的时候执行一次<br>~/.bashrc 也是某用户专有设定文档，可以设定路径，命令别名，每次shell script的执行都会使用它一次 </p>
</blockquote>
<h3 id="2-2-bashrc-和-profile-的区别"><a href="#2-2-bashrc-和-profile-的区别" class="headerlink" title="2.2 bashrc 和 profile 的区别"></a>2.2 bashrc 和 profile 的区别</h3><p><strong>交互式模式</strong></p>
<blockquote>
<p>shell等待你的输入，并且执行你提交的命令。 shell与用户进行交互 登录、执行命令、签退、shell终止 </p>
<ul>
<li>~/.bash_profile 是交互式、login 方式进入 bash 运行的 </li>
<li>~/.bashrc 是交互式 non-login 方式进入 bash 运行的 </li>
</ul>
</blockquote>
<p><strong>非交互式模式</strong></p>
<blockquote>
<p>shell不与你进行交互，是读取存在文件中的命令,并且执行它们。当它读到文件的结尾，shell终止</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.chinaunix.net/uid-26435987-id-3400127.html" target="_blank" rel="external">blog.chinaunix.net/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Trie Tree POJ 2001]]></title>
      <url>http://iequa.com/2013/01/17/acm/Trie_Tree-POJ-2001/</url>
      <content type="html"><![CDATA[<p>trie tree poj 2001 shortest prefixes</p>
<a id="more"></a>
<h2 id="POJ-2001-Shortest-Prefixes"><a href="#POJ-2001-Shortest-Prefixes" class="headerlink" title="POJ 2001 Shortest Prefixes"></a><a href="http://poj.org/problem?id=2001" target="_blank" rel="external">POJ 2001 Shortest Prefixes</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUG puts(<span class="string">"here!!!"</span>);  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kind = <span class="number">26</span>;  </span><br><span class="line"><span class="keyword">char</span> str[N][<span class="number">25</span>];  </span><br><span class="line"><span class="keyword">struct</span> Node &#123;  </span><br><span class="line">    <span class="keyword">int</span> num;  </span><br><span class="line">    <span class="keyword">bool</span> tail;  </span><br><span class="line">    Node* next[kind];  </span><br><span class="line">    Node() : num(<span class="number">1</span>), tail(<span class="literal">false</span>) &#123;  </span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="keyword">sizeof</span>(next));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* root, <span class="keyword">char</span> *s)</span> </span>&#123;  </span><br><span class="line">    Node* p = root;  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, index;  </span><br><span class="line">    <span class="keyword">while</span>(s[i]) &#123;  </span><br><span class="line">        index = s[i] - <span class="string">'a'</span>;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next[index] == <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            p-&gt;next[index] = <span class="keyword">new</span> Node();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> p-&gt;next[index]-&gt;num++;  </span><br><span class="line">        p = p-&gt;next[index];  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    p-&gt;tail = <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Node* root, <span class="keyword">int</span> count)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;  </span><br><span class="line">        Node* p = root;  </span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str[i]);  </span><br><span class="line">        <span class="keyword">char</span>* s = str[i];  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">' '</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;  </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s[j];  </span><br><span class="line">            <span class="keyword">int</span> index = s[j] - <span class="string">'a'</span>;  </span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next[index]-&gt;num == <span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            p = p-&gt;next[index];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    Node* root = <span class="keyword">new</span> Node(); <span class="comment">// 根节点不包含任何字符  </span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i]) == <span class="number">1</span>) &#123;  </span><br><span class="line">        insert(root, str[i]);  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    count = i;  </span><br><span class="line">    solve(root, count);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Union-Find Sets POJ 1703]]></title>
      <url>http://iequa.com/2013/01/17/acm/union-find_sets-POJ-1703/</url>
      <content type="html"><![CDATA[<p>union-find sets poj 1703 find them, catch them 帮派之争</p>
<a id="more"></a>
<h2 id="Find-them-Catch-them"><a href="#Find-them-Catch-them" class="headerlink" title="Find them, Catch them"></a><a href="http://poj.org/problem?id=1703" target="_blank" rel="external">Find them, Catch them</a></h2><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">5 5</span><br><span class="line">A 1 2</span><br><span class="line">D 1 2</span><br><span class="line">A 1 2</span><br><span class="line">D 2 4</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Not sure yet.</span><br><span class="line">In different gangs.</span><br><span class="line">In the same gang.</span><br></pre></td></tr></table></figure>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ( ( x + y ) &gt;&gt; 1 )  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(x) ( x &lt;&lt; 1 )  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(x) ( x &lt;&lt; 1 | 1 )  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUG puts(<span class="string">"here!!!"</span>);  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STOP system(<span class="string">"pause"</span>);  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;  </span><br><span class="line"><span class="keyword">int</span> f[N+N];  </span><br><span class="line"><span class="keyword">int</span> n, m;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(f[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;  </span><br><span class="line">    <span class="keyword">return</span> f[x] = find(f[x]);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> loop;  </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; loop;  </span><br><span class="line">    <span class="keyword">while</span>(loop--) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);  </span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">255</span>, <span class="keyword">sizeof</span>(f));  </span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;  </span><br><span class="line">            <span class="keyword">int</span> a, b;  </span><br><span class="line">            <span class="keyword">char</span> s[<span class="number">3</span>];  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, s, &amp;a, &amp;b);  </span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span>(find(a) != find(b) &amp;&amp; find(a) != find(b+n)) &#123;  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Not sure yet.\n"</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(find(a) == find(b)) &#123;  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"In the same gang.\n"</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"In different gangs.\n"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span>(find(a) != find(b+n)) &#123;  </span><br><span class="line">                    f[find(a)] = find(b+n);  </span><br><span class="line">                    f[find(b)] = find(a+n);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Union-Find Sets HDU 1856]]></title>
      <url>http://iequa.com/2013/01/17/acm/union-find_sets-hdu_1856/</url>
      <content type="html"><![CDATA[<p>union-find sets hdu 1856 more is better</p>
<a id="more"></a>
<p><strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1856" target="_blank" rel="external">More is better</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mr Wang wants some boys to help him with a project. ...</span><br></pre></td></tr></table></figure>
<p><strong><font color="#2561c2">Sample Input</font></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br><span class="line">1 6</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br></pre></td></tr></table></figure>
<p><strong><font color="#2561c2">Sample Output</font></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong><font color="#2561c2">Code</font></strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUG puts(<span class="string">"here!!!"</span>);  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;  </span><br><span class="line"><span class="keyword">struct</span> Node &#123;  </span><br><span class="line">    <span class="keyword">int</span> par;  </span><br><span class="line">    <span class="keyword">int</span> sum;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">int</span> SUM;  </span><br><span class="line">  </span><br><span class="line">Node p[<span class="number">2</span>*N + <span class="number">5</span>];  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSet</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>*n; i++) &#123;  </span><br><span class="line">        p[i].par = i;  </span><br><span class="line">        p[i].sum = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    SUM = <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(a == p[a].par) <span class="keyword">return</span> a;  </span><br><span class="line">    <span class="keyword">return</span> p[a].par = find(p[a].par);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> fa = find(a);  </span><br><span class="line">    <span class="keyword">int</span> fb = find(b);  </span><br><span class="line">    <span class="keyword">if</span>(fa != fb) &#123;  </span><br><span class="line">        p[fa].par = fb;  </span><br><span class="line">        p[fb].sum += p[fa].sum;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(p[fb].sum &gt; SUM) &#123;  </span><br><span class="line">        SUM = p[fb].sum;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n, a, b;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;  </span><br><span class="line">        makeSet(n);  </span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);  </span><br><span class="line">            union1(a, b);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SUM);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KMP / HDU 1711 找到匹配的位置并返回]]></title>
      <url>http://iequa.com/2013/01/17/acm/kmp-for-hdu_1711/</url>
      <content type="html"><![CDATA[<p>kmp hdu 1711 number sequence</p>
<a id="more"></a>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color="#2561c2">Description</font></h3><p>Given two sequences of numbers : a[1], a[2], …… , a[N], and b[1], b[2], …… , b[M] (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], …… , a[K + M – 1] = b[M]. If there are more than one K exist, output the smallest one.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color="#2561c2">Input</font></h3><p>The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). The second line contains N integers which indicate a[1], a[2], …… , a[N]. The third line contains M integers which indicate b[1], b[2], …… , b[M]. All integers are in the range of [-1000000, 1000000].</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color="#2561c2">Output</font></h3><p>For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><font color="#2561c2">Sample Input</font></h3><p>2<br>13 5<br>1 2 1 2 3 1 2 3 1 3 2 1 2<br>1 2 3 1 3<br>13 5<br>1 2 1 2 3 1 2 3 1 3 2 1 2<br>1 2 3 2 1</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><font color="#2561c2">Sample Output</font></h3><p>6<br>-1</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a><font color="#2561c2">Code</font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUG puts(<span class="string">"here!!!"</span>);  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000005</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10005</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> s[N];  </span><br><span class="line"><span class="keyword">int</span> t[M];  </span><br><span class="line"><span class="keyword">int</span> next[M];  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i, j;  </span><br><span class="line">    i = <span class="number">0</span>, j = <span class="number">-1</span>;  </span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; len<span class="number">-1</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || t[i] == t[j]) &#123;  </span><br><span class="line">            i++, j++, next[i] = j;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            j = next[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> sl, <span class="keyword">int</span> tl)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; sl &amp;&amp; j &lt; tl) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == t[j]) &#123;  </span><br><span class="line">            i++, j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> j = next[j];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(j == tl) <span class="keyword">return</span> i-j+<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// abcabcababcabcabdef  </span></span><br><span class="line"><span class="comment">// abcabcabd  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> T, n, m, ans;  </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;  </span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;  </span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, t+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        getNext(m);  </span><br><span class="line">        ans = kmp(n, m);  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux C语言的一些知识学习]]></title>
      <url>http://iequa.com/2012/05/19/acm/linux-c/</url>
      <content type="html"><![CDATA[<p>Linux C语言的一些知识, 涉及 计算机程序，语言发展，编译链接，数据，函数库等等.</p>
<a id="more"></a>
<h2 id="1-程序"><a href="#1-程序" class="headerlink" title="1. 程序"></a>1. 程序</h2><ul>
<li>什么是程序？</li>
<li>程序的作用是什么？</li>
</ul>
<blockquote>
<p>我们必须通过指令，指挥计算机执行我们想要它做的动作。 而依照顺序执行的一组指令就是程序。</p>
</blockquote>
<h3 id="1-1-程序特征"><a href="#1-1-程序特征" class="headerlink" title="1.1 程序特征"></a>1.1 程序特征</h3><p>1, 程序是与计算机沟通的语言<br>2, 程序是由特定语法与关键字构成<br>3, 程序是一行一行执行的<br>4, 程序的执行, 从入口点开始, 原则上是由上而下, 从左而右执行。</p>
<blockquote>
<p>入口点可能是一个方法或者是函数。。。</p>
</blockquote>
<h2 id="2-程序语言的演化"><a href="#2-程序语言的演化" class="headerlink" title="2. 程序语言的演化"></a>2. 程序语言的演化</h2><p>1, 机器语言   –  计算机通过电信号模式 0/1/0/1…开关开关…<br>2, 汇编语言<br>3, 高级语言<br>4, 第四代语言<br>5, 自然语言   –  智能语言，开机，它就开机。关机，它就关机。</p>
<h3 id="2-1-机器语言"><a href="#2-1-机器语言" class="headerlink" title="2.1 机器语言"></a>2.1 机器语言</h3><p> 1, 是计算机唯一能够执行的语言。<br> 2, 其他语言必须先转化为机器语言<br> 3, 指令有 0 与 1 组成, 称为机器码。<br> 4, 指令难记忆但执行速度最快。<br> 5, 不同类型机器有不同的机器码, 不具备移植性。</p>
<h3 id="2-2-高级语言"><a href="#2-2-高级语言" class="headerlink" title="2.2 高级语言"></a>2.2 高级语言</h3><p> 1, 离机器越来越远<br> 2, 语法接近人类的自然语言<br> 3, 执行的单位不是指令,  而是语句, 一行语句。<br> 4, 开发效率越来越高。<br> 5, 必须编译成机器码<br> 6, 移植性比较好。</p>
<h3 id="2-3-第四代语言"><a href="#2-3-第四代语言" class="headerlink" title="2.3 第四代语言"></a>2.3 第四代语言</h3><p> 1, 4GL, 也称为面向问题的程序语言。<br> 2, 仅需告诉计算机 “做什么”, 不需要指挥计算机”如何做”<br> 3, 大大提高开发效率<br> 4, 如 SQL 语言及各种查询语言。</p>
<h3 id="2-4-自然语言"><a href="#2-4-自然语言" class="headerlink" title="2.4 自然语言"></a>2.4 自然语言</h3><p> 1, 运用人工智能, 以接近口语的指令指挥计算机，如语音。<br> 2, 还没有成熟。</p>
<h2 id="3-编译与链接"><a href="#3-编译与链接" class="headerlink" title="3. 编译与链接"></a>3. 编译与链接</h2><h3 id="3-1-编译"><a href="#3-1-编译" class="headerlink" title="3.1 编译"></a>3.1 编译</h3><p> 1, 把源代码转化成机器码的过程。<br> 2, 之前还会进行前期处理。<br> 3, 过程中会进行语法检查。<br> 4, 编译器 :  完成编译动作的程序</p>
<h3 id="3-2-连接"><a href="#3-2-连接" class="headerlink" title="3.2 连接"></a>3.2 连接</h3><p> 1, 将可执行文件与包含文件 / 用到的函数库建立关联的过程。</p>
<h2 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4. 基本概念"></a>4. 基本概念</h2><h3 id="4-1-数据"><a href="#4-1-数据" class="headerlink" title="4.1 数据"></a>4.1 数据</h3><p> 是计算机程序处理的对象, 可以是整数, 实数, 字符, 也可以是图像, 声音等的编码表示。</p>
<h3 id="4-2-数据结构"><a href="#4-2-数据结构" class="headerlink" title="4.2 数据结构"></a>4.2 数据结构</h3><p> 指的是数据与数据间存在一种或多种特定关系。 与数据结构密切相关的便是数据的类型和数据的存放。</p>
<ul>
<li>程序设计</li>
<li>编写程序的过程。</li>
<li>软件</li>
<li>程序 + 文档。</li>
</ul>
<h2 id="5-Linux-C-概述"><a href="#5-Linux-C-概述" class="headerlink" title="5. Linux C 概述"></a>5. Linux C 概述</h2><p>Linux 和 C 天生有不解之源, Linux 的操作系统内核就主要是用 C 写的, 另外 Linux 下的很多软件也是用 C 写的，特别是一些著名的服务软件, 如何 MySQL, Apache 等。</p>
<h3 id="5-1-开发环境的构成"><a href="#5-1-开发环境的构成" class="headerlink" title="5.1 开发环境的构成"></a>5.1 开发环境的构成</h3><p>1, 编辑器 ： 选择 VI<br>2, 编译器 ： 选择 GNU C/C++ 编译器 gcc (免费开源的工具 - linux发型版本多数都自动安装)<br>3, 调试器 ： 应用广泛的 gdb (JDK 学习的 GDB)<br>4, 函数库 ： glibc<br>5, 系统头文件 ： glibc_header</p>
<h3 id="5-2-编译器-gcc"><a href="#5-2-编译器-gcc" class="headerlink" title="5.2 编译器 gcc"></a>5.2 编译器 gcc</h3><p>gcc (GNU CCompiler) 是GNU推出的功能强大 , 性能优越的多平台编译器, gcc 编译器能将C , C++语言源程序编译, 连接成可执行文件, 以下是 gcc 支持编译的一些源文件的后缀及其解释。</p>
<blockquote>
<p>.c 为后缀的文件, C语言源代码文件<br>.h 为后缀的文件, 是程序所包含的头文件。<br>.i 为后缀的文件, 是已经预处理过的 C 源代码文件;<br>.o 为后缀的文件, 是编译后的目标文件。<br>.s 为后缀的文件, 是汇编语言源代码文件。</p>
</blockquote>
<p><strong>gcc -o hello hello.c</strong></p>
<blockquote>
<ul>
<li>用 gcc 来编译我们的源程序</li>
<li>-o 选项要求编译器给我们输出的可执行文件名为 hello</li>
<li>hello.c 是我们的源程序文件。</li>
<li>-c 选项 表示我们只要求编译器输出目标代码, 而不必要输出可执行文件</li>
<li>-g 选项表示我们要求编译器在编译的时候提供我们以后对程序进行调试的信息。</li>
<li>执行 ./hello 就可以看到程序的输出结构。 (在当前目录下去找)</li>
</ul>
</blockquote>
<h3 id="5-3-函数库-glibc"><a href="#5-3-函数库-glibc" class="headerlink" title="5.3 函数库 glibc"></a>5.3 函数库 glibc</h3><p>要构建一个完整的 C 开发环境, Glibc 是必不可少的, 它是 Linux 下 C 的主要函数库. glibc 有两种安装方式：</p>
<p> A. 安装成测试用的函数库, 在编译程序时用不同的选项来试用新的函数库。</p>
<p> B. 安装成主要的 C 函数库, 所有新编译程序均用的函数库</p>
<p><strong>glibc 含几个附加包</strong> : Linuxthreads， localedate 和 crypt， 他们的文件名随版本的不同而类似于下列 ：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">glibc-2.06.tar.gz</span><br><span class="line">glibc-linuxthreads-2.0.6.tar.gz</span><br><span class="line">glibc-localedate-2.0.6.tar.gz</span><br><span class="line">glibc-crypt-2.0.6.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>glibc 是提供系统调用和基本函数的Ｃ库</strong>, 比如 open, malloc, printf 等等。 所有动态连接的程序都要用到它.</p>
<blockquote>
<ul>
<li>系统头文件 ： glibc_header</li>
<li>缺少系统头文件，很多用到系统功能的C程序将无法编译。</li>
<li>如果用户在安装过程中少装了这些包，就会无法编译C程序，解决方法：</li>
<li>方法一：不推荐：重装一遍Linux系统。</li>
<li>方法二：通过找一些Rpm包来迅速安装Linux的C开发环境。</li>
</ul>
</blockquote>
<p><strong>C开发环境对应的rpm包</strong></p>
<p>由于gcc包需依赖 binutils和cpp包，另外make包也是在编译中常用的，所以一共需要8个包来完成安装，它们是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpp-2.96-110.i386.rpm</span><br><span class="line">binutils-2.11.93.0.2-11. i386.rpm</span><br><span class="line">Glibc-2.2.5-31. i386.rpm</span><br><span class="line">Glibc-kernheaders-2.4-7.14. i386.rpm</span><br><span class="line">Glibc-common-2.2.5-34</span><br><span class="line">Glibc-devel-2.2.5-34- i386.rpm</span><br><span class="line">Gcc-2.96-110.i386.rpm</span><br><span class="line">Make-3.79.1-8. i386.rpm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看glibc的版本：ls /lib/libc-*<br>查看gcc版本号： gcc –version</p>
</blockquote>
<h3 id="5-4-C-程序的组成"><a href="#5-4-C-程序的组成" class="headerlink" title="5.4 C 程序的组成"></a>5.4 C 程序的组成</h3><p>对于一个 C 程序, 安装完成后可以分成三个组成 ：</p>
<ul>
<li>可执行文件</li>
<li>包含文件</li>
<li>库文件</li>
</ul>
<p>可执行文件是最终运行的命令, 包含文件是该 C 程序 include 的定义文件, 库文件则是该 C 程序自定义的库。</p>
<p>比如用 RPM 安装的 Mysql 数据库 ：</p>
<blockquote>
<ul>
<li>可执行文件放在 /usr/bin 下</li>
<li>包含文件放在  /usr/include/mysql 下</li>
<li>库文件在     /usr/lib/mysql 下</li>
</ul>
</blockquote>
<p>只有系统可以找到程序对应的包含文件和库文件, 程序可执行文件才能正常运行。</p>
<h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><blockquote>
<ol>
<li>开发环境的构成</li>
<li>GNU 的 gcc 编译器</li>
<li>glibc 函数库</li>
<li>Linux 下 C 程序开发过程</li>
<li>第一个 C 程序</li>
<li>C 程序结构</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学用 g++ (初步)]]></title>
      <url>http://iequa.com/2012/03/22/acm/g++/</url>
      <content type="html"><![CDATA[<p>gcc 和 g++ 都是GNU(组织)的一个编译器.</p>
<a id="more"></a>
<h2 id="链接库"><a href="#链接库" class="headerlink" title="链接库"></a>链接库</h2><p>动态链接库 (通常以 .so 结尾) 和 静态链接库 (通常以 .a 结尾)</p>
<blockquote>
<p>两者的差别仅在程序执行时所需的代码是在运行时加载的, 还是在编译时加载的, 默认情况下, g++ 在链接时优先使用动态链接库, 只有当动态链接库不存在时才考虑使用静态链接库.</p>
<p>如果需要的话可以在编译时加上 -static 选项, 强制使用静态链接库。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ foo.cpp -L /home/xiaowp/lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure>
<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>代码优化指的是编译器用过分析源代码, 找出其中尚未达到最优的部分,</p>
<p>然后对其重新进行组合, 目的是改善程序的执行性能.</p>
<p>g++ 通过编译选项 -On 来控制优化代码的生成 (n 一般 0 ~ 2,3)</p>
<h2 id="学用-g"><a href="#学用-g" class="headerlink" title="学用 g++"></a>学用 g++</h2><p>GCC (GNC Compiler Collection) 是 linux 下最主要的编译工具, GCC 不仅功能强大, 结构也异常灵活.</p>
<p>g++ 是 gcc 中的一个工具, 专门来编译 C++ 语言的。</p>
<blockquote>
<p>$ g++ hello.cpp -o hello  (hello 是编译成的可执行文件)<br>$ ./hello  (运行 hello)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[寄存器, 内存, 存储器, Cache 的区别]]></title>
      <url>http://iequa.com/2012/03/18/ops/ops-linux-computer-memory/</url>
      <content type="html"><![CDATA[<p>计算机存储中的 寄存器 内存 存储器 cache区别， 从范围来看，它们所指的范畴就不一样。</p>
<a id="more"></a>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>中央处理器内的组成部份。它跟CPU有关。寄存器是有限存贮容量的高速存贮部件，它们可用来暂存指令、数据和位址。在中央处理器的控制部件中，包含的寄存器有指令寄存器(IR)和程序计数器(PC)。在中央处理器的算术及逻辑部件中，包含的寄存器有累加器(ACC)。</p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>存储器范围最大，它几乎涵盖了所有关于存储的范畴。你所说的寄存器，内存，都是存储器里面的一种。凡是有存储能力的硬件，都可以称之为存储器，这是自然，硬盘更加明显了，它归入外存储器行列，由此可见——。</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>既专业名上的内存储器，它不是个什么神秘的东西，它也只是存储器中的沧海一粟，它包涵的范围也很大，一般分为只读存储器和随机存储器，以及最强悍的高速缓冲存储器（CACHE），只读存储器应用广泛，它通常是一块在硬件上集成的可读芯片，作用是识别与控制硬件，它的特点是只可读取，不能写入。随机存储器的特点是可读可写，断电后一切数据都消失，我们所说的内存条就是指它了。</p>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>在CPU中速度非常块，而容量却很小的一种存储器，它是计算机存储器中最强悍的存储器。由于技术限制，容量很难提升，一般都不过兆。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>转自 : hp_carrot</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shortest Path]]></title>
      <url>http://iequa.com/2011/10/27/acm/shortest-path/</url>
      <content type="html"><![CDATA[<p>shortest path ： dijstra 、 Bellman 、 Floyd 、 SPFA</p>
<a id="more"></a>
<h2 id="1-dijstra"><a href="#1-dijstra" class="headerlink" title="1. dijstra"></a>1. dijstra</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> data[M][M]; <span class="comment">// init INF</span></span><br><span class="line"><span class="keyword">int</span> lowc[M];</span><br><span class="line"><span class="keyword">int</span> vis[M];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">djst</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        lowc[i] = data[p][i];</span><br><span class="line">    &#125;</span><br><span class="line">    vis[p] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minc = INF, c = <span class="number">0</span>, lk;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="number">0</span> &amp;&amp; lowc[j] &lt; minc) &#123;</span><br><span class="line">                minc = lowc[j];</span><br><span class="line">                c = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        vis[c] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] == <span class="number">0</span> &amp;&amp; data[c][j] + minc &gt; <span class="number">0</span> &amp;&amp; data[c][j] + minc &lt; lowc[j]) &#123;</span><br><span class="line">                lowc[j] = data[c][j] + minc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; lowc[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Bellman"><a href="#2-Bellman" class="headerlink" title="2. Bellman"></a>2. Bellman</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF ((long long)(1))&lt;&lt;62</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 301</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">struct</span> edge&#123;</span><br><span class="line">   <span class="keyword">int</span> u;</span><br><span class="line">   <span class="keyword">int</span> v;</span><br><span class="line">   <span class="keyword">long</span> <span class="keyword">long</span> w; <span class="comment">// 注意</span></span><br><span class="line">&#125;e[N*N];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bellman_ford</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> di)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">     <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        d[i] = INF;</span><br><span class="line">     &#125;</span><br><span class="line">     d[s] = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[e[j].u] != INF &amp;&amp; d[e[j].u]+e[j].w &lt; d[e[j].v])    <span class="comment">// 对边进行操作 、松弛</span></span><br><span class="line">                d[e[j].v] = d[e[j].u] + e[j].w;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[e[j].u] != INF &amp;&amp; (d[e[j].v] &gt; d[e[j].u]+e[j].w))    <span class="comment">// 很理解</span></span><br><span class="line">            d[e[j].v] = -INF;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(d[di] == INF || d[di] == -INF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Floyd"><a href="#3-Floyd" class="headerlink" title="3. Floyd"></a>3. Floyd</h2><h2 id="4-SPFA"><a href="#4-SPFA" class="headerlink" title="4. SPFA"></a>4. SPFA</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5501</span>;</span><br><span class="line"><span class="keyword">struct</span> edge &#123;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; p[N]; <span class="comment">// vector 实现邻接表</span></span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"><span class="keyword">bool</span> inque[N];     <span class="comment">// 记录顶点是否在队列中，SPFA算法可以入队列多次</span></span><br><span class="line"><span class="keyword">int</span> cnt[N];        <span class="comment">// 记录顶点入队的次数</span></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()) Q.pop();</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        d[i] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    d[s] = <span class="number">0</span>;      <span class="comment">// 源点的距离为 0</span></span><br><span class="line">    <span class="built_in">memset</span>(inque, <span class="number">0</span>, <span class="keyword">sizeof</span>(inque));</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    Q.push(s);</span><br><span class="line">    inque[s] = <span class="literal">true</span>;</span><br><span class="line">    cnt[s]++;      <span class="comment">// 源点入队列的次数增加</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        inque[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; p[t].size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = p[t][i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[t] &lt; INF &amp;&amp; d[to] &gt; d[t] + p[t][i].w) &#123;</span><br><span class="line">                d[to] = d[t] + p[t][i].w;</span><br><span class="line">                cnt[to]++;</span><br><span class="line">                <span class="keyword">if</span>(cnt[to] &gt;= n) &#123;  <span class="comment">//当一个点入队的次数&gt;=n时就证明出现了负环</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!inque[to]) &#123;</span><br><span class="line">                    Q.push(to);</span><br><span class="line">                    inque[to] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Minimum Spanning Tree]]></title>
      <url>http://iequa.com/2011/10/27/acm/mst/</url>
      <content type="html"><![CDATA[<p>data structure - minimal spanning tree</p>
<a id="more"></a>
<h2 id="1-prim"><a href="#1-prim" class="headerlink" title="1. prim"></a>1. prim</h2><blockquote>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1233</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>; <span class="comment">// max int value</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[<span class="number">1</span>][i] != <span class="number">-1</span>) &#123;</span><br><span class="line">            dis[i] = <span class="built_in">map</span>[<span class="number">1</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> dis[i] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minv = INF, c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; minv) &#123;</span><br><span class="line">                minv = dis[j];</span><br><span class="line">                c = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[c] = <span class="literal">true</span>;</span><br><span class="line">        sum += minv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; <span class="built_in">map</span>[c][j] != <span class="number">-1</span> &amp;&amp;  <span class="built_in">map</span>[c][j] &lt; dis[j]) &#123;</span><br><span class="line">                dis[j] = <span class="built_in">map</span>[c][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span> == <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="number">255</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        m = (n * (n<span class="number">-1</span>)) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            <span class="built_in">map</span>[a][b] = <span class="built_in">map</span>[b][a] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, prim(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-kruskal"><a href="#2-kruskal" class="headerlink" title="2. kruskal"></a>2. kruskal</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pre[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> Edge &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Edge a, <span class="keyword">const</span> Edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_set</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        pre[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre[a] == a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> pre[a] = find_set(pre[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sort(e, e + m, cmp);</span><br><span class="line">    make_set(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, fu, fv, cnt_e; i &lt; m; i++) &#123;</span><br><span class="line">        fu = find_set(e[i].u);</span><br><span class="line">        fv = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (fu != fv) &#123;</span><br><span class="line">            sum += e[i].w;</span><br><span class="line">            cnt_e++;</span><br><span class="line">            <span class="keyword">if</span> (cnt_e == n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            pre[fv] = fu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Six Kinds of Sort algorithms]]></title>
      <url>http://iequa.com/2011/10/27/acm/six-sort/</url>
      <content type="html"><![CDATA[<p>input ： 8, 5, 4, 9, 2, 3, 6</p>
<a id="more"></a>
<h2 id="1-heapSort"><a href="#1-heapSort" class="headerlink" title="1. heapSort"></a>1. heapSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> size)</span> </span>&#123; <span class="comment">// 堆化的维持需要用递归</span></span><br><span class="line">    <span class="keyword">int</span> ls = <span class="number">2</span>*i, rs = <span class="number">2</span>*i + <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">int</span> large = i;</span><br><span class="line">    <span class="keyword">if</span>(ls &lt;= size &amp;&amp; a[ls] &gt; a[i]) &#123;</span><br><span class="line">        large = ls; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rs &lt;= size &amp;&amp; a[rs] &gt; a[large]) &#123;</span><br><span class="line">        large = rs; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(large != i) &#123;</span><br><span class="line">        swap(a[i], a[large]);</span><br><span class="line">        heapify(a, large, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size/<span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        heapify(a, i, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    buildHeap(a, size);</span><br><span class="line">    <span class="keyword">int</span> len = size;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len; i &gt;= <span class="number">2</span>; i--) &#123;</span><br><span class="line">        swap(a[i], a[<span class="number">1</span>]);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(a, <span class="number">1</span>, len); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-quickSort"><a href="#2-quickSort" class="headerlink" title="2. quickSort"></a>2. quickSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right) &#123; <span class="comment">// exit. good idea!</span></span><br><span class="line">        <span class="keyword">int</span> l = left, r = right, x = a[l];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; a[r] &gt;= x) r--;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; a[l] &lt;= x) l++;</span><br><span class="line">            <span class="keyword">if</span>(l &gt;= r) <span class="keyword">break</span>;</span><br><span class="line">            swap(a[r], a[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[left], a[l]);</span><br><span class="line">        quickSort(a, left, l<span class="number">-1</span>);</span><br><span class="line">        quickSort(a, l+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-mergeSort"><a href="#3-mergeSort" class="headerlink" title="3. mergeSort"></a>3. mergeSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">//  8, 5, 4, 9, 2, 3, 6</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;   <span class="comment">// exit.</span></span><br><span class="line">    <span class="keyword">int</span> mid = (l+r) / <span class="number">2</span>; <span class="comment">// overflow  &lt;-&gt;  l + (r-l)/2</span></span><br><span class="line">    mergeSort(a, l, mid);</span><br><span class="line">    mergeSort(a, mid+<span class="number">1</span>, r);  </span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[r-l+<span class="number">1</span>];  </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= a[j]) &#123;</span><br><span class="line">            arr[k++] = a[i++]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k++] = a[j++]; <span class="comment">// ans += (mid-i+1);  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) arr[k++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) arr[k++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        a[i] = arr[i-l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-insertSort"><a href="#4-insertSort" class="headerlink" title="4. insertSort"></a>4. insertSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;<span class="comment">// 新抓的每张扑克牌  </span></span><br><span class="line">        <span class="keyword">int</span> temp = a[i];</span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; a[j] &gt; temp &amp;&amp; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">            a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-bubbleSort"><a href="#5-bubbleSort" class="headerlink" title="5. bubbleSort"></a>5. bubbleSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j+<span class="number">1</span>]) swap(a[j], a[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-selectSort"><a href="#6-selectSort" class="headerlink" title="6. selectSort"></a>6. selectSort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++) &#123;  </span><br><span class="line">        k = i;  </span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; len; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[k]) k = j;  </span><br><span class="line">        &#125;  </span><br><span class="line">        swap(a[i], a[k]);  <span class="comment">// 将第i位小的数放入i位置  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搜索的经典 POJ 2386 Lake Counting]]></title>
      <url>http://iequa.com/2010/09/27/acm/dfs-POJ-2386/</url>
      <content type="html"><![CDATA[<p>经典的搜索，寻找水泡 poj 2386 <a href="http://poj.org/problem?id=2386" target="_blank" rel="external">Lake Counting</a></p>
<a id="more"></a>
<h2 id="Lake-Counting"><a href="#Lake-Counting" class="headerlink" title="Lake Counting"></a><a href="http://poj.org/problem?id=2386" target="_blank" rel="external">Lake Counting</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> asd[<span class="number">202</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">digui</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp; &amp; a &lt; n &amp; &amp; b &gt;= <span class="number">0</span> &amp; &amp; b &lt; m &amp; &amp; <span class="built_in">map</span>[a][b] == <span class="number">-2</span>) &#123;</span><br><span class="line">        <span class="built_in">map</span>[a][b] = k; <span class="comment">// 这是很重要的标记</span></span><br><span class="line">        digui(a + <span class="number">1</span>, b, k);</span><br><span class="line">        digui(a, b + <span class="number">1</span>, k);</span><br><span class="line">        digui(a - <span class="number">1</span>, b, k);</span><br><span class="line">        digui(a, b - <span class="number">1</span>, k);</span><br><span class="line">        digui(a + <span class="number">1</span>, b + <span class="number">1</span>, k);</span><br><span class="line">        digui(a + <span class="number">1</span>, b - <span class="number">1</span>, k);</span><br><span class="line">        digui(a - <span class="number">1</span>, b + <span class="number">1</span>, k);</span><br><span class="line">        digui(a - <span class="number">1</span>, b - <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'W'</span>) <span class="built_in">map</span>[i][j] = <span class="number">-2</span>; <span class="comment">// 这的标记要慎重，最好用负数，不避免和K重复</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">-2</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                digui(i, j, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[格式化输出 printf 与 输出流 cout]]></title>
      <url>http://iequa.com/2010/09/25/acm/cout_vs_printf/</url>
      <content type="html"><![CDATA[<p>printf 是 格式化输出 ， cout 是输出流</p>
<p>今天无意中发现 cout 和 printf 是有点区别的，一个是输出语句，一个是输出函数</p>
<a id="more"></a>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;<span class="number">24</span>; a++) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"++++++++++++\n"</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"============\n"</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"############\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"@@@@@@@@@@@\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">++++++++++++</span><br><span class="line"></span><br><span class="line">++++++++++++</span><br><span class="line"></span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@</span><br><span class="line"></span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">============</span><br></pre></td></tr></table></figure>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>cout 先是把输出结果存到缓存区，然后一次性输出，其实 cout 输出的时候也是调用了printf函数；<br>pintf函数是每次输出结果; 这就是为了在 TIME程序中 cout运行的时间要比printf函数快的原因；</p>
<blockquote>
<p>注意： cout&lt;&lt;”==\n”; 和 cout&lt;&lt;”==”&lt;&lt;endl; 也有不同，\n只是一个字符，而endl会将缓存区的数据全部输出并清零；在TIME程序中，如果采用cout&lt;&lt;”============”&lt;&lt;endl;结构反而会比printf慢，因为多了一道调用缓存手续</p>
</blockquote>
<h2 id="形象比喻"><a href="#形象比喻" class="headerlink" title="形象比喻"></a>形象比喻</h2><p>下面打个很形象的比喻，大家都会明白, 比如有100个鸡蛋，需要从A拿到B点，相当于程序中的输出:</p>
<blockquote>
<ul>
<li>printf把鸡蛋一次一个用手拿到B点</li>
<li>cout&lt;&lt;”  \n” 先把鸡蛋全部放到篮子，然后一次性拿过去取出</li>
<li>cout&lt;&lt;” “&lt;&lt;endl 先把鸡蛋放到篮子，然后一次一个拿过去再取出</li>
</ul>
</blockquote>
<p>尤其可见哪个快那个慢显而易见</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[格式化输入 scanf 与 输入流 cin]]></title>
      <url>http://iequa.com/2010/09/24/acm/cin_vs_scanf/</url>
      <content type="html"><![CDATA[<p>scanf 是格式化输入，printf是格式化输出。</p>
<p>cin是输入流，cout是输出流。效率稍低，但书写简便。</p>
<a id="more"></a>
<h2 id="格式化输出-与-流输出"><a href="#格式化输出-与-流输出" class="headerlink" title="格式化输出 与 流输出"></a>格式化输出 与 流输出</h2><ul>
<li>格式化输出效率比较高，但是写代码麻烦。</li>
<li>流输出操作效率稍低，但书写简便。</li>
</ul>
<blockquote>
<p>cout之所以效率低，是先把要输出的东西存入缓冲区，再输出，导致效率降低。</p>
</blockquote>
<p><strong>缓冲区比较抽象，举个例子吧：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'b'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果什么都没看到输出，输入一个整型比如3再按回车后ab同时显示出来了。<br>但是这样的情况并不是经常发生，是在一些比较大型的工程中偶尔出现，原因是字符a先到了缓冲区，但是没输出，等输入了i，b进入缓冲区后再一并输出的。流输入也是差不多的。</p>
</blockquote>
<p><strong>C++ 中 iostream.h 与 stdio.h</strong></p>
<blockquote>
<p>iostream.h 和 stdio.h 是 C++ 的两个头文件，里面是对于一些类，操作符，函数的定义，头文件本身没有好坏之分吧~~</p>
<p>只是发展到C++，都比较提倡用iostream.h罢了，因为这样写代码简单。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
